(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[   3504101,      61157]
NotebookOptionsPosition[   3495906,      61019]
NotebookOutlinePosition[   3496261,      61035]
CellTagsIndexPosition[   3496218,      61032]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"netdata1", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedimageidentifyNetv2.wdx\>\""}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7401556948137417`*^9, 3.740155722027574*^9}, 
   3.74015605142408*^9, 
   3.7402201557949533`*^9},ExpressionUUID->"d61fa311-a546-41e1-9c66-\
493bb638f306"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata10", "[", "\"\<CompactErrorRateEvolutionPlot\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.740250257105164*^9, 3.740250264479711*^9}, {
  3.740251311044735*^9, 3.740251316251683*^9}, {3.7402513518478327`*^9, 
  3.740251406642311*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"95ed2ac0-da1a-415a-b5f2-b8926aab8475"],

Cell[BoxData[
 GraphicsBox[
  {AbsoluteThickness[1.25], {
    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1:eJw1zH8sFGAcx/Erhdk06Z/QigrVtVLLdrXVfVqlH4gdOeHMrJQWSflR0kYJ
6zhxKMxFwolznN93TkWUrrvrJoqrMHGTWtSi63c9j2d79uy19/f7OISe4Rxf
yGAw8Pf+e8nxgofvkEGUZmD/J05AWWtkecaMEYecQ6xzS1Ubf5TYPgEuBwVW
/fJh4qgknA5nTbro3hJ7p0AzrvjhqntN7JIOVd4nd7G3ntgqA4krWmVZSS+J
47MwF+LW77h7gPhkNiyn1Z/jVP3E/kJ0y16l+Xa9ID6Qh8h4s3DhedpZN7He
zI7ZH0H7ugJUeHjUrS3VES8vgsZ2hls4b/NihAkXp+759Zx4ToTfc24JZenU
X25jeEJxfcc16qkSXCna4uzNpx4rhY1zvpcXT0usv4O43vzhzUY1cV8Z9ml/
vI74Rq26iyGr5L4tpnS+qxwfK+0mJb60Kyqg61imjwqlbqjEwDZRTgRPQ1wt
hmu4wDqR+ZS4rAquG7XWDiXURffgGPjR8Nmzl1hYjYkonXZqhJpfgxhRqrun
GfVVCaSbnGYPSej+pVpwTF+wp8KeEO+QoqR8yfRg4WPiJilW2RpOjcgfEW+t
g4P9niBGRjexpA5Ce2tBXTr1hnqkvE+O9pzoIS6vx602pTjbh/bVMqwpLTib
yKT/Fcug5rACWAJq2wY4lS5SLXGizmvADb+YZ3sVncTWjbCbzQ1ip9Ke2Yi4
UcmBzG1dxBZNMM3j23M11NeaIC5ecKxqLd1f2IzolScCv5vTfrkZOY9MrGrZ
tBub8c5dE2gzRR3bgiR/Y0za0EPimRYwRzJMOnKpI1vx5tzPxWP6B8STrQhw
3DVzspP2sDbEXeBpuCraR9vg02khYr6kDpaDM847pmbR+UE59L+4X5depd1P
geAay6MMQwexToHtUj77wxj14XasGWnXpnjcJ+5tx9seec/+ndRuSkwfjzIw
5v1QiYTWi7HSI0r2H6zaYUo=
      "]]}, {}}, {
    {Hue[0.59, 0.5, 0.9], 
     LineBox[{{800, 0.5753125}, {1600, 0.55375}, {2400, 0.5021875}, {
       3200, 0.5178125}, {4000, 0.496875}, {4800, 0.4903125}, {
       5600, 0.4809375}, {6400, 0.4709375}, {7200, 0.47781250000000003`}, {
       8000, 0.469375}}]}, 
    {Hue[0.59, 0.5, 0.76], AbsolutePointSize[3.5], 
     PointBox[{{800, 0.5753125}, {1600, 0.55375}, {2400, 0.5021875}, {
       3200, 0.5178125}, {4000, 0.496875}, {4800, 0.4903125}, {
       5600, 0.4809375}, {6400, 0.4709375}, {7200, 0.47781250000000003`}, {
       8000, 0.469375}}]}}},
  AspectRatio->Full,
  Axes->None,
  Background->GrayLevel[1],
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
    ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
  Frame->True,
  FrameLabel->None,
  FrameStyle->GrayLevel[0.5],
  FrameTicks->None,
  GridLines->{{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
    8000}, {{0.2, 
      GrayLevel[0.9]}, {0.4, 
      GrayLevel[0.9]}, {0.6, 
      GrayLevel[0.9]}, {0.8, 
      GrayLevel[0.9]}, {1., 
      GrayLevel[0.9]}}},
  GridLinesStyle->GrayLevel[0.93],
  ImagePadding->1,
  ImageSize->{132, 82},
  PlotRange->{{0, 7936}, {0, 0.8433455946714256}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {
     Scaled[0.01], 0}}]], "Output",
 CellChangeTimes->{
  3.740250264936544*^9, 3.740251317093893*^9, {3.740251352433073*^9, 
   3.740251407150095*^9}},
 CellLabel->
  "Out[102]=",ExpressionUUID->"87742545-3551-4a53-bd0e-331a10193eee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata1", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740155852926642*^9, 3.740155871888895*^9}, {
   3.740156000505033*^9, 3.740156021716928*^9}, 3.74015605237437*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"a103cd38-3ad2-45c5-9c5d-f0771e294b15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.7300000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.7300000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJw10wk41PkfB3C7m64VbSvlqJRIKrVq7WhVb5tUkhWtLjpmVTZdpBy1JWFL
kiu51n3FuMbMmBljKFdqc0ZClCNlQ6TEKv/+z+/D88zjeT3vz/H9zjzfhexT
loe/lpGRaf3y+f9/5k8PvKMm+pJDzzcw3oaog9X1tnFNjD2s0VN1s6TYo558
AOPvXEx12qsZww7jcwa1f2p9wLjIHm4aK6K/0i6m/AQuVBnw5TyKGD8/jWXb
5x1OF/EZq58Bl9PFshJyGR88i4tsy8paVz/GsS7YaL57J6/gUCHT7wa2u1Yv
azSMsfoFvNn2aSU7PovxwYv4q9TdZFNCBmMLDyg1lvj6OggZn74M/3Lda8LZ
RYwDPNHfzDYY7i1hnH0Fpu4zPmjNL2Vc7YV4fR+vipiHjN96Y1e0w5ib6D7j
mX+hNenGu4BllK+6ioCQ61GH2x/R/mvYbPJCZW1VNe33RVMsJyzNoY72X4fr
/bLFZ0fqab8f1Gf/0fGwroH234BdkdzRW28bab8//jUXyEfNIU8NQBFbGvhr
PzksACrPhk953mxirB0INUUDjfrTLYyFgdj4a0tkqAx5SxAG+3qtNetbGTd+
8dHqgjeuzxnbByNzvYvMISPyx2DUHr/qd0amjfHVEFx5tk5SMkCeewsLh1ed
f/L1C8aptzDlidP1AYV2xqxQsBQMTt69Qr4fitHTdX0bSjoY776NWP+TYbIz
qf/VbQhW8SPslaneNQxhg1sjfEzJU8Px8tqCn4aTO+n+4fBZuGryqVyapx0B
iXLCEYcFL+n+Eeh4XNVkISFviYRKoO9WoxZyYyROqB5b09hLto9CY/gZ4zxX
8scopH2Sddw3+TXd/28ENufdmhP+iu4fDd7B18Vlk8ip0ZBaFHYMjZFZMZCe
yZQ306D++zHgtuutOebew3h5LKZ2KCsnOVDuHAveCUe9uTlkSSyg4JgTbvEv
40lxuNbHUpj/D+VmcVDH70M5sjQvJA4Brzr7vxKTW+LgNMeqZ+U96l8cj+Nm
wY0VrdR/PB4zfdmbupzJvHj4v3Y0jbfqZTwWjz29zYN3j5GNEyBfPO6wrruf
sV8COvck3PSOp/xxApZoa5YqqLxlrJaIE4bt+yrPUL1dIhpr9sY9DaB6TiIe
cHb027tTPpSIfZJK9ZpU6jdMgkrbhqU9tlTvlYQiN5bNt2ZU/08SJtW//ehS
SvWKyWjtf253XXeAsU0yJLf0ku79RHliMrKtFqzrlaX8TTIWn5tyqH1HH+M1
Kfh79ZQazSs0/0IKVtZ69WXKDjIuSYEVa9c1TRbNk0uF8O3SnQ0hNG9nKl5J
dQXGZZRHpaLPyq1qpy7N70xF2B/a0aP+NG/5HeTa/FCbs4v6ne+g4qi9vWcH
WXIH+xtTttUYUP2kNDRNGxkyv0w2S8Oh7ZqoUiOHpKF6dbC6cj65JQ1BI/de
u3eRF6fjbFZymVvvO/r903Hpk4bE/zadl5eOYdEOgepsqh9Lx+/nAw27QTbm
QPpwaa7jW7IfB6+yDL7z45Mfc5Don9q+4ipZLQP3eav3Wf1A++wy8NkvPVIo
T+ZkoHK3UsczoyH6/TOwyCgrotiF+g0zMTU/bly/j+yVCeuVi0p/1SP/kwm5
fyN6fvAjK2Yh1O6o6gF9mmeTBR+2UZ9eEuWJWdDNUipfK0f733zJ+e1+YWpk
lWz0BCzw1XpE9euzofHnz4LtNpSzs6EfvG6m/40PjH2yMeKpGz6kSfvSsuG1
f4qtcx65Mhvax7btOhX5nvFgNjhJqitLLchKOWgqPaBYozXMeG0OlA29eYfl
aP7+HFjM48jH7KZ5njlQcOJpFGlQf3IO2OOsgVB/yh/kgLep8/aGFeS+HJTP
feWj881HxrO4iHJd6GeTS/36XNxoc37fLUPey4WJB2va9Gm0/yIXNYXvg5ck
0rx4LkTTAj7ITbiMi42NcpMqRun76eGi/6qvjWs+9cvnIuiRd4NRMM3Xy4WH
1n+5/YNk61w8aE5p++oNzXPPhaN4i1HJQ8qjczGevDykXZW+n3u56BR7HJdM
o/u8/GLO6e6PppRP56Ev5PsL99Jpvy4POpZb3BqrKbfkISPIm5UZSf3neDD9
Li/wvB3VR/Dg2MUVKMtQvZQHoycetq4scjsPgYtXz3JfSOebzEekbOwMvVbK
dfjITbizt6qcbM7HZgslk5HfaL4TH+VzHq817qL+UD6qi2z7do6RxXzMO8eZ
qxNE52vlI2GPJkvhEs37WoAB17+E736kXEuAsOVdz3d8oNxUAJ+y7tYP3iOM
TwqwWC5GyqkhBwlgVt95dvYtOo9AgJ9/mV+vuob6mwRQtD3PP/uZzvNZAPmg
gZgDNrRvUR70969aqKJA80zycLg/o7/HmPJjedDb/vmPqhejjP3z4Glo+HTj
ETI3D8Lc2QMy72lfQx5WvEkXchsoH81Dg7dqV5QZnW++EDP4Dd86nqD5vwjx
n+HTo88ukI8IcTH1/o9W8jTPV4iizzENbemUZwphO/36tM2X6T61QlyKL7Xc
VUfzPwjh7+fhFGFD/Soi2Eaa2nv+SfdbL4K1yqr1BRPz2CL4atk2l20h+4iQ
ub9V9CKLnCbCk9gC2ct11F8pQpPTtu5Sa9o3KMKnrSbWu+dQvZIYSi9rbwcv
mXj/Yly7e2RZTfLE+xdD2yfLK6WQ6j3FWGff3iAbRfOTxWjY11nKHaDv74EY
FaPVzfF5lPeJMXl6Zr3mfpo3Kx9qiX66OiMT7z8feordLi0utH9vPvyXidSS
HWnexXxs/MXE9EUp5fH5mFdheNuBT3lZPhrLL7mKI+h8PfkoeK/KfuQ/8f4l
qJyRUhvxgnI9CfblNPe0t1BuLcHHEY274SfpvO4SWGr2Kzt7UR4tQfCxzqeW
E/vuSWAu13OlrnOM3r8EdvNWK+tYTrz/AhQ7RyuxCyfefwHYvkXft5nTfssC
aCZuSr10mvJzBdhT7rrxt4D/6P0XYGhRN/fgN2RpAZbWnXgy7EtuL8Du5fOM
LaJp/2Qpase1nyQ/I+tIoesne2ZsFp3XXArOHrvYisvU7yRF1mau/JI2um+o
FAbTN88Vl9P5xFL86VlsOvgb9bdKUf7NpcDgSZ/p/RdiukF6cpsi9WsVQmeB
SF3BZKTwfzcPS4c=
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, -0.07449644149213248}, {
               1600, -0.14365791085942284`}, {2400, -0.10068701721238088`}, {
               3200, -0.11191152633032792`}, {4000, -0.07266280717952046}, {
               4800, -0.03400045627295513}, {5600, -0.0014750403414908208`}, {
               6400, -0.02874731998746956}, {7200, -0.03462299108535908}, {
               8000, 0.02026209252815599}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, -0.07449644149213248}, {
               1600, -0.14365791085942284`}, {2400, -0.10068701721238088`}, {
               3200, -0.11191152633032792`}, {4000, -0.07266280717952046}, {
               4800, -0.03400045627295513}, {5600, -0.0014750403414908208`}, {
               6400, -0.02874731998746956}, {7200, -0.03462299108535908}, {
               8000, 0.02026209252815599}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-2., 0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-2., 
              GrayLevel[0.3001]}, {-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-1.6989700043360185`, 
              GrayLevel[0.8501]}, {-1.3979400086720375`, 
              GrayLevel[0.8501]}, {-1.2218487496163564`, 
              GrayLevel[0.8501]}, {-1.0969100130080565`, 
              GrayLevel[0.8501]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.9296545230807925}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.9296545230807925}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJxdlXs81PkaxykpKkmlclSkdotqW7ra0qeOkpJtpcviVGvdki1EEjmoJKIh
kUiMYca4zRjGuM4WIUdt6bKpeLl0kdRabKfa7bQd36c/fuY1XvN6v57v93k+
n+d5vi+GzgftXEeoqKi0ffr7/y/7mMLetVXDZezLNYw3Y9KPqgK98qeMQ3fA
Klc1/H5iJ/Ee2JpOl07vaWMMF1RLx2QpJ7Uy/tkDi1dsuvn4WAvFf4KD3Nlt
Q9QDxu3euP3WbovgX/cZGxwCP7RzoKTwHuO9/sj6a3HLMqM7jNMDoPOHmau/
UzPdD4QZr6I/QIfYIBgWF7xaL0fepPshmGLNu3dj423GW0PRxGs2bguluHcY
vMdU2ugImxjzwrFSr29fYn0DY8lxNB/6R7rS9TrjWycwoXXzZEu/OsZ9J7Gw
qmPL2p56xtqnsMx/jYn+CuLFkVg52iu09vU1qn8aksB6rWPtNVQ/CmsGemZc
/eVnqh+NjIFmS3lvFdU/g2A3P0XXXSXVj4FQw/8OfwlxXyyeh8+pGZtazXgM
D15W6eJ+HvEFHp677hr8qEn55sWhu31Pz2PDMsaKODiK+qeJ5ikYb4yHyVcf
aq/IKf4gHhrj9qXiaQljj3NIfuk7cauQ+O053PMRrbW0ofuRCXD+Mrhb26eU
8bTzyAsbEN6WyBiLzsNNYjdeL414RSJ03JfkLf0oYdyQiKnhVhol3lLGu5IQ
k9bfvfsYne9OwvF1u6KfddP5IxcQFzFRqfqG9IxJhnZoXYRuQz75T8bSsN+e
7+HT/XkXMVdLGhYrLyD/F6HtZNX1i52I/Kcg/J3B2aADeeQ/BRubdPPNpojJ
fyre7U4tCJ5M/DYVY6+r7nPVEZL/S+icecVE/Qnlm5aGf4dqW11qobgoDVN4
f/bJt/PJ/2XUqBuYz+rJJv+XMdp2ZmfLo3TGC9IR/WLbqO5COu+XjtFjd2eu
cM9kXJmORa71Wi3JlxmrZaDX62SrRkUWY5sMWK/z1r/lQfUTMjD4UrUwLlXA
+HEGNL6bX2GhSzyHj1dtWVaCesrvxcfvx/VnTXWieDEfHZMcjvv7X2L8Fx8+
TSE/+amQXstM8GYv8UiPvMD4TCYc04wc/KYlM76bibz9XSHL3c4z1hfAaMvX
Rxt3Uj4XAVL/s+uH/V5UP08AnkLVQt2E/A0KsFfl44Nf6yjfqiw05ghdJvTR
/RNZ6DW6sSbDgLgpC9+IsxSm/aRncjasLb+0iHLkMXbKRkf7x/y3wkTGgmyc
FwSb3eXHMe7NxvQDvpsy8snfEiGCzH32bDJOYRwsxIrYrk/fSMa1QsRqvdpT
15jKeJwIC3mHF/cXJjC2F8H17KwFfzSS/1QRRgb8oDdCnfw9EcF89dQPNgep
/oIcaMq+MygLIf1+OTD0Hz/K5DfiyhxIxl0TnHgYQ/MXo0Gj20OpS/dtxLAx
3Nk1Jzee5i+Gqndbv+nSWJq/GClJ0vEzxNSPObnQr/f59D1D889FTExAY/J/
k2j+uYg469ymZ3GO5p8LpdZ1tVGf9VrmYWX4qCAtT6p3Jg+/X5X2f2VM+e/m
IUpzlkzw7izNPx/z1R6tT1lNcZd8eG2Lu/XImPTl5YN3VLvCSHaC5p+Pf2pE
BumGkt9VBZi/1FDt+69Jz4kCQOZifDmA+ttUALMktcz3fRSfXIjebTWJV1oo
v1MhMgMdAyUHSL+gEC/cHrYbLqfzvYVIet2tPtWB9OlJUBN4p7Anns5bSFB5
NGdWlzmxswT59iOVE8oiGEdIYB5lHbhFTP0QS3C+R6XR8X0U45sSDLVb/xTj
fgm6hhbqOGNdKc0jmLG5FNuHPicZ75bim5jo7l07SF+4FPvmxJrWjqb62VKc
sa1ZCSvqd6MUwpgwFcsE4tdS2t8jjHWKINU7HCA+Es54WREMXzVrnEo9zdih
CB0TVj+KNqN9DynCXiy8255A9flFCFrkKfBcS/OqK8IqDwenQSfqZ08RJvm/
qHXMoriWDBjcEbLQkOZhKuP63yHDEe/owclRNO+jMoiHPtS/NBm3P1dlXD/P
ZPAdOhDGWLMYA5puSpt1VH9RMfXTn7FdMTff4WF8sRhDvyqhjKuHxTuLYdKQ
82dHLe2DegmMstsH3Z4dY2xcwtVnW8J9b74l2LvKIKgapC+xBO6iH9PiNxCX
l3DrtZVg2qvNsUsmkr8RcnQpg+Yq80nfF3L033iWEp1N+7BJzt2fA3Ku/3g5
dx/lcu48Hsrhee+2tXYr7cf/5Gja6zhvawf5m13K1behlNsvz1Kahw/j2FJu
P4pKsXNzsTDlBuW7X8rV974Uv1o78lRTSP9MBXe+6xTc+m4KTC2KKb4mp/pR
CgRnz45WaSf9BQruPjUruHrfKLA8OfV7+2Lqn14ZV49FGfe8cxlXT0QZytdP
sbf8QHrFZWhYtj9SkB5C778MBqWDReoL6P30l8G+TM3OvYnO65Zz52FejoJv
LRo7tGm/dpdz/YYP4+xymF7ZKpo4Mojefzm336/LoXoxKuGRBe2XTgX3/9my
CmQKn8zlG9D8HSrIvyu9/wpuPX4Ftz91w+I9FQh5E+jJy/78/iu5/TKtxLdr
Zzx8/rn+jkru/aOV2J7rPt92I/UnrZJb7+rn8170/iu5+6tZhfV620feMSZe
VMXNb1eFue7ap9/60rwPV3H9Xqzi7m/1sHjnsLh6NeV3ovdfDR8dnYGep4fo
/Vdz9ftWc+eTOIzLq4e9/2H5Ryi5+/iFEn6ZB207FaFr/gZwh1g2
              
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.23625000000000002`}, {1600, 0.2003125}, {
               2400, 0.20500000000000002`}, {3200, 0.184375}, {4000, 0.195}, {
               4800, 0.195}, {5600, 0.206875}, {6400, 0.194375}, {
               7200, 0.1878125}, {8000, 0.18281250000000002`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.23625000000000002`}, {1600, 0.2003125}, {
               2400, 0.20500000000000002`}, {3200, 0.184375}, {4000, 0.195}, {
               4800, 0.195}, {5600, 0.206875}, {6400, 0.194375}, {
               7200, 0.1878125}, {8000, 0.18281250000000002`}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.9296545230807925}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   "0.18281250000000002`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.740155872345191*^9, {3.740156016594706*^9, 3.740156022238669*^9}, 
   3.740156158654314*^9, 3.740218517543374*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"4037f470-5289-405e-9d2c-dc57b0749c05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net1", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedimageidentifyNetv2.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740155876483314*^9, 3.7401558989526176`*^9}, {
  3.740156053675375*^9, 3.7401560830794992`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"52d3fcc0-3413-49f6-970c-f34ac1fe3d61"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "auglayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {224, 224}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    7, 7}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "bn_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {55, 55}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2_red" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2_red" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2_red" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 320, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4d" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4e" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{352, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 224, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1056, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{352, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 224, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4e", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4e", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 1024, "$InputDimensions" -> {1024, 1, 1}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "auglayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "auglayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.48, 0.46, 0.4}, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Nodes", "pretrainednet"}, 
                   NeuralNetworks`Private`NetChain`part = {
                    "Nodes", "pretrainednet"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "bn_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {55, 55}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2_red" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2_red" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2_red" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    192, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    192, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    192, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 96,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{32, 
                    192, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    256, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    256, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    256, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 96,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    256, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    320, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    320, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 96,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 320, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{224, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    96, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    96, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    96, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    160, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    576, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4d" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{96, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    160, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    192, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4e" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    608, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    192, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{352, 
                    1056, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{352}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    1056, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{320, 
                    192, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{320}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{160, 
                    1056, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{224, 
                    160, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{224, 
                    224, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1056, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    1056, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{352, 
                    1024, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{352}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    1024, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{320, 
                    192, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{320}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    1024, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{224, 
                    192, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{224, 
                    224, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    1024, 1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4e", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4e", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"auglayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {343., {239.4169921875, 244.5830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7401558932027903`*^9, 3.740155902180928*^9}, 
   3.7401560840890493`*^9, 3.740218298240623*^9, 3.740218518027092*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"630cdb22-1a3c-4bd4-b789-14bf9ad7ef6e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata2", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedinceptionNetv2.wdx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740177286112967*^9, 3.7401772908916693`*^9}, {
   3.740177348579405*^9, 3.740177349224299*^9}, 3.740177579084086*^9, {
   3.740187031290023*^9, 3.740187031379808*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"9cb1ce23-b10f-497e-b8d2-1a1e813b35ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata2", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740177577471114*^9, 3.740177577639914*^9}, {
  3.740187034627967*^9, 3.740187034736809*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"2d2547b2-94bc-4a52-9ba7-d5c0355ada66"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.52}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
n6WwU8SI67rofFOl6NQMD1v2A/kJpVCp+Kh4dJ32a5HCYSXHcZ+YeEyKHlbN
tKJn5D+/DE0GvXsHW4ntyrCjNYfn6UD34VmGzR/dHus9pbykMuR11298uJ38
istgfviT0bA+zXe/DHYlP/1l4UJ+w2WI73L25rtOvP9y6OyIr45oI3+bcmj7
6G5M+EDzu5fjLzm7tf7jxPsvR6NS4/SDHNLzylFtbtpcfYDOq6Ecnp/9uPSa
PeX1lyNbaZpKcBz5zZZh3vrIwNbdlG8tQ/aBkliu1z/0/mVoOz9iYBFM/rEy
LHEJNGh0m3j/MoQtsx11HSKuk8HFUzCktmfi/cswPU7n6BsL4pkVWK1X4B1j
RfOvroB/9ySVY1rU71qBqLIZaZ8CiI9UYMeFyIGUrfT5ZVeg6VsD26N7ad5b
FWhvnh+nWU76VxU4njpWz+XR/6fplbj949iocOL70rwSNvrWC2buon5WJRy2
hub5vaD+8EoUZVin2IaT/lIljHpSwtgrqH69EqOOvU57Nf6m91+JZztnXX7t
Q+ejLscJPTbHV0G8XI79ywdchpqJneRI8jDIkDrSezgkh0vP8xbXg7Rfphxm
q1QP6XqTXiGHReDuOZ2jdH5P5OANCuIUb+l+P1egYXtXQ5vxxPtXwHTMe/3M
P8l/qwIhC8prc+pJH6TA1B12N4IPkX+6ArPV/xJIQSxToE/NcMk2TzqfTgWc
PerujMyiulIV1M/cdW15RGxUhcv7Nhuc8B+t+hfetD0f
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, -0.1271030734696769}, {
               1600, -0.2457923280501838}, {2400, -0.1984422921176325}, {
               3200, -0.26001647646744686`}, {4000, -0.2587497039226181}, {
               4800, -0.21002674294360105`}, {5600, -0.22199003297108036`}, {
               6400, -0.2066409180221295}, {7200, -0.16884202727828104`}, {
               8000, -0.20024995401949686`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, -0.1271030734696769}, {
               1600, -0.2457923280501838}, {2400, -0.1984422921176325}, {
               3200, -0.26001647646744686`}, {4000, -0.2587497039226181}, {
               4800, -0.21002674294360105`}, {5600, -0.22199003297108036`}, {
               6400, -0.2066409180221295}, {7200, -0.16884202727828104`}, {
               8000, -0.20024995401949686`}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-2., 0.4}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-2., 
              GrayLevel[0.3001]}, {-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-1.6989700043360185`, 
              GrayLevel[0.8501]}, {-1.3979400086720375`, 
              GrayLevel[0.8501]}, {-1.2218487496163564`, 
              GrayLevel[0.8501]}, {-1.0969100130080565`, 
              GrayLevel[0.8501]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6731817339047226}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6731817339047226}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
Ua+/TFFP6nfx4u/Ou2SK+6pyXvF+w//zX4ECb+A=
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.1896875}, {1600, 0.1471875}, {2400, 0.144375}, {
               3200, 0.1309375}, {4000, 0.1284375}, {4800, 0.1290625}, {
               5600, 0.1290625}, {6400, 0.134375}, {7200, 0.1509375}, {
               8000, 0.130625}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.1896875}, {1600, 0.1471875}, {
               2400, 0.144375}, {3200, 0.1309375}, {4000, 0.1284375}, {
               4800, 0.1290625}, {5600, 0.1290625}, {6400, 0.134375}, {
               7200, 0.1509375}, {8000, 0.130625}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.6731817339047226}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.130625`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.7401775803726797`*^9, 3.7402190405815773`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"67257d34-94a3-485f-884f-8e8364285267"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedinceptionNetv2.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7401768277840033`*^9, 3.740176855018613*^9}, {
  3.740187036144403*^9, 3.740187036207402*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"01856d76-62f6-4078-bade-b7efb1f53fb8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {299, 299}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {299, 299}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{32, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{32, 32,
                     3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 32,
                     3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{80, 64,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{80}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{80}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    80, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "$GroupNumber" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 288, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{448, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{448, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "30", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740176855996744*^9, 3.740246758611713*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"2c963987-90ea-418c-b3d6-94b32f9ef3fb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata3", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedademNetv2.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7402183075233994`*^9, 3.740218365889429*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"631b63c6-547b-41f4-9f67-e95dfa7288f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata3", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.74021838101608*^9, 3.740218381227886*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b4c707e8-2df0-4f60-a1a8-92041cb41ef1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.53}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.53}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-3\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -3.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJw1lQk0FGobx0fklqQsyZWvG+GqWyoVRcs/2tNyrd1SqahcrYiUi0JJUjEY
+5J9GzOYGcsMt1IiQhGOXG2ULalQufr6vnlmzpkz53ee5/+s7/uO5qFTFo4T
GAxGx4/v/37FHwME+30fMn7TtFbM23AzwXrRlVy2mH1t4BTS+bUhNLVczAeQ
kyJnOdZVIWY44Ju5osbmC3VirjiGidazKxs3Pib7CUilLGk3YDaIufM0vDZV
hrtqkP8cVzCS2/nCqCYx259F67i98xJum5gTPeDEUWnQ29lOek/o8dnpq9v/
Ib0XKngGyXyLl6T3xvBqfT/Lay/EvMsXo9MfzMwNIz59ET5bu32F21+J+eYl
bIxhXnc8+FrM+X5gvm6xdjXtFnO9Pw7/5VMp5dol5sEAJJz1WJI5l/JNvwIn
j379gNi3Yl4ciL8LVfrzdN5R/qtIrK2Iy5YnPh2E/qF2i0pF8r95DVyRYdiN
jl7KH4yHLVa1jz0GKP91nN3b1j/Lc5Dyh8Cr547xdRbxpJtQ4OYP2bSRnnUT
4+fCbxS3UD69W7h6Q7HdybJfzIJbqO+aUXnkxXsxbw5FSOf+Wul0ytcSCuWK
2H1BT4iPhcFUWbPPxYr0o2G4bdRYmDShT8yBTByOcitVcab8auForuGua+vp
EXNGOJyTOFr12VTvigh0tPXLxIURV0VAX26oz/3YBzHvjkSjoY7x9Vayv43E
pHte9npnKf85Fj4kzE2xtRmi/qOgoabbaJxI/bB+cA9/dUIv2fWiYX1uQLjl
FMUTRCPpi0GDdu5n6j8GCqFa7w/upPwtMZhgObxn2n7SH4vFgMKRgkazT9R/
LIImv5q8UvCR+o+Dt93ipR+lh6n/eNwfXK5yl0/5MuKx0/LAzbQMmueKBDTE
SP3CLSJ9VQLasv491yik+AsSIXPFS1tVi+xuifhuNbOK3UD1lSXCe6HIJ7GU
WCYJicUFYVKOxOZJGJXOULmwgZiZBEdBu0XIVuq3PQmTWay1t0yoP+1krHy+
Mk5ehfyPJ2OHPWPOeDTZC5MxzzTRfuE34rFk8M8r7wt/Tv7rb6PjdMzbHBmq
P/g2GBpDDW+nU/1PbyPYYuPGsk+k10jBqmcKZlH7aR4OKeh9qipbWUfxclJg
v9HMxWgb1fspBfve7+M+OEm8KhU982X1WAzy90+Fw+faMiddmvejVDhZuex1
/0L5VNJw3NK7z7+N6rNLQ7DUDpeZ9VRfShqUG0ZPjjHJ3peG8NDeZ1dTiZel
Q6eKmbnThPJ5pWP27+8TqtKJ76XDRLD4uYnk/MhnoHq4s9tfMj+rDOzWfDhQ
wSF7bAbUu2u1zdQp/usMdO44yjmznOpZkImcEyWL4n6m8+SWiUG1jHaHC+Rf
lglRedzAvicjtP8saIqSpj+PpPmYZ6H7ztM0y1hiZhY+2ybOvif1hfafBfeH
OjXmRyiedjYe8CZUz/gs2X82loa+m7lhGtkLs3Ew9ZWAXUHxxrLRukjpxhy/
Udp/DhbEBgX1VJE9OAcf6+2fGXwjfpqDFIaiiYsHxdPIxW+85prib1S/Qy7C
Ua0YNI38c3IhMujIrhwg+6dcLPbTvZvcRPNZlYep/4ly923+SvvPw5KrPVHj
XjSvR3kw2prS7SekflTY2PxmzQI/Y9qHHRve4+tey0VJ9s/GaTffwF1OZO9j
w8CP90helvTq+dg8V1bTTIbqW5OP8eMW+X9Yk/1QPmQ975uOSvZ/OR8OJms3
nxwh/6x8nFBKnltuS/XV5QPFufleycRD+egcX3ZL1ZD8VTkQPSq+NMWH2JiD
aGGnwhCb/PdzMPmLbcBYDfV/iQOLtYa55vOJ0zjIi+lfEJdL/tUc7N09c5KG
Dt23AQ5YOk1KE31ovkpcKPm4NxfJk96QixujZwJMjGhfe7jYq/+BWTGd6vHm
YiTzlqX2QbInczHwSifd5zDZ73PhKqt3yN+K5tnDxa7fWlqn95BdoQBpEap7
1Cf/K2aDAhw53Hl9pus3MdsUIGBfV5tKO53X8wW4Hqr1VH071RtfgNUvzG5H
jFB/dwqQPzFsxS9ZxF0FyEvtZ3suIX+5QgR1T5LiXaX8+oVQ1HJ/brid2KIQ
y45OnGRuR3r3QnCkXR/MyKTzEV2Ie258zWEu+YsKsc751ZOQ2+T/shC5fJa5
siX5yxbh2ovZ0i18ms/8IqwPsOnolex7RxGUEg54yiszKv7PLkWw5o6M+fhQ
vxFFiM8NzHIB5SspgvBX2XbOQorXUYS/7o2IYuPo/k3gQaYgTu7gYrLr8jBY
3RRuUE/z3MpDXkcKI3Q17fckDxGmRuNDC6meUB6M2AU5s/6geDwelmk+LurT
ofm18TD859t71ntpn+M87E1arxLII70WH+mOvex1alT/Rj50HPxseZH0Hv/J
x0/OmRo6y0kfwkfnmt9P+14jPZcPBUeZi4EfKX8zH9bXunTrZo+J+SsfXy6H
VOY5E88W4KKzYk6yDbGpAGO+QQKbKdTfEQFcQ7TfGR2gfEEC+EXuHkqXIs4T
QM021GJiLOVvFOBYsGn4aBLxsABNc7ytJkveB/VidG9SrOdK+l9TjNbirm1H
X5L90A92TC6YN4v4cjGcvFaNNEZSvKxi+Kpquq0OoH3WFUM0VnFSbZD2NVSM
RU/vKH7OIb1qCQau7o8MiSc2LoFKs2J6vJzk/pcg+6eYpGY27fdSCX51FGw5
6kWcVgJWd4JxBJPyVZfAS/Uc4rbTfAZKEGvw0k7ZkPalVIrQD+c86j6Q3rAU
f3s7VC2/S/o9pZAZb5a12Ebz9i4Fu3Vwmdqm73T/S9FTtz1wHpPO8/1SnAzc
Hdg0TuenpxQ1KUtPra+l/AplkG5xVLRaTPEMyqDQPytobgT525TBpunWi+Ua
1P/5MsSfOJPFiiZ9fBkiWKLdvPWS+18GC9uXCb4tpO8qg5Cx5W7TSupPTohl
s+KmprLofOkLsSUuqMl+KukthNBnrnxl8ITeb3chvHUf1I5sIP9oIRgia/2f
/Wn/IiESt70ZVHlE/i+FkH+0s2eXKsWTFeHT81Ol0pL/v/kitE7ZEt3AkNx/
EeQF0+T7c+j9cxHhsFZbjV0v3ZcIEdKMaxqCPaj+EhG2+Yua63mS+y+C+pmK
mmoPmseEcqwt93Q7bkf16pbjH6ZZZ7D8cPl/ARJtRoE=
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             LineBox[{{800, -0.29387043675976365`}, {
               1600, -0.31720139592258584`}, {2400, -0.31475130946213153`}, {
               3200, -0.323714436538625}, {4000, -0.2975047576240825}, {
               4800, -0.046518475697685475`}, {5600, -0.25131414586427747`}, {
               6400, -0.15051712476383616`}, {7200, -0.17113724881938008`}, {
               8000, -0.3038541724466793}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, -0.29387043675976365`}, {
               1600, -0.31720139592258584`}, {2400, -0.31475130946213153`}, {
               3200, -0.323714436538625}, {4000, -0.2975047576240825}, {
               4800, -0.046518475697685475`}, {5600, -0.25131414586427747`}, {
               6400, -0.15051712476383616`}, {7200, -0.17113724881938008`}, {
               8000, -0.3038541724466793}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-2.2, 0.4}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-3., 
              GrayLevel[0.3001]}, {-2., 
              GrayLevel[0.3001]}, {-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-2.6989700043360183`, 
              GrayLevel[0.8501]}, {-2.397940008672037, 
              GrayLevel[0.8501]}, {-2.221848749616356, 
              GrayLevel[0.8501]}, {-2.0969100130080562`, 
              GrayLevel[0.8501]}, {-1.6989700043360185`, 
              GrayLevel[0.8501]}, {-1.3979400086720375`, 
              GrayLevel[0.8501]}, {-1.2218487496163564`, 
              GrayLevel[0.8501]}, {-1.0969100130080565`, 
              GrayLevel[0.8501]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.607378884139894}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.607378884139894}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
31jWwNfu+Wabofr/D17IYEo=
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.1315625}, {1600, 0.11093750000000001`}, {
               2400, 0.0971875}, {3200, 0.0934375}, {4000, 0.098125}, {
               4800, 0.13375}, {5600, 0.100625}, {6400, 0.13125}, {
               7200, 0.0965625}, {8000, 0.09}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.1315625}, {1600, 0.11093750000000001`}, {
               2400, 0.0971875}, {3200, 0.0934375}, {4000, 0.098125}, {
               4800, 0.13375}, {5600, 0.100625}, {6400, 0.13125}, {
               7200, 0.0965625}, {8000, 0.09}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.607378884139894}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.09`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7402183820266438`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"7db6a001-f8ae-48c6-9d1b-ca3d8440b53a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", " ", "=", "  ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedademNetv2.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740218395441493*^9, 3.7402184075113688`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"82b718da-e6b7-4731-9305-e9c5f369048a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {320, 320}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {320, 320}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {320, 320}, "$OutputSize" -> {320, 320}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 320, 320}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {320, 320}, "$OutputSize" -> {160, 160}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus2a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus2a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2a", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Outputs", "Output"]}], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {160, 160}, "$OutputSize" -> {80, 80}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus3a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus3a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3a", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Outputs", "Output"]}], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {80, 80}, "$OutputSize" -> {40, 40}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus4a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus4a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4a", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b5" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Outputs", "Output"]}], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {20, 20}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus5a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus5a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5a", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Outputs", "Output"]}], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {10, 10}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "_plus6a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus6a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus6a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus6a", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "_plus7a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus7a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus7a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus7a", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "pool7" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 4096}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {320, 320}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, 
                    "VarianceImage" -> {0.0524, 0.0502, 0.0506}], 
                    
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"320\"", "\"320\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"320\"", "\"320\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "26", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7402184088577747`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"f107a903-0ffa-47c1-8f02-c31ae20c702c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata4", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedresNetv2.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740218411514526*^9, 3.740218428195059*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"468a21bb-a663-4a2b-b64a-7421cc17bb80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata4", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740218437974814*^9, 3.7402184382454767`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"b9167683-3362-405c-8882-8b9f42a5c19a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.52}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.52}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJw1kwk41HsXx0sbwpVKEl1JyxXeVrwKX6XIbZFXFC2ipF17uaUpLSrJliWy
jLFvY8wMM8yQVEaU67YIKZRQJFHySve+7//wPB7P5/me8/2e8zv+M9wPOeyS
GzFiROM/v//7y/wsxLXRd86wt760ZPh3iOKsX03OrGCY5QT9Khdt72YR8Xa0
qsxz+y5NZxg7ce1NnYlZTHzx/7nEC073rau/a/MYxgGM0mQ5JM5LZ/iNN741
nRxqsShlWOco5qfbK5S+qWTY7Tja1wTY9KtXMBx/Es95k0OiI6qp/zQyIqxK
fHNqqP8MBu9y5JLz/6R+X6wIYeUs3PicYXsWlPhtoQaWtQx7n0ePaRb7FxAH
XcD9DJvxjawXDHP98DRuVsCm5gaGqy9ii+yEzdZDxN2XEF2sreS4klj1CqaU
fWncPI14vj9sn+5dPdrjDeVfhZp/7X+8gpoo/xoWBEf1+J4nDrqO7vs/W2+M
bKH8AHiYOJz9/fA7yr8Bk5oF29ZoE3cHQla048hF9luG5YOw9+jzxk33SI8M
wjO9KaMvZJPf3GAYclfcG/JpZbggGErV0s0z171n2DYEmi6mPFkp6bUhyA17
HJWbRLpXKDo15yxad7yN4f5QqBnK4t9Xf2DYPwwtI3Q0dp0j1riF8wtnZNi3
E6feQoKRj6LuEPmbhqOk93ztQ7UOhsvDsWVz2R/HkzoZ3hSBF6Z+9qb67Qy3
RcBZTvcB9xea51QkzN5aD32qJZaPQscZrYmd96k/MgpXHw1Wl6+n/Lm3sXi5
5+oN7C7a/zbyj3CVLYa6af9o+Gxt9nT2I702GsvtK7vPCkj3ioE9q2m21c2P
tH8MvkxNlaRUfqL97yBMoONi6E39GrHoca+dI3SleVJj8ceBwjn2XsSmcegu
aWZZfKf68jjExz1WOvKV/A3iwW+q4U9fTnwsHh0Sx+LVKpRXFI8CQadLuif1
j05Au+6TjRUD5L8mAbK3Obd3OX5mOCwBQlHnQHcwcUMC/BfYmMnZUL8eG3sU
PX0mdVD/fjbqfBY1KmdTPp+Nbayu4tcDlD/Ihqe86/pFL4mtEyFOXRLkqE7+
AYnouLJ990Mner+niQiraRhl5k31WhzUfW6YFzW8/04OlLz7uqwOUn0mBw7a
+0tlT4h7OYh8pB6dnPuF4WVJ+GC+ICLWlPIuJqHdY22Isj9xZRIUbr62bhjq
YXhSMtoCRT4zi3sZ3pKMySanZ8ZZkh8nGVYFPxIfqxN/TIbHOH32+PWUvzgF
y7a38weG/c+kwCpvj11/F3FZCn7e3beSz6I8pVSMOrIkXP8h6Y6pWGtp3GrQ
SX4xqQitR6WbCfHbVCS6BxtuyaJ+gzTM7jtQm2VC8x5Lw8GSU4ZD78mvKA2e
cyZrPnH+SvdPR3GVT2fbBtLXpOMZ16LZZQr5haVj78L6w2+n0n4N6VhZUmlk
okX+ehmIdTd0mGRJvD8DHSOrufNVqJ6fAWPnVr2tGZQ3mAEv6Iq1S4itM2Gk
biiRl1B/QCYOtpz0cR0cvn8m2mXBY43Dh++fBTXLkexoH5pvZxZirfb9+Tmb
5s/MwuSPFfUtkeTXm4XLt4xvLHXuo/tn41GUzt3wnd/o/tkwLw9aNW0n1Vdm
Q/Lazu3VRKqflANpr+zVr9Lh++fAKDEryrFv+P452G2oXH78JeV/zEGgaYFI
4zWxJhfuGeLpZzVpXgsuKt5vurTiJunuXHDOmlYddSX/y1wkqzYb7ZhH+elc
6F2/46dgQ/pjLrRzrv8YM57er4eLT0FhnUbfaB71XHAKmw6wCun9zHLx42gc
L0CX+rflIspRyXZQlfhCLgxUPUOuTqG85FzMNdfN6btEfhW52Lw/aSijkLgr
F84tpyvKishfjYdPrlN2j5hAujEPRnlBptP2kL8LD7r5P9XWj6f39uXB3Orp
ilYXqmfzIK/illYyi/Z5wEPa9R8W7Ih+hjt4+FnnL9fpQLpKHrZYqZyrukj6
wjzEe3r0KS2gPKc8GLqeH1D4Se/rkwe9wYRs9UjaLzYPN+b0v7IyIC7Nw2zl
e4OW1tTfmgffe3f8ak9RniIf43o0y8o4dD8jPuIWmZ9LTKX5HfiQ9c9j7V5A
fif4UKrBFbcY6r/Nh99qC6t7caRL+RgM2GfzTo76m/kQibTL66sof6wA72us
EnadJtYXQDxUPaFhPO27TgDVuIbLecYDDB8R4ITryKaw6VQfLoDyM379uzeU
JxbgWpKwSeM6caMABsUKyw/FU76cEHKe79ycukifLUTfV96dQn26l50QH+vd
y7VCaJ+DQmS+WbQyZgrpIUJIU0Sq3jtpPqEQrVqLXebMIr1OiEhFg9GBw/sO
CfHhbkpDI5/m1c3HgKHqyI5w8l+Vj2DJk+MK3sR78yEz2WEcW0YcmA+u3b+W
LllC/rx8nE6yeufeRvrzfGg4Xgh/KvrO8EA+VryeavBVleabXgAdDuuMzI7q
lxcge6xQ61EM3dezACH6h51zmki/VoBvh1iT0vJp3uwCtNybGLjkG3FNAepY
l2QbdOj9vhZAJSlm+/g86tcUYSw38t1nB5rXQgR/89je/auI3UW4LHLq3zhE
fFmE1uiZ22Kf0n3TRdA7cLnK9S/a57EIQS9UYz5kUF6PCKeaRcEeb2kedTE4
yjtOjtlKbCZGaNpyreBNNM82MSq/3FR030R+F/7hmFG21hGUlywGV1pV/khA
eoUY/Gd2N0NXkV+XGCtt9BW+ryVdrRAV+/zGuGoTGxfCV31UY7QLzedSiGN/
GK0OVfwvff+F+Hg/9dpkP8pjF6J9hYVavRvpDwqRkiDuXl9B83YUIrD537av
pg5//0VIEf+K1W2D9P0XQZ9rKDRyofs6FYHLcb6k7Ej5PkVol+OxzwsoL7YI
+9bIhakr0rylRTAOyuiviKT81iI8+a3t5Yw28lOU4Loxp8M8j/qNJPD+FHrG
w5P6HSSwW9SYLs+n/hMS5LuYWXYl0j1vS2DLPh3zfCLNL5XgnD1fQW8mzdcs
QemlnzmrFtL/31gpDHaNa5Lx6HvRl2J+rvlG+YNUv06KjdzFu+pYxEekWFri
J5F8JQ6XQlbw12/6CZQvlqJ3VJ2vmg7N2yiFhtcE2/Vc0uWKwRpZYykYon1n
F2PbssOvUu37i/8Gx21Ehw==
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, -0.014842280498879128`}, {
               1600, -0.13068910589489371`}, {2400, -0.06514607660366883}, {
               3200, -0.19930645754904877`}, {4000, -0.1301888613230597}, {
               4800, -0.14126559571158376`}, {5600, -0.1520316217497511}, {
               6400, -0.05775939359545693}, {7200, 0.03687861278796552}, {
               8000, -0.05244002278502686}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, -0.014842280498879128`}, {
               1600, -0.13068910589489371`}, {2400, -0.06514607660366883}, {
               3200, -0.19930645754904877`}, {4000, -0.1301888613230597}, {
               4800, -0.14126559571158376`}, {5600, -0.1520316217497511}, {
               6400, -0.05775939359545693}, {7200, 0.03687861278796552}, {
               8000, -0.05244002278502686}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-2., 0.4}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-2., 
              GrayLevel[0.3001]}, {-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-1.6989700043360185`, 
              GrayLevel[0.8501]}, {-1.3979400086720375`, 
              GrayLevel[0.8501]}, {-1.2218487496163564`, 
              GrayLevel[0.8501]}, {-1.0969100130080565`, 
              GrayLevel[0.8501]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.703343455566039}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.703343455566039}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
ksrn2ymV169YJ283rPuf/b9z63ZJ
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.2134375}, {1600, 0.165625}, {2400, 0.18375}, {
               3200, 0.1403125}, {4000, 0.1484375}, {4800, 0.1384375}, {
               5600, 0.145}, {6400, 0.1534375}, {7200, 0.165625}, {
               8000, 0.15687500000000001`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.2134375}, {1600, 0.165625}, {2400, 0.18375}, {
               3200, 0.1403125}, {4000, 0.1484375}, {4800, 0.1384375}, {
               5600, 0.145}, {6400, 0.1534375}, {7200, 0.165625}, {
               8000, 0.15687500000000001`}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.703343455566039}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   "0.15687500000000001`"}], "}"}]], "Output",
 CellChangeTimes->{3.740218438664425*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"a2d83277-440e-435d-b6a0-319e414333a0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net4", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedresNetv2.wlnet\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740218506593638*^9, 3.740218516557942*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"19a6536d-3d88-42fe-827e-6cdb11d373b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata5", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedvgg19Netv2.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.74021846861407*^9, 3.740218485525395*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"7da9fbbe-9e8a-425d-8868-f7643960c87d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata5", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740218500356008*^9, 3.7402185004786663`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"8df486e8-f1fa-4cff-b30f-53f37861c7e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6500000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
lw==
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.5397970264209933}, {1600, 0.5397978581774776}, {
               2400, 0.5397983896762073}, {3200, 0.5397986612511925}, {
               4000, 0.5397987840424666}, {4800, 0.5397988527577631}, {
               5600, 0.5397988841277861}, {6400, 0.5397988784513059}, {
               7200, 0.5397988808414028}, {8000, 0.5397988709822529}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.5397970264209933}, {
               1600, 0.5397978581774776}, {2400, 0.5397983896762073}, {
               3200, 0.5397986612511925}, {4000, 0.5397987840424666}, {
               4800, 0.5397988527577631}, {5600, 0.5397988841277861}, {
               6400, 0.5397988784513059}, {7200, 0.5397988808414028}, {
               8000, 0.5397988709822529}}]}}}, ImageSize -> {471, 201}, Frame -> 
          True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-0.3999999999999999, 
            0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.5228787452803375, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.30102999566398114`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.1549019599857432, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {-0.04575749056067506, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.47712125471966244`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.6989700043360187, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.8450980400142567, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}, {0.9542425094393249, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 1.}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
lN13Br7U+1+6U5u0
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.96875}, {1600, 0.96875}, {2400, 0.96875}, {
               3200, 0.96875}, {4000, 0.96875}, {4800, 0.96875}, {
               5600, 0.96875}, {6400, 0.96875}, {7200, 0.96875}, {
               8000, 0.96875}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.96875}, {1600, 0.96875}, {2400, 0.96875}, {
               3200, 0.96875}, {4000, 0.96875}, {4800, 0.96875}, {
               5600, 0.96875}, {6400, 0.96875}, {7200, 0.96875}, {
               8000, 0.96875}}]}}}, ImageSize -> {471, 201}, Frame -> True, 
          Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 1.}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.96875`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.740218693049512*^9, 3.740218731401306*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"e4fd866f-0974-4c5b-bb32-705d8a76af05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net5", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedvgg19Netv2.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740218521659162*^9, 3.7402185712982197`*^9}, 
   3.7402187099028873`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"8feaa760-3f78-4a8b-a495-b38f050750e6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {224, 224}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{25088}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 25088}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}, "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "38", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740218710580456*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"bbac3f4e-8c15-4e8e-b89c-e917f0b3deba"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata6", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedimageidentifyNet.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.740219051191031*^9, 3.7402190747238483`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"beff436a-4888-4f47-b894-a7755cacf193"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata6", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.74021908255952*^9, 3.740219083026929*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"3b90c8a1-1d14-4439-b4f3-2ee7c603c249"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6500000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJw11QtUzdkeB/AUSZJHrsFEaYomjRTC3PBFV89BzFCEdM1II9E0ecWkpx5M
73c5J6f363TqPDrndA6VSqXkUUpIM7VCDVFN4bp37t2/21qt1mf99t7f32//
114tcffe9b2qiorK079+//uX/VggQqxma9XZs4nZAXMOPfKq5z9lDtiDyNkH
uRG53eRD0BhaNCTc1cWMI7DvL544+/oR8w0PrD2xof9tWAfVvcAxmCGc/OEh
c89J3HXUSsD1B8z6P+HwjJb9cgey2894+Xmoy7bN95k5p1GyNna0UHGP9p+F
24zlr5fVt9F+f6xO/9tEZBPZ7SJ6Zcm5v9y/y7wzADHP9j3VsG9lPnkJ/v38
K2PB5OhATItxqtObSev5Qbj/WHNopsod5rvBqPMuvBDh28L8JgTDqofOWZc3
Ms8KQ0Jt01X/ttvMKy9jjf62zVNqyTvDUZYrn5bqUk/5EXjSKwm9wK2j/EhY
+JzRT8ymOj8K9/o9Gu0O3aL8K7BVO/K7yXzym6vIcP+z2HQH7deIhnvzpsHd
NbXMydFIilkd2tpZzWwcA5tu2YXk5TXMkhgEhHBUO/2obhuLy57d6Hag+qNY
VEUlwOqrm8wecYiKXVFfvojq43HIyNvNvTWV9l+Oh89s9TkNl5TM8xMg/G56
2po/bjDnJWD/0S8nfv2G9q9LhNHhWQvvbpIzNySi/ReN1NGNlOecBKu6q32Z
NlQfSMKirf671xiSzyRjkv3saJ1qKc2fghmZGf55nhU0fwq2dmc0B5oLaf5U
LLAxmZj6SUzzp6Im4rpz0vlymj8NygSnjRFGIpo/DQk1vpMdnCQ0fzpuSqbt
uNcpoPnTMfrEvmaVURnNn4GjWvc7fBfwaf5MjO/gyhITqZ6XiY2mnuvCoitp
/msIdHG2bi4sofmv4Z/rCj3SP9J+Uw5c/EuT+A7Uny8Hy1OyNv7wjOpyDqzH
Xnyxe0ER82QuTgTHWQ9NUH+OXGyvb11h1p/NHM+FrXb4a48rdD/dXCxdXZX0
7DDlG2bhmdHqT3FutP54Fkpc9bQ+VxYzV2RhXFp/f96PV5k/ZmHmay/XmWk8
Zuvr+M2g45x9RxRz1HUsUmi3mtiTH1xH3XmbW86F15h1eUitzW2pXJrMfISH
CeFpyQJLqhfx8LzxXYLerBTmER62xHVd21gazmyVDTsbYVuSlydzcDY8zwUt
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
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.1659061437718818}, {
               1600, 0.09456300582145419}, {2400, 0.05854645887812344}, {
               3200, 0.029944465654572063`}, {4000, 0.023361852961604677`}, {
               4800, 0.009137657831995008}, {5600, -0.0014065063044830177`}, {
               6400, 0.003421186017986299}, {7200, 0.009281430414486518}, {
               8000, -0.00131380403790824}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.1659061437718818}, {
               1600, 0.09456300582145419}, {2400, 0.05854645887812344}, {
               3200, 0.029944465654572063`}, {4000, 0.023361852961604677`}, {
               4800, 0.009137657831995008}, {5600, -0.0014065063044830177`}, {
               6400, 0.003421186017986299}, {7200, 0.009281430414486518}, {
               8000, -0.00131380403790824}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-0.3999999999999999, 
            0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.5228787452803375, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.30102999566398114`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.1549019599857432, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {-0.04575749056067506, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.47712125471966244`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.6989700043360187, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.8450980400142567, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}, {0.9542425094393249, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.9999147679191346}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.9999147679191346}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
DylDy56oFbbW1D+nDIw7HVEOQ2tW/Q8Yvrj6
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.403125}, {1600, 0.3490625}, {2400, 0.3209375}, {
               3200, 0.3125}, {4000, 0.30843750000000003`}, {
               4800, 0.3015625}, {5600, 0.29812500000000003`}, {
               6400, 0.2990625}, {7200, 0.30625}, {8000, 0.295625}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.403125}, {1600, 0.3490625}, {
               2400, 0.3209375}, {3200, 0.3125}, {
               4000, 0.30843750000000003`}, {4800, 0.3015625}, {
               5600, 0.29812500000000003`}, {6400, 0.2990625}, {
               7200, 0.30625}, {8000, 0.295625}}]}}}, ImageSize -> {471, 201},
           Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.9999147679191346}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.295625`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.740219083879233*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"1039dfad-7224-4606-9cd1-8168687b6be9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net6", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedimageidentifyNet.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7402190912132463`*^9, 3.74021910541308*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"00e2cc41-fe65-4ec0-879c-478feeaded4b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "auglayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {224, 224}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    7, 7}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "bn_1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool_1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {55, 55}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2_red" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     1, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2_red" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2_red" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]]], "conv_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {55, 55}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "bn_2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "relu_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 55, 55}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]]], "pool_2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {55, 55}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 55, 55}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 192, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "3c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 320, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 320, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {27, 27}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 27, 27}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 320, 
                    "$InputSize" -> {27, 27}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 27, 27}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{320, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{224, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 96, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4c" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 576, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 576, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 576, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{576, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4d" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{96}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0000100001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{96, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "4e" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 608, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 608, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 608, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{608, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{608, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5a" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{352, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    160, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 160, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 224, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "avg_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1056, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 1056, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1056, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1056, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "5b" -> Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "conv1x1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{352, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 352, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn1x1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{352}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    352, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu1x1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {352, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "conv3x3" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn3x3" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    320, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "relu3x3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_reduce" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_reduce" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    192, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_reduce" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_0" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 192, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_0" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_0" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "convdouble_3x3_1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{224, 224, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 224, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 224, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "bndouble_3x3_1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{224}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    224, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "reludouble_3x3_1" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {224, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT]]], "max_poolpool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]], "convproj" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {7, 7}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "bnproj" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0000100001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "reluproj" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]]], "ch_concatchconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{352, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{224, 7, 7}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bndouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "convproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bnproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1x1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3x3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reludouble_3x3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "reluproj", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1x1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "convdouble_3x3_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_poolpool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concatchconcat", "Outputs", "Output"]}], 
                    "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2_red", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4e", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4e", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 1024}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 1024, "$InputDimensions" -> {1024, 1, 1}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "auglayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "auglayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.48, 0.46, 0.4}, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"auglayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "auglayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "22", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1024\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740219106088058*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"ba992e99-c4fb-403b-8503-dcb9a2310517"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata7", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedademNet.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740231538940825*^9, 3.740231560035427*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"96b3fc80-a203-46e4-8984-c277e9692d80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata7", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740231569556181*^9, 3.740231569622942*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"4e1f82da-f41e-4018-b774-e928bdfa650c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6500000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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

              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.29501250868388057`}, {
               1600, 0.24033280521594685`}, {2400, 0.2158358261491193}, {
               3200, 0.2105900287000252}, {4000, 0.1833821779902808}, {
               4800, 0.18096565663193165`}, {5600, 0.17346398832926913`}, {
               6400, 0.15694074272754505`}, {7200, 0.16755270489453128`}, {
               8000, 0.16259558190170925`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.29501250868388057`}, {
               1600, 0.24033280521594685`}, {2400, 0.2158358261491193}, {
               3200, 0.2105900287000252}, {4000, 0.1833821779902808}, {
               4800, 0.18096565663193165`}, {5600, 0.17346398832926913`}, {
               6400, 0.15694074272754505`}, {7200, 0.16755270489453128`}, {
               8000, 0.16259558190170925`}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-0.3999999999999999, 
            0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.5228787452803375, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.30102999566398114`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.1549019599857432, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {-0.04575749056067506, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.47712125471966244`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.6989700043360187, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.8450980400142567, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}, {0.9542425094393249, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 1.}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
di2iBof1Wz48svoXiG6x1w==
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.5496875}, {1600, 0.49375}, {2400, 0.4721875}, {
               3200, 0.4584375}, {4000, 0.43343750000000003`}, {
               4800, 0.42625}, {5600, 0.4275}, {6400, 0.4078125}, {
               7200, 0.41625}, {8000, 0.4034375}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.5496875}, {1600, 0.49375}, {2400, 0.4721875}, {
               3200, 0.4584375}, {4000, 0.43343750000000003`}, {
               4800, 0.42625}, {5600, 0.4275}, {6400, 0.4078125}, {
               7200, 0.41625}, {8000, 0.4034375}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 1.}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   "0.4034375`"}], "}"}]], "Output",
 CellChangeTimes->{3.740231570174535*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"65a5c442-a74f-4790-b605-23dae0391368"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net7", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedademNet.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740231586294536*^9, 3.7402315914714613`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"4b9bb93d-cd2c-4934-bbba-029919a78c38"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {320, 320}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {320, 320}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1a" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {320, 320}, "$OutputSize" -> {320, 320}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 320, 320}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {320, 320}, "$OutputSize" -> {160, 160}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.00001001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus2a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus2a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2a", "Outputs", "Output"]}], "2b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b1", "Outputs", "Output"]}], "2b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn2b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "bn2b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 160, 160}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "res2b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {160, 160}, 
                    "$OutputSize" -> {160, 160}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]], "_plus2b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus2b2", "Outputs", "Output"]}], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {160, 160}, "$OutputSize" -> {80, 80}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 160, 160}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    128, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus3a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus3a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3a", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b1", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 80, 80}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {80, 80}, 
                    "$OutputSize" -> {80, 80}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]], "_plus3b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus3b2", "Outputs", "Output"]}], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {80, 80}, "$OutputSize" -> {40, 40}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 80, 80}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    256, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus4a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus4a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4a", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b1", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b2", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b3" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b3", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b4" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b4", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 40, 40}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {40, 40}, 
                    "$OutputSize" -> {40, 40}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]], "_plus4b5" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus4b5", "Outputs", "Output"]}], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {20, 20}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus5a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus5a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5a", "Outputs", "Output"]}], "5b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5b1_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b1_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5b1" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b1_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b1", "Outputs", "Output"]}], "5b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn5b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "bn5b2_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 20, 20}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]]], "res5b2_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {20, 20}, 
                    "$OutputSize" -> {20, 20}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]], "_plus5b2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b2_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus5b2", "Outputs", "Output"]}], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 1024, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {10, 10}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "6a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn6a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    512, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn6a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res6a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "_plus6a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus6a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus6a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res6a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn6a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus6a", "Outputs", "Output"]}], "7a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "bn7a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "bn7a_branch2b2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 10, 10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]]], "res7a_branch2b2" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 4096, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {10, 10}, 
                    "$OutputSize" -> {10, 10}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "_plus7a" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus]], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus7a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "_plus7a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res7a_branch2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "_plus7a", "Outputs", "Output"]}], "bn7" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{4096}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.00001001, "Channels" -> 
                    4096, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "relu7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]]], "pool7" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{4096, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 4096}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {320, 320}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.485, 0.456, 0.406}, 
                    "VarianceImage" -> {0.0524, 0.0502, 0.0506}], 
                    
                    NeuralNetworks`TensorT[{3, 320, 320}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"320\"", "\"320\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"320\"", "\"320\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "26", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4096\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740231593143502*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"65080d7b-771b-4d6a-8a79-95401a974b8d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata8", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedresNet.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7402362634530973`*^9, 3.740236290976996*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"92c83ef8-8be4-42a7-9bb2-5df167ee15cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata8", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740236299021008*^9, 3.740236299648715*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"e4520a52-f29c-4f75-9316-f2b784d5175b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6500000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
b7+meLGK5v1RAtdsUfGmZrrvAxKkTO596zuR+l+UwLM+kqu4TP0FEiSOuhrG
adH5ex/Ov68s/cWb7n9cglNjz0YdOyl/rhS9znGan76jfVdKYWvtNN6mQfPs
lWJVwmaD0HDyeSlifTasLwqj/Aop1i2+IdQ0of3apWi1+cv2iTF5VAqFi65q
jy31M5Dh9sOWkE/bKL5chiU3941tHb5L378M4taO3t9cKB4hw8cfeQRoWZNL
ZLBwP2y9Zh7N0yLDyXQuv9esg75/Gey/TBR161O+rhynZhlvac6jfBs5vqyr
/FWyleI75VAfberWD6R9QuWIuerj+cV0ur8COUK7LB1e/fueTXK074ybaKWi
/5eXcqzyGHg+rkXz61TjR7/e68cLKd+qGr287k/LDcnbqlHy3c072hyaJ6Qa
Fq/WGWkepvlzq+HxG1cobqD7aqjG4+Nm9a0W5N+rsbJv7ezjJVRPWwGbtUM9
RxaSv1WAv1R2Z8JumsdZgdPhsepjAZ30/SvQLlblX3GneKYCB39zfJcwhVyn
QPCVIwX2F8n9CtSvzuxrP0HzTVHi3q93vrieSvMvUmJBQs3d0r8p7qjE84vL
54r+rReghKEGT7w0nvLTlHDs+uh8qhvto1Ii8l7d154DlP9Uiew/h+eVjtP9
aqiQXuno7Kak/cxUKIl2GPjelPI3qqDkPprHmUT7HVXBHo8cnztTfrIKo898
qz9LpP5yFZyOLVxtrkfz9qrgv7v80bgz1VOvwee8Xdk+Z2g+kxoIhicPcfd2
1PwDtGj7EQ==
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.09896921011019566}, {
               1600, 0.04611109778956146}, {2400, 0.02126043133672133}, {
               3200, 0.025607421945314127`}, {4000, 0.0035289286483922004`}, {
               4800, 0.007874264713591102}, {5600, -0.0013576933543204147`}, {
               6400, 0.006308395891985674}, {7200, 0.015809887780648454`}, {
               8000, -0.004879270830359149}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.09896921011019566}, {
               1600, 0.04611109778956146}, {2400, 0.02126043133672133}, {
               3200, 0.025607421945314127`}, {4000, 0.0035289286483922004`}, {
               4800, 0.007874264713591102}, {5600, -0.0013576933543204147`}, {
               6400, 0.006308395891985674}, {7200, 0.015809887780648454`}, {
               8000, -0.004879270830359149}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-0.4, 0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.5228787452803375, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.30102999566398114`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.1549019599857432, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {-0.04575749056067506, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.47712125471966244`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.6989700043360187, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.8450980400142567, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}, {0.9542425094393249, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.9431690772421406}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.9431690772421406}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
zOb68K9U73sRwpzeHKocT/OqCdHOrV/3Q494vRAqMWbWbNC8h4QQMU2CNjYQ
hwkxykJaGexJ9bN/5VurK9120v3qfuX53s/jXhN/FiLl4okn5pOJZ4oQf6rh
cH0c1TMTodbT4ySm0vxOItzR2pwqv4n4HxEU/+K8mNVF+UwRShYk/tjlSvxQ
hPZ1jwVsNfL/K0LFtNkTI9xpHxUx0terDxR5kG4sRmagp5tnH+UdxLBeesqo
9XfaJ0SMqm712N8aiTlifLNLWV1iS/5qMRJ8IwyTOmn+PjHq9zSVst4RK0vQ
u8zXLbaE+hlJMNXS3F1iQ/m9ElyJuZ7TEUt6kASvNOU/DZvS+6dKsL+p7ktI
NPkrJDiiWLX49CDt81aCeSuG7jXVUL9JxdiSgYY+X9INixF8/oyhqTHptsUY
Hp2VESOk+n8X48MopQ1Pral/YjEqNq7eO5dN/jvFOJzP3LT4G3FXMar573k7
8m/R91+CnmcuUhc70vVLoOMwbyr79W36/kuwv2yjzhhTmv9YCWr3Nuc0+JGf
VYK4YO01y9tILy2B8d6JXxI4NF9HCY60q28Th5DOKMWzJUVmmecor1uK/QYN
fsYJxNal0PGTTrx/kPLepTj3g6eq8JT0+FLsMIhwXH6E9hWXYtGLl3dTzMnf
Uor57svrTBgj3/9NvI6pHK+YSffUvAndV5JaTs2dtf8DAlLCUg==
              
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.3646875}, {1600, 0.321875}, {2400, 0.3053125}, {
               3200, 0.3025}, {4000, 0.2921875}, {
               4800, 0.29031250000000003`}, {5600, 0.2871875}, {
               6400, 0.27718750000000003`}, {7200, 0.2840625}, {
               8000, 0.2728125}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.3646875}, {1600, 0.321875}, {
               2400, 0.3053125}, {3200, 0.3025}, {4000, 0.2921875}, {
               4800, 0.29031250000000003`}, {5600, 0.2871875}, {
               6400, 0.27718750000000003`}, {7200, 0.2840625}, {
               8000, 0.2728125}}]}}}, ImageSize -> {471, 201}, Frame -> True, 
          Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.9431690772421406}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", 
   "0.2728125`"}], "}"}]], "Output",
 CellChangeTimes->{3.74023630036119*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"97271454-7993-4782-a08e-6b5fd222565f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net8", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedresNet.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740236314710516*^9, 3.740236324817707*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"ae51c06d-1152-41da-ad27-88037799d185"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {224, 224}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    7, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "bn_conv1" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool1_pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    "Fixed", "$Rank" -> 3, "$InputSize" -> {64, 112, 112}, 
                    "$OutputSize" -> {64, 113, 113}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 113, 113}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {113, 113}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 113, 113}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "2a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res2a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res2a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res2a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res2b_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res2b", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res2b", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res2c_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.0001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res2c", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res2c", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Outputs", "Output"]}], "3b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b4_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b4_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b4_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b4_relu", "Outputs", "Output"]}], "3b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b5_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b5_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b5_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b5_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b5_relu", "Outputs", "Output"]}], "3b6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b6_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b6_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b6_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b6_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b6_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b6", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b6", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b6_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b6_relu", "Outputs", "Output"]}], "3b7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res3b7_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b7_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b7_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "bn3b7_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "res3b7_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res3b7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res3b7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b7_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res3b7_relu", "Outputs", "Output"]}], "4a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b1_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b1", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b1", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b2_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b2", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b2", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b3_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b3", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b3", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b4_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b4", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b4", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b5_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b5", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b5", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b6_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b6", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b6", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b7_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b7", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b7", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b8_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b8", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b8", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b9_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b9", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b9", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b10_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b10", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b10", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b11_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b11", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b11", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b12_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b12", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b12", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b13_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b13", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b13", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b14_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b14", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b14", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b15_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b15", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b15", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b16_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b16", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b16", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b17_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b17", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b17", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b18_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b18", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b18", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b19_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b19", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b19", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b20_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b20", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b20", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b21_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b21", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b21", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b22_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b22", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b22", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Outputs", "Output"]}], "4b23" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b23_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b23_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b23_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b23_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b23_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b23", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b23", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b23_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b23_relu", "Outputs", "Output"]}], "4b24" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b24_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b24_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b24_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b24_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b24_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b24", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b24", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b24_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b24_relu", "Outputs", "Output"]}], "4b25" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b25_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b25_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b25_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b25_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b25_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b25", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b25", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b25_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b25_relu", "Outputs", "Output"]}], "4b26" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b26_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b26_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b26_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b26_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b26_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b26", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b26", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b26_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b26_relu", "Outputs", "Output"]}], "4b27" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b27_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b27_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b27_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b27_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b27_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b27", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b27", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b27_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b27_relu", "Outputs", "Output"]}], "4b28" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b28_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b28_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b28_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b28_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b28_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b28", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b28", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b28_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b28_relu", "Outputs", "Output"]}], "4b29" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b29_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b29_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b29_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b29_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b29_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b29", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b29", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b29_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b29_relu", "Outputs", "Output"]}], "4b30" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b30_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b30_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b30_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b30_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b30_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b30", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b30", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b30_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b30_relu", "Outputs", "Output"]}], "4b31" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b31_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b31_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b31_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b31_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b31_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b31", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b31", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b31_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b31_relu", "Outputs", "Output"]}], "4b32" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b32_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b32_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b32_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b32_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b32_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b32", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b32", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b32_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b32_relu", "Outputs", "Output"]}], "4b33" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b33_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b33_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b33_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b33_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b33_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b33", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b33", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b33_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b33_relu", "Outputs", "Output"]}], "4b34" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b34_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b34_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b34_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b34_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b34_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b34", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b34", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b34_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b34_relu", "Outputs", "Output"]}], "4b35" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res4b35_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b35_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 256, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b35_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 1024, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "bn4b35_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    1024}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]], "res4b35_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 14, 14}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res4b35", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res4b35", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b35_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res4b35_relu", "Outputs", "Output"]}], "5a" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res5a_branch1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5a_branch1" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1024, 
                    "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1024, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res5a", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res5a", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5a_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5a_relu", "Outputs", "Output"]}], "5b" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res5b_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res5b", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res5b", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5b_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5b_relu", "Outputs", "Output"]}], "5c" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "res5c_branch2a" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2a" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c_branch2a_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c_branch2b" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 512, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2b" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "Interleaving" -> False, "$SpatialDimensions" -> {7, 7}],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c_branch2b_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c_branch2c" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 2048, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 512, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2c" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyRawArray[{
                    2048}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{2048}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    2048, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c" -> 
                    Association["Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["1" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]], "res5c_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2048, 7, 7}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2a_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2a_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2b_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2b_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "res5c", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "res5c", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn5c_branch2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_branch2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "res5c_relu", "Outputs", "Output"]}], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {7, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {7, 7}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn_conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1_pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1_pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "3b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4b35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048, 1, 1}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "56", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740236326089505*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"e488ef83-2dcb-486c-bd87-c579de77859c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata9", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedinceptionNet.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7402447549260683`*^9, 3.7402447696463614`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"e8107915-e916-413e-879c-622acde3cf11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata9", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740244775494932*^9, 3.7402447757097273`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"38de8768-4194-4beb-8511-9fc77ce7d4f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.6500000000000001}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.6500000000000001}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               
               TemplateBox[{"10", "\"0\""}, "Superscript", SyntaxForm -> 
                SuperscriptBox], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
              
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.2504702004441705}, {
               1600, 0.19333812301493897`}, {2400, 0.17094429629354072`}, {
               3200, 0.1534329063717757}, {4000, 0.14954333360592809`}, {
               4800, 0.14015779427054267`}, {5600, 0.1280797612414364}, {
               6400, 0.12727142122712912`}, {7200, 0.12071685843406679`}, {
               8000, 0.11697385988776836`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.2504702004441705}, {
               1600, 0.19333812301493897`}, {2400, 0.17094429629354072`}, {
               3200, 0.1534329063717757}, {4000, 0.14954333360592809`}, {
               4800, 0.14015779427054267`}, {5600, 0.1280797612414364}, {
               6400, 0.12727142122712912`}, {7200, 0.12071685843406679`}, {
               8000, 0.11697385988776836`}}]}}}, ImageSize -> {471, 201}, 
          Frame -> True, Axes -> None, AspectRatio -> Full, 
          BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {-0.3999999999999999, 
            0.6000000000000001}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{-1., 
              GrayLevel[0.3001]}, {0., 
              GrayLevel[0.3001]}, {-0.6989700043360187, 
              GrayLevel[0.8501]}, {-0.5228787452803375, 
              GrayLevel[0.8501]}, {-0.39794000867203755`, 
              GrayLevel[0.8501]}, {-0.30102999566398114`, 
              GrayLevel[0.8501]}, {-0.22184874961635626`, 
              GrayLevel[0.8501]}, {-0.1549019599857432, 
              GrayLevel[0.8501]}, {-0.09691001300805638, 
              GrayLevel[0.8501]}, {-0.04575749056067506, 
              GrayLevel[0.8501]}, {0.30102999566398114`, 
              GrayLevel[0.8501]}, {0.47712125471966244`, 
              GrayLevel[0.8501]}, {0.6020599913279623, 
              GrayLevel[0.8501]}, {0.6989700043360187, 
              GrayLevel[0.8501]}, {0.7781512503836435, 
              GrayLevel[0.8501]}, {0.8450980400142567, 
              GrayLevel[0.8501]}, {0.9030899869919434, 
              GrayLevel[0.8501]}, {0.9542425094393249, 
              GrayLevel[0.8501]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 1.}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 1.}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1:eJw1lAk01Xkbx4XRvjASZWjKkuqthpJpwrfIyGijJIxkJAlxqbSQJSJZbnbp
Zt+6crkXd0O8LZqWydhKtlKSUjJlaNHbe+5zneM4n/N5vs/z/H7/8/Oj62Gb
/bIyMjLd337//1fyo4/e10E+Jy8OmUr4N0Te8WqOm/ZKwiF28A/pWSpn+ZJ4
L8qL45y3eA5IGG64Jerc1hzdL+FrHmCvWsooTX9O3htn7UsuxWwk7vXFAz8b
0Q7vZxJe6I9ro/d+6dlM3uUI5NOPlyR6kM86Bj//wHdtc/oofxw6urqrS+4+
pfwpsCp+2OUfTuwSDA15i+iXXU8kvD0EZ/Md/6jhEvuG4lVS3vSdC6g+IQyi
le2zzoyR54TjkWHk5ceF5B+cgXzvsaz4gV4JD0fg050QH2tF8nPOwiv/n/pf
Yyi/KgppBVMLtP3Ib49Ghm725o85lPc9h4lgh17VF8QJMWCEKyt6GhBzzsPn
iQVv6a0emh8L21S5FZUq1H84Dpruxr52TKqfkgCdNSqL2yYTpyXAOnWNxXAS
5Zcw0WnIdl/pS57PRNcwM8NajtjyArJC7xV723VL+OEFZGjsu3n3BuU9EjHs
e7FBxpR4LBE7vNsf2j3tknBUEpx1Z/WJ9hKrJuP5ttYtUznUrygZ579brJc0
ldgoBa+jZZbqzab5jSlIfVe2n3eKvH0qrB/Ok+n8g+YNpGJ5n/2lzEHqH5gG
zqaff+j7juqnpEP9N0+B375OOn86suMd9TcyiJdk4JRb2Hc2TMrzMzDrv5MW
j2aSt7wI9aD6tEQL6fkvwsiNP6r1huo9MsG9vXfSoBXxWCYU7Jstu14+pvNf
wiTNPLnJCpRXZWGHULM9Yi/1L2LBaJFc7qtDxEaXcdhWfUjJl7jxMmZYfcpx
W0K8PAtRrU1f9WWpf8A3DooUHY95JGFxFup/bGvI3t8hYflspPkprvrrLNVb
Z+Nnu3JH82TipGx0P5rpvmI97d+Zjd6Z7L2xT8hr5cBvsc9pzXCa75WDgeu5
DkOBxLwctC6UzV0zSPM/5yDMuXXb6Ts03zwX0VEmteOq1O98Lj60n1A0OES+
JRdrlFzMWy3Iq+eh3GOmfBST2C0PnGvGN0MsqJ6dh+3rDRhf79O893kYDvze
60M/1a/Ph+3tH1qtZxOfyYelqWbJwoNUfzcfm7w92MZK5JUL8Jn7zGhuKPV3
KoBj+ZEWq/nEeQXgxTATatQfSvh1Ad495kf+kUD9VhdCo/G6C+Mv4lOFaImz
fhHbRHy9EL2DTSdHptB9zSiCYWDD3J/0qP/OIlj2htqbZdI+mUWImsweSRgn
/6wIk1lHx/vrqN/yYiQmF7J2u5MPKEbdBqZM/WPaT1yMsbCGttG3VC9fgrHb
zvmPJ8hbl+ADqzgSWZRPKoFTemGG3Veq7yyBR0CVWfd8Yq0r2JHeYzZwlPJe
V5A7PaJpjjbty7sCmRdHLu3xlX7/KxiJHWTl1FO9ORtOm48sO7iB/Hk2NoQ+
mPM6gLiFDd3A+WfeyhCrlyL2cFr7FBbl3UqRvO/nk/9sJM8uRUGIss5dWfLv
S3Hpzc6A0EQ6z/qrCAzaxBu8SPVnruKSqvKYmZr0+18Flplu0eERK5fhdrj7
I78WYqcyTJ4UVu051k7fvwweW4WJ9T7S718GfVXTdN0vxPM5qLR9EZx7vU3C
JhxkbdstOu5A/Vw5mC38/DHwKdVHcpAw1mMsNiJfwsHuwKG1zOXk73PQmBrD
UDlEfoQD4WUzxqgdeZVy7F8R9NbwT9pvXTl8Vyqqzd1P7FyOPmPbJ6mFVB9W
jl/Fugfa/0O+oBz5n5rn5S8n/rMcNWvNZTT7id+Uo3Rj/UrHTcRKFXAwy0zl
1dA+hhXYoPXL42k88g4VSBxamfavD/ngCmyecNXmZ9H8nAqwFopyRlvJ36zA
xIC5FvsD5QcrMIx51QqddH+zuNBTNDKOc6K8Phd9UeO2elvI23FhNaXu4MJh
8ie+1d/2FYdzqB+Li9W6iTtt7IkbuGi6JXvK+wRxPxdphfGZ7umUn8bDtYaQ
8tdDxCt4MGXOPJRYQPNsePB8qx977Czlj/Jwrq5tetev5DN4CL7/cox1lLiW
h0VDzXs5fsRPeRB4rVipH055hUo8UXZp8PtKfmklEgxi3Jz6yG+txI4Tp2+o
Su+XUQkVZ9tdfVHEKZX46nXnmLP0/5GwElGMi5l71hF3V0IwMCFYsJn6y1ZB
bWD6ovhVlNepguLh+1M/NZK3qkJB5mq1+IhWCftUgamWJE6KoPoLVVDxeaht
m0L9q6pwQ0XuGkvqO6pg8YyDmgnKT1ThnYmN43Mh+UXVEER4/aahQ3mLauzi
mrAL5tJ8z2ocNlFlh7CJ46qR5Tn/whnp/VZUQ4at4xA+StxWjWYbC1drY5r3
sRpldsO7Z9i1SFiDj5wr4nnanTR/Ix+1/p4Lt80kdudDLmlxB7OX+BwfTSmJ
Bx5Mpf2u8tHeda/os5j833wc1xVmtymRH+WDa7h/a4wM7TNfgIONPb5TR2gf
EwH6qiYPLV5A3lWAuQZHzDWMiSMFGG7ZYpBeT1wiwPf5KWv/3kXz7gvQksw4
IlIjHhGgd5mV4lVbqlcRwsU/MnptBvE6IZqW31bItZK+fyHULq8ZDz5F+4QJ
0WNiYWPwSPr+v/HHvnUHdCn/pxApafbyCgKqfyNE69w8o9BYuk8lEeoL+MUz
isgbiqCd/O+XmN8p7yDCbEZd9+9h5INFiAiIiJAPIp8jgqpTh3/QWuKbIrx+
cHQO92/iQRG+LBgZVO6Qvn8xTi4Je/hmDu2rL0a8L0vPdyvtYyeGj6gxNd6F
+IQYoR+/BGhqSd+/GDd/svwp5Q7t0yCG3gw1oxQD6t8vxmpVNXeto+Sn1eBV
2cZkTQb5FTXgMzlWL2TJ29SgytZcqWNc+v5r0NaJzuebiTNqYDaaL2/oSlxb
A1HLBZarBuWf1uD366VZ7HPUX6EWsYz3v9yPbqb3X4u8bS9udHjTebbWYueG
NTMmLaN6Ri2iK++dq1Snfim1uHXhxIGu9+SFtbCPsx2PTiTfXQvtN6lR67nS
91+HIpn+Asev5HXqMH73yR7Pfa2m/wNlrL0n
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.4971875}, {1600, 0.4471875}, {
               2400, 0.4246875}, {3200, 0.4096875}, {4000, 0.40875}, {
               4800, 0.3965625}, {5600, 0.38656250000000003`}, {
               6400, 0.388125}, {7200, 0.39125}, {8000, 0.384375}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.4971875}, {1600, 0.4471875}, {
               2400, 0.4246875}, {3200, 0.4096875}, {4000, 0.40875}, {
               4800, 0.3965625}, {5600, 0.38656250000000003`}, {
               6400, 0.388125}, {7200, 0.39125}, {8000, 0.384375}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 1.}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.384375`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.740244776083934*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"980f7234-2fcd-40d4-ab50-0101cfd42ae7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net9", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedinceptionNet.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740244787930048*^9, 3.7402447933820877`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"64382aad-b9b7-41f1-8838-009707833196"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {299, 299}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {299, 299}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{32, 3, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{32, 32,
                     3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 32,
                     3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "$GroupNumber" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{80, 64,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{80}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{80}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{192, 
                    80, 3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "$GroupNumber" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 192, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 32, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{32}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 32, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 256, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 48, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{48}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 48, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 5, 5}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {5, 5}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {2, 2}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 288, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 288, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 64, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 288, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 64, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {35, 35}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{96, 96, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 96, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 96, 
                    "$GroupNumber" -> 1, "$InputSize" -> {35, 35}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{96}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Channels" -> 96, "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 128, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 128, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 128, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{160, 160, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 160, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{160}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 160, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 160, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 768, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 768, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 1, 7}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 7}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 3}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 7, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {7, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {3, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {17, 17}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 192, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 192, 
                    "$GroupNumber" -> 1, "$InputSize" -> {17, 17}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{448, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 1280, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 1280, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{320, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 320, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{320}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{448, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 448, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{448}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 448, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 448, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 1, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {1, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 1}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{384, 384, 3, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 384, 
                    "KernelSize" -> {3, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 384, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{384}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association["Type" -> "Pooling", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {1, 1}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{192, 2048, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputChannels" -> 192, 
                    "KernelSize" -> {1, 1}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Dilation" -> {1, 1}, 
                    "Dimensionality" -> 2, "$InputChannels" -> 2048, 
                    "$GroupNumber" -> 1, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {8, 8}, "Interleaving" -> False], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Gamma" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "Beta" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{192}]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association["Type" -> "Catenate", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> 1], 
                    "Inputs" -> Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 2048}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "30", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740244794284132*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"ad6cf63d-8e82-4bd3-8605-ff77ff397a13"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netdata10", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<trainedvgg19Net.mx\>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7402448221212893`*^9, 3.7402448349807043`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"2b2d9949-6d49-4f2f-b6d3-8e756612df7f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netdata10", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<EvolutionPlots\>\"", ",", "\"\<FinalValidationErrorRate\>\""}], "}"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.740244845394856*^9, 3.7402448457033377`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"05ac1127-b43e-4bd2-9bef-3137e0c98cfd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{TagBox[
      GridBox[{{
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 42.}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 42.}], {1., 1.}]}, {
             InsetBox[
              FormBox[
               TagBox[
                InterpretationBox["\"0.\"", 0., AutoDelete -> True], 
                ScientificForm], TraditionalForm], 
              Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               TagBox[
                InterpretationBox[
                 RowBox[{"\"2.\"", "\[Times]", 
                   SuperscriptBox["10", "\"1\""]}], 20., AutoDelete -> True], 
                ScientificForm], TraditionalForm], 
              Offset[{3, 0}, {0, 20.}], {-1, -1.}], 
             InsetBox[
              FormBox[
               TagBox[
                InterpretationBox[
                 RowBox[{"\"4.\"", "\[Times]", 
                   SuperscriptBox["10", "\"1\""]}], 40., AutoDelete -> True], 
                ScientificForm], TraditionalForm], 
              Offset[{3, 0}, {0, 40.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
H7LZLaI=
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 51.45080858230592}, {1600, 60.93580926895142}, {
               2400, 63.020356941223156`}, {3200, 72.83273250579836}, {
               4000, 77.23382587432863}, {4800, 87.25384475708007}, {
               5600, 92.54465755462648}, {6400, 94.79962108612058}, {
               7200, 102.96944948196409`}, {8000, 108.38698661804199`}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 51.45080858230592}, {1600, 60.93580926895142}, {
               2400, 63.020356941223156`}, {3200, 72.83273250579836}, {
               4000, 77.23382587432863}, {4800, 87.25384475708007}, {
               5600, 92.54465755462648}, {6400, 94.79962108612058}, {
               7200, 102.96944948196409`}, {8000, 108.38698661804199`}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0., 40.}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0., 
              GrayLevel[0.8501]}, {5., 
              GrayLevel[0.8501]}, {10., 
              GrayLevel[0.8501]}, {15., 
              GrayLevel[0.8501]}, {20., 
              GrayLevel[0.8501]}, {20., 
              GrayLevel[0.8501]}, {25., 
              GrayLevel[0.8501]}, {30., 
              GrayLevel[0.8501]}, {35., 
              GrayLevel[0.8501]}, {40., 
              GrayLevel[0.8501]}, {0., 
              GrayLevel[0.3001]}, {20., 
              GrayLevel[0.3001]}, {40., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {0, 
            Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"loss\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}, {
         GraphicsBox[{
           AbsoluteThickness[1.25], {{
             InsetBox[
              FormBox["1", TraditionalForm], 
              Offset[{-2, 0}, {800, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["2", TraditionalForm], 
              Offset[{-2, 0}, {1600, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["3", TraditionalForm], 
              Offset[{-2, 0}, {2400, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["4", TraditionalForm], 
              Offset[{-2, 0}, {3200, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["5", TraditionalForm], 
              Offset[{-2, 0}, {4000, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["6", TraditionalForm], 
              Offset[{-2, 0}, {4800, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["7", TraditionalForm], 
              Offset[{-2, 0}, {5600, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["8", TraditionalForm], 
              Offset[{-2, 0}, {6400, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["9", TraditionalForm], 
              Offset[{-2, 0}, {7200, 0.9480692473314248}], {1., 1.}], 
             InsetBox[
              FormBox["10", TraditionalForm], 
              Offset[{-2, 0}, {8000, 0.9480692473314248}], {1., 1.}]}, {
             InsetBox[
              FormBox["\"20%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.2}], {-1, -1.}], 
             InsetBox[
              FormBox["\"40%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.4}], {-1, -1.}], 
             InsetBox[
              FormBox["\"60%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.6}], {-1, -1.}], 
             InsetBox[
              FormBox["\"80%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 0.8}], {-1, -1.}], 
             InsetBox[
              FormBox["\"100%\"", TraditionalForm], 
              Offset[{4, -1}, {0, 1.}], {-1, -1.}]}}, {{
             Hue[0.083, 1., 1.], 
             LineBox[CompressedData["
1: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
2nLT/wHcy7W+
              "]]}, {}}, {{
             Hue[0.59, 0.5, 0.9], 
             
             LineBox[{{800, 0.5753125}, {1600, 0.55375}, {2400, 0.5021875}, {
               3200, 0.5178125}, {4000, 0.496875}, {4800, 0.4903125}, {
               5600, 0.4809375}, {6400, 0.4709375}, {
               7200, 0.47781250000000003`}, {8000, 0.469375}}]}, {
             AbsolutePointSize[3.5], 
             Hue[0.59, 0.5, 0.76], 
             
             PointBox[{{800, 0.5753125}, {1600, 0.55375}, {2400, 0.5021875}, {
               3200, 0.5178125}, {4000, 0.496875}, {4800, 0.4903125}, {
               5600, 0.4809375}, {6400, 0.4709375}, {
               7200, 0.47781250000000003`}, {8000, 0.469375}}]}}}, 
          ImageSize -> {471, 201}, Frame -> True, Axes -> None, AspectRatio -> 
          Full, BaseStyle -> {
           FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
            GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
           PlotRange -> {{0, 7992}, {0, 0.9480692473314248}}, 
          GridLines -> {{800, 1600, 2400, 3200, 4000, 4800, 5600, 6400, 7200, 
            8000}, {{0.05, 
              GrayLevel[0.8501]}, {0.1, 
              GrayLevel[0.8501]}, {0.15, 
              GrayLevel[0.8501]}, {0.25, 
              GrayLevel[0.8501]}, {0.3, 
              GrayLevel[0.8501]}, {0.35000000000000003`, 
              GrayLevel[0.8501]}, {0.45, 
              GrayLevel[0.8501]}, {0.5, 
              GrayLevel[0.8501]}, {0.55, 
              GrayLevel[0.8501]}, {0.65, 
              GrayLevel[0.8501]}, {0.7000000000000001, 
              GrayLevel[0.8501]}, {0.75, 
              GrayLevel[0.8501]}, {0.85, 
              GrayLevel[0.8501]}, {0.9, 
              GrayLevel[0.8501]}, {0.9500000000000001, 
              GrayLevel[0.8501]}, {0.2, 
              GrayLevel[0.3001]}, {0.4, 
              GrayLevel[0.3001]}, {0.6, 
              GrayLevel[0.3001]}, {0.8, 
              GrayLevel[0.3001]}, {1., 
              GrayLevel[0.3001]}}}, PlotRangePadding -> {{0, 0}, {
             Scaled[0.01], 0}}, PlotRangeClipping -> True, Background -> 
          GrayLevel[1], FrameStyle -> GrayLevel[0.5], {}, FrameLabel -> {{
             FormBox["\"error rate\"", TraditionalForm], None}, {None, 
             FormBox["\"rounds\"", TraditionalForm]}}, 
          ImagePadding -> {{20, 1}, {1, 20}}, FrameTicks -> None]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
       "Column", 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
     FormBox[
      TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.5, 0.9]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxDividers -> {
                   "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
             "Grid"], Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), 
       InterpretationFunction :> (RowBox[{"LineLegend", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.59, 0.5, 0.9], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.59, 0.5, 0.6000000000000001], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.59`", ",", "0.5`", ",", "0.9`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.59, 0.5, 0.9]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.59, 0.5, 0.9], Editable -> False, Selectable -> False],
                 ",", 
                InterpretationBox[
                 ButtonBox[
                  TooltipBox[
                   GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.083, 1., 1.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.083, 1., 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                   StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.083`", ",", "1.`", ",", "1.`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                  BaseStyle -> {}, BaselinePosition -> Baseline, 
                  DefaultBaseStyle -> {}, ButtonFunction :> 
                  With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.083, 1., 1.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                  Automatic, Method -> "Preemptive"], 
                 Hue[0.083, 1., 1.], Editable -> False, Selectable -> 
                 False]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True], 
      TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], ",", "0.469375`"}],
   "}"}]], "Output",
 CellChangeTimes->{3.7402448461636047`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"1fdd2803-40c0-4d80-8956-bc4e8f3bb346"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net10", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     "\"\<trainedvgg19Net.wlnet\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740244866884543*^9, 3.740244873577829*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"d929678f-9c9a-430d-acbe-a299997b26c7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "augLayer" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {224, 224}, 
                    "ReflectionProbabilities" -> {0.5, 0.5}, "$Channels" -> 3,
                     "$InputDimensions" -> {224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "pretrainednet" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 3, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{64, 64,
                     3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    64, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{128, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    128, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{256, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {28, 28}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    256, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "conv4_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {28, 28}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "relu4_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]]], "pool4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "conv5_4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyRawArray[{512, 
                    512, 3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {14, 14}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "relu5_4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]]], "pool5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 512, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {7, 7}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{25088}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv4_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu4_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv5_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu5_4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]]], 
                    "linear" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{32, 25088}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{32}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "augLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainednet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linear", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}, "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {
                    "MIDImale", "MIDIfemale", "RJ45male", "RJ45female", 
                    "TOSLINKmale", "TOSLINKfemale", "compositevideomalecable",
                     "compositevideoport", "componentvideocable", 
                    "componentvideoport", "VGAcable", "VGAport", "dvicable", 
                    "dviport", "minidisplayportcable", "minidisplayportport", 
                    "HDMIcable", "HDMIport", "DisplayPortcable", 
                    "DisplayPortport", "usbamale", "usbafemale", "usbcmale", 
                    "usbcfemale", "microusbfemale", "microusbmalecable", 
                    "firewire800cable", "firewire800port", "firewire400port", 
                    "firewire400cable", "coaxcable", "coaxport"}, 
                    "InputDepth" -> 1, "Dimensions" -> 32, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"augLayer\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "augLayer"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainednet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "38", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"25088\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pretrainednet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linear\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "linear"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740244875463091*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"713116c2-f945-4d34-a248-00340a66ad0d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net3", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740223678298283*^9, 3.7402236985355864`*^9}, {
   3.740223756263094*^9, 3.740223803404147*^9}, {3.740223834121068*^9, 
   3.740223841936201*^9}, {3.7402242024520817`*^9, 3.7402242597635603`*^9}, {
   3.7402575745236883`*^9, 3.7402576454269657`*^9}, {3.7402576780014067`*^9, 
   3.7402576855249033`*^9}, 3.740258514996182*^9, 3.740258577262171*^9, {
   3.7402661039223146`*^9, 3.740266110775091*^9}, 3.7402661411970863`*^9, 
   3.7402661967764797`*^9, {3.740266716963025*^9, 3.740266720687436*^9}},
 CellLabel->
  "In[261]:=",ExpressionUUID->"025f5246-e073-4e20-a102-9015df5939f4"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net2", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.7402661436935873`*^9, 3.740266143742185*^9}, {
   3.740266199680189*^9, 3.740266202523675*^9}, 3.740266927946074*^9},
 CellLabel->
  "In[267]:=",ExpressionUUID->"0f1f24ec-7fc6-4191-9a69-c29a61d98d89"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net4", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.7402661723388357`*^9}, {
   3.740266207664084*^9, 3.740266211165689*^9}, 3.740266929845916*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"a51796d3-dd11-4400-9683-69ea800bad93"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net1", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.740266179827911*^9}, {
   3.74026622573908*^9, 3.740266228682001*^9}, 3.7402669315596333`*^9},
 CellLabel->
  "In[269]:=",ExpressionUUID->"17aeb919-1ffb-4b10-bcf1-50ca111caa07"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net8", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.740266182361278*^9}, {
   3.74026623306855*^9, 3.7402662363166027`*^9}, 3.740266933256198*^9},
 CellLabel->
  "In[270]:=",ExpressionUUID->"f702e22e-6014-4088-8add-ae74b927103b"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net6", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.740266183929793*^9}, {
   3.740266239406802*^9, 3.740266242112571*^9}, 3.74026693433536*^9},
 CellLabel->
  "In[271]:=",ExpressionUUID->"88b76144-e4c9-4cb6-bc83-62e1ad6c7b37"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net9", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.7402661851003103`*^9}, {
   3.7402662450956497`*^9, 3.740266247385724*^9}, 3.740266936414299*^9},
 CellLabel->
  "In[272]:=",ExpressionUUID->"5120e60a-60f9-44bf-86ae-edd3ea7dd450"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net7", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.740266186249033*^9}, {
   3.74026625094049*^9, 3.740266253474502*^9}, 3.740266937705851*^9},
 CellLabel->
  "In[273]:=",ExpressionUUID->"6c5d4ca8-3dba-4ed9-88e5-dc92eecbdf6d"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", 
   RowBox[{"net10", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.7402661874568977`*^9}, {
   3.740266256232338*^9, 3.740266260032268*^9}, 3.740266939515624*^9},
 CellLabel->
  "In[274]:=",ExpressionUUID->"235f0c31-5cd3-4326-843d-0659e3ce7815"],

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  RowBox[{"CloudExport", "[", " ", 
   RowBox[{"net5", ",", "\"\<MX\>\"", ",", 
    RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.740266132229801*^9, 3.7402661874568977`*^9}, {
   3.740266262861566*^9, 3.74026626569906*^9}, 3.74026694097355*^9},
 CellLabel->
  "In[275]:=",ExpressionUUID->"eec5dc20-dc69-4e14-b577-bf34e0241e90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nets", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<https://wolfr.am/w1c1UK2b\>\"", ",", 
     "\"\<https://wolfr.am/w1cdYBTo\>\"", ",", 
     "\"\<https://wolfr.am/w1ce015I\>\"", ",", 
     "\"\<https://wolfr.am/w1ce1kfz\>\"", ",", 
     "\"\<https://wolfr.am/w1cfx64j\>\"", ",", 
     "\"\<https://wolfr.am/w1cfNQlX\>\"", ",", 
     "\"\<https://wolfr.am/w1cgpcDC\>\"", ",", 
     "\"\<https://wolfr.am/w1cjsozw\>\"", ",", 
     "\"\<https://wolfr.am/w1ck33t9\>\"", ",", 
     "\"\<https://wolfr.am/w1ckD0rh\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740267066759727*^9, 3.7402670739930143`*^9}},
 CellLabel->
  "In[307]:=",ExpressionUUID->"8a3ff557-3838-472d-a386-3b2d6d3f9bd2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"form", "=", 
   RowBox[{"FormPage", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Upload\>\"", "\[Rule]", "\"\<Image\>\""}], ",", 
       RowBox[{"\"\<Network\>\"", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Ademxapp v2\>\"", "\[Rule]", "1"}], ",", 
          RowBox[{"\"\<Inception V3 v2\>\"", "\[Rule]", "2"}], ",", 
          RowBox[{"\"\<ResNet-152 v2\>\"", "\[Rule]", "3"}], ",", 
          RowBox[{"\"\<ImageIdentify v2\>\"", "\[Rule]", "4"}], ",", 
          RowBox[{"\"\<ResNet-152 v1\>\"", "\[Rule]", "5"}], ",", 
          RowBox[{"\"\<ImageIdentify v1\>\"", "\[Rule]", "6"}], ",", 
          RowBox[{"\"\<Inception v1\>\"", "\[Rule]", "7"}], ",", 
          RowBox[{"\"\<Ademxapp v1\>\"", "\[Rule]", "8"}], ",", 
          RowBox[{"\"\<VGG-19 v1\>\"", "\[Rule]", "9"}], ",", 
          RowBox[{"\"\<VGG-19 v2\>\"", "\[Rule]", "10"}]}], "}"}]}]}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nets", "=", " ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<https://wolfr.am/w1c1UK2b\>\"", ",", 
           "\"\<https://wolfr.am/w1cdYBTo\>\"", ",", 
           "\"\<https://wolfr.am/w1ce015I\>\"", ",", 
           "\"\<https://wolfr.am/w1ce1kfz\>\"", ",", 
           "\"\<https://wolfr.am/w1cfx64j\>\"", ",", 
           "\"\<https://wolfr.am/w1cfNQlX\>\"", ",", 
           "\"\<https://wolfr.am/w1cgpcDC\>\"", ",", 
           "\"\<https://wolfr.am/w1cjsozw\>\"", ",", 
           "\"\<https://wolfr.am/w1ck33t9\>\"", ",", 
           "\"\<https://wolfr.am/w1ckD0rh\>\""}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"network", " ", "=", " ", 
         RowBox[{"CloudImport", "[", 
          RowBox[{"nets", "[", 
           RowBox[{"[", "#Network", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", "=", 
         RowBox[{"network", "[", "#Upload", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{"result", ",", "\"\<Title\>\""}], "]"}]}], ")"}], "&"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"AppearanceRules", "\[Rule]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{
        "\"\<Title\>\"", "\[Rule]", "\"\<Identify Plugs and Connectors\>\""}],
         ",", 
        RowBox[{
        "\"\<Description\>\"", "\[Rule]", 
         "\"\<This is an implementation of various Neural Networks which can \
identify Plugs and Connectors\>\""}]}], "|>"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"CloudDeploy", "[", 
  RowBox[{"form", ",", "\"\<PlugID\>\"", ",", 
   RowBox[{"Permissions", "\[Rule]", "\"\<Public\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.740223678298283*^9, 3.7402236985355864`*^9}, {
   3.740223756263094*^9, 3.740223803404147*^9}, {3.740223834121068*^9, 
   3.740223841936201*^9}, {3.7402242024520817`*^9, 3.7402242597635603`*^9}, {
   3.740224434185877*^9, 3.7402245108591433`*^9}, {3.740224549233777*^9, 
   3.740224563247081*^9}, {3.740257654207013*^9, 3.7402576667017*^9}, {
   3.740257718527791*^9, 3.740257869342679*^9}, {3.740258014633423*^9, 
   3.740258082670692*^9}, {3.7402582680028963`*^9, 3.740258310481625*^9}, {
   3.740258399880741*^9, 3.7402584520695753`*^9}, {3.740258583935608*^9, 
   3.740258601405361*^9}, 3.740259600205464*^9, 3.7402637226466923`*^9, {
   3.7402637900503073`*^9, 3.740263792672194*^9}, {3.740266520030301*^9, 
   3.7402665982327213`*^9}, {3.740266811119286*^9, 3.740266826629195*^9}, {
   3.7402669967846746`*^9, 3.740267110050919*^9}, {3.740269063341955*^9, 
   3.740269067475996*^9}, {3.740269169070991*^9, 3.740269184089774*^9}, {
   3.7402692159012938`*^9, 3.7402692770235367`*^9}, {3.7402694182338*^9, 
   3.740269419638599*^9}, {3.7402699797076187`*^9, 3.740269980793845*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"12e3a80d-a5e0-4e05-8670-0ee9fb4568e8"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{Forms`FormPage`PackagePrivate`temp$$ = Association[
   "Upload" -> Association["Interpreter" -> "Image", "Input" -> ""], 
    "Network" -> 
    Association[
     "Interpreter" -> {
       "Ademxapp v2" -> 1, "Inception V3 v2" -> 2, "ResNet-152 v2" -> 3, 
        "ImageIdentify v2" -> 4, "ResNet-152 v1" -> 5, "ImageIdentify v1" -> 
        6, "Inception v1" -> 7, "Ademxapp v1" -> 8, "VGG-19 v1" -> 9, 
        "VGG-19 v2" -> 10}, "Input" -> "Ademxapp v2"]], 
   Forms`FormPage`PackagePrivate`vals$$ = Association[], 
   Forms`FormPage`PackagePrivate`valid$$ = False, 
   Forms`FormPage`PackagePrivate`form2$$ = FormObject[
    Association[
    "Upload" -> Association["Interpreter" -> "Image"], "Network" -> 
     Association[
      "Interpreter" -> {
        "Ademxapp v2" -> 1, "Inception V3 v2" -> 2, "ResNet-152 v2" -> 3, 
         "ImageIdentify v2" -> 4, "ResNet-152 v1" -> 5, "ImageIdentify v1" -> 
         6, "Inception v1" -> 7, "Ademxapp v1" -> 8, "VGG-19 v1" -> 9, 
         "VGG-19 v2" -> 10}]], 
    Association[], AppearanceRules -> 
    Association[
     "Title" -> "Identify Plugs and Connectors", "Description" -> 
      "This is an implementation of various Neural Networks which can \
identify Plugs and Connectors"]], Forms`FormPage`PackagePrivate`valid2$$}, 
   DynamicBox[ToBoxes[
     With[{Forms`FormPage`PackagePrivate`formpane$ = Panel[
         Forms`getFormLayout[
          Forms`PackageScope`bindableForm[
          Forms`FormPage`PackagePrivate`temp$$, 
           Evaluate[Forms`FormPage`PackagePrivate`form2$$], None, None -> 
           Forms`PackageScope`completeAction[
            Forms`FormPage`PackagePrivate`form2$$, 
             Forms`FormPage`PackagePrivate`temp$$, 
             Forms`FormPage`PackagePrivate`vals$$, (
             Unset[Forms`FormPage`PackagePrivate`vals$$]; 
             Forms`FormPage`PackagePrivate`vals$$ = #; 
             Forms`FormPage`PackagePrivate`valid2$$ = Not[
                TrueQ[Forms`PackageScope`$DontComplete]])& , {
             AppearanceRules -> 
              Association[
               "Title" -> "Identify Plugs and Connectors", "Description" -> 
                
                "This is an implementation of various Neural Networks which \
can identify Plugs and Connectors"]}]]]], 
       Forms`FormPage`PackagePrivate`resultpane$ = Framed[
         If[
         Forms`FormPage`PackagePrivate`valid$$ = 
          And[Forms`FormPage`PackagePrivate`vals$$ =!= Association[], 
            FreeQ[
             Values[Forms`FormPage`PackagePrivate`vals$$], 
             Alternatives[
              Blank[Failure], Forms`PackageScope`fieldHidden]], 
            TrueQ[Forms`FormPage`PackagePrivate`valid2$$]], 
          Unset[Forms`FormPage`PackagePrivate`valid2$$]; Style[
            (($CellContext`nets = {
              "https://wolfr.am/w1c1UK2b", "https://wolfr.am/w1cdYBTo", 
               "https://wolfr.am/w1ce015I", "https://wolfr.am/w1ce1kfz", 
               "https://wolfr.am/w1cfx64j", "https://wolfr.am/w1cfNQlX", 
               "https://wolfr.am/w1cgpcDC", "https://wolfr.am/w1cjsozw", 
               "https://wolfr.am/w1ck33t9", 
               "https://wolfr.am/w1ckD0rh"}; $CellContext`network = 
             CloudImport[
               Part[$CellContext`nets, 
                Slot["Network"]]]; $CellContext`result = $CellContext`network[
              
               Slot["Upload"]]; Style[$CellContext`result, "Title"])& )[
            Forms`FormPage`PackagePrivate`vals$$], "Output", "StandardForm"], 
          
          Style["Invalid form", "Message"]], FrameStyle -> Lighter[Gray], 
         Background -> White]}, 
      Panel[
       Column[
        Forms`doLayout[
        Automatic, Forms`FormPage`PackagePrivate`valid$$, {
         Forms`FormPage`PackagePrivate`formpane$, 
          Forms`FormPage`PackagePrivate`resultpane$, 
          Panel[
           Item[
            Row[{
              Spacer[0], 
              DefaultButton[
               Forms`PackageScope`completeAction[
               Forms`FormPage`PackagePrivate`form2$$, 
                Forms`FormPage`PackagePrivate`temp$$, 
                Forms`FormPage`PackagePrivate`vals$$, (
                Unset[Forms`FormPage`PackagePrivate`vals$$]; 
                Forms`FormPage`PackagePrivate`vals$$ = #; 
                Forms`FormPage`PackagePrivate`valid2$$ = Not[
                   TrueQ[Forms`PackageScope`$DontComplete]])& , {
                AppearanceRules -> 
                 Association[
                  "Title" -> "Identify Plugs and Connectors", "Description" -> 
                   "This is an implementation of various Neural Networks \
which can identify Plugs and Connectors"]}]]}], Alignment -> Right]]}]]]], 
     StandardForm],
    ImageSizeCache->{590., {118., 124.}},
    TrackedSymbols:>{Forms`FormPage`PackagePrivate`vals$$}],
   DynamicModuleValues:>{}],
  FormPage[
   FormObject[
    Association[
    "Upload" -> Association["Interpreter" -> "Image"], "Network" -> 
     Association[
      "Interpreter" -> {
        "Ademxapp v2" -> 1, "Inception V3 v2" -> 2, "ResNet-152 v2" -> 3, 
         "ImageIdentify v2" -> 4, "ResNet-152 v1" -> 5, "ImageIdentify v1" -> 
         6, "Inception v1" -> 7, "Ademxapp v1" -> 8, "VGG-19 v1" -> 9, 
         "VGG-19 v2" -> 10}]], 
    Association[], AppearanceRules -> 
    Association[
     "Title" -> "Identify Plugs and Connectors", "Description" -> 
      "This is an implementation of various Neural Networks which can \
identify Plugs and Connectors"]], ($CellContext`nets = {
     "https://wolfr.am/w1c1UK2b", "https://wolfr.am/w1cdYBTo", 
      "https://wolfr.am/w1ce015I", "https://wolfr.am/w1ce1kfz", 
      "https://wolfr.am/w1cfx64j", "https://wolfr.am/w1cfNQlX", 
      "https://wolfr.am/w1cgpcDC", "https://wolfr.am/w1cjsozw", 
      "https://wolfr.am/w1ck33t9", 
      "https://wolfr.am/w1ckD0rh"}; $CellContext`network = CloudImport[
      Part[$CellContext`nets, 
       Slot["Network"]]]; $CellContext`result = $CellContext`network[
      Slot["Upload"]]; Style[$CellContext`result, "Title"])& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74026998457362*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"c75cbdc3-237b-4943-ad56-031b86d99871"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"URLShorten", "@", 
  InterpretationBox[
   RowBox[{"CloudObject", "[", 
    TemplateBox[{
     "\"https://www.wolframcloud.com/objects/rishab/PlugID\"",
      "https://www.wolframcloud.com/objects/rishab/PlugID"},
     "HyperlinkURL"], "]"}],
   CloudObject["https://www.wolframcloud.com/objects/rishab/PlugID"],
   SelectWithContents->True]}]], "Input",
 CellChangeTimes->{{3.740270361256336*^9, 3.7402703655571537`*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"dde6ee62-10b6-491e-94c5-0c203e70178c"],

Cell[BoxData["\<\"https://wolfr.am/w14jKMnl\"\>"], "Output",
 CellChangeTimes->{3.7402703666761913`*^9},
 CellLabel->
  "Out[312]=",ExpressionUUID->"3c95ce91-ce57-4c08-a573-a47971d3af28"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"BarChart", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"53", ",", "4"}], "}"}], ",", "\"\<VGG-19\>\""}], "]"}], 
       ",", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"60", ",", "91"}], "}"}], ",", "\"\<Ademxapp\>\""}], "]"}], 
       ",", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"62", ",", "87"}], "}"}], ",", "\"\<Inception V3\>\""}], 
        "]"}], ",", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"71", ",", "82"}], "}"}], ",", "\"\<ImageIdentify\>\""}], 
        "]"}], ",", 
       RowBox[{"Labeled", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"73", ",", "85"}], "}"}], ",", "\"\<ResNet-152\>\""}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"ChartLabels", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<v1\>\"", ",", "\"\<v2\>\""}], "}"}]}], ",", 
     RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
     RowBox[{
     "PlotLabel", "\[Rule]", 
      "\"\<Accuracy Comparison for Various Neural Network Frameworks\>\""}]}],
     "]"}], ",", 
   RowBox[{"ImageResolution", "\[Rule]", "500"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740252834084228*^9, 3.740252842692182*^9}, {
   3.740252904004943*^9, 3.740252994276629*^9}, {3.7402530862455587`*^9, 
   3.740253087284424*^9}, {3.7402532782023573`*^9, 3.740253446829669*^9}, {
   3.740253485327712*^9, 3.740253541025221*^9}, {3.740253725579187*^9, 
   3.740253736502556*^9}, {3.7402537740313997`*^9, 3.740253777328225*^9}, {
   3.740254158218018*^9, 3.740254158657731*^9}, {3.740256436890937*^9, 
   3.740256462915428*^9}, {3.740256673576475*^9, 3.740256693828781*^9}, 
   3.740257077582458*^9, {3.740257166044178*^9, 3.7402571683014383`*^9}, {
   3.740257331527892*^9, 3.740257342062304*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"c094b5fe-0b1c-4c13-b58c-058d93c280f9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3T/vLcd5IOhrrbCaNWBgHThyMpM400YKJnCygJINtMEs1rFmMBahMWRB
5pgLAgRkEBCYGBcM6YSAk2GogJ/A4n6ADRZQOBFjZ5ve5avfPeDhuedUvd1d
3V1V53mAd0bmvfd0nT7V9a/frv53/+mX/+Fn33v16tX7/+ab/+c//Mf/63/9
u7/7jx/+H//zN//H//m37//8vb/96//8v/3tf/3r9/767/79f/ofvvmP/9//
+OrV//0/vXr1/VcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAwOjevHnzR9/ED77++us/vo74b9/E984uHwD04Js+8fu///3v/yTiqq/8
fvSjZ5cNAAAAAACA7SJH4jZ34k4uhTwKgI7EPfsvv/zyz3/961//l1/84hf/
8rOf/exNJv7mb/7m//nggw/+8dNPP/3LyJM7+3sAfamNC88uH6z1+eef//BX
v/rVf8v2le+///4/qfPnifzE2hz17DLeE+OzEcs9Ev0Uo7v3/NLts0xnlq9S
NnnjTKF0HZ59DV7TXgD3GA9/qzb3OjvOPj8AI9G/AXvJ5FG89957/3p2OQF4
uZ//y1/+8sts/lumff/Nb37zV/KegfDzn//8v5faDPc1GM0nn3zyk7V95Fdf
ffWnZ5f/WdXaoojI7T+7nLcij7JWbu3oNvopRhfzr1o7cdZa/0cfffT3pXLF
n59RLmitdB32tAauvQDuMR5+8dvf/vbftlof3yuijGefJ4BR6N+APcRz9+4H
AfQtctU+/vjjn+49R//www//wZgSnlvsi2XeySxq9bkW6vt5Itet9vvEc11n
l/NWrczxTMPZZRydforRZfqmuA9wRtli7/FSueLPzygXtFa6DuPPzi7fhfZi
fDEuiT2q3VehJePhF/HelL3XyrdGlPHs8wQwCv0bsIfYEyg7dotn3c8uL8Cz
qT1zu0f0uN8KcAzzTmaRfTdqb/cWeRFtTeZ3iue7zi7rRezhWyuv/QG2008x
umyudqzXHV02+S08i5ny4bQX/Xr9+vWPjQHZg/HwC/lwAHPRvwF7yOy7rq0B
ON4XX3zxF2fO12PPFW0+PB/zTmbQog+NfLqzv8ezy7x79Iz7v4/E2KlW3rPL
OAP9FKNbsnfp0e9BlN/Cs5gtH0570ZfYC+72fV9yYmjJePiFfDiAuejfgNZ+
97vf/dnS8dsnn3zyk7PLDTC7eG/p2fP1qzHmD84+H8BxzDuZQYv+75nv4fUi
M1/tZR+/2KdOnTqGforRLclvObqNk9/Cs5gxH057cb4Yg3zwwQf/eO98yImh
JePhF/LhAOaifwNayzxvfxuxn9zZ5QaY2ZL1zqPi6OeMgfOYdzK6VvureqdR
HzL7mf/+97//k7PLGfvU1crpGYM29FOMbul87+OPP/7pUWWT38KzmDEfTntx
rhiPls6HnBhaMh5+IR8OYC76N6ClaDOM4QD6cvs+hWzE+7li/87YRyX2J7ke
F8b/jv8WbXesja49hrEmPAfzTkb30Ucf/X2mX4u9G67zqN72l9+L//bZZ5/9
KPrOM78HLzJ5Zj3cb63l7cVY7ewyzkI/xejWPP90VN6v/Baexaz5cNqL88Sz
NO6ncBTj4Rcj5MN5zg4gT/8GtPTpp5/+5dox3K9+9av/dnb5AWazJk8tcuDi
3v3SY3311Vd/Gm35kmP1tCYM7KfWFq1pc+BImfuG0Q+eXU5yMu8hjTizjFGf
auX7/PPPf3hmGWein2J0a/JbjnoPovwWnsXM+XDai3PU8nLkw9GSfIEXmXy4
eNYtctLOiNi7/ll+C4AW9G9AS6U2JfZK+OUvf/llpc2xXwJAI7U29zYip7nF
ceO54SXrq7HnTovjAv2K+xbRJkXO7G3Efz+7fFBT69cil/zsMrJMZpwUe+Se
Vb4PP/zwH2rlO6tsM9JPMbo1+S0RR7wHUX4Lz2LmfDjtxTnkw3Ek+QIvMvlw
Z5cRgDz9G9DK119//cel9iSeXX/9+vWPz55XAzyDuC+fXdOMfOU9ypB9t9zZ
95sBoKb23krP9Yyn9v6pPcdIGbWyeZ4AuLY2vyVi7/cgym/hWcyeD6e9OJ58
OI4kX+BFJh/uWc4FwAz0b0ArtbyHyJf7pk35QW0sefb3ABhdpq29xN772dTW
Mi9x1Ls3AGCpeE+iPmxOmTHKGeWKd+DUyhXz6zPKBvRpS35L5HzvWTb5LTyL
Z8iH014cSz4cR5Iv8EI+HMBc9G9AK9n7CHG/qPT34jn9E78GwPB+8Ytf/Etm
HTP27DyiPPGeqUx54t7vEeUBgCViXaTUf/V0f5NlMnn7Z4xPau9yVeeAW1vy
WyL2fF+D/BaexTPkw2kvjiUfjiPJF3ghHw5gLvo3oIXa8+vvv//+P13+7m9+
85u/Kv3dWPs/87sAjCzz7q8z1hAzZeppfRgALuTDzSuzp27k9R9cpu/XyvTp
p5/+5ZFlAvq3Nb8lYq/3IMpv4Vk8Sz6c9uI48uE4knyBF/LhAOaifwNaqD2/
/tlnn/3o8ncz9xzi75z5fQBGFe+uqLWxsX/c0eXK5ul59xcAvZEPN7fMPeF4
Z+5R5Yl32bv/AizVIr9lr/cgym/hWTxTPpz24hjy4TiSfIEX8uEA5qJ/A7bK
PL9+e/+g9s7UZ5vbArSQzTmLdvuM8mXe46r9B6A3MZcp9V093d9kuXh2qzY+
OXI/ttpc+YMPPvjHo8oCjKO2xp/Jtd1rPia/hWcxSz6c9qIftXW++POzy8g8
5Au8kA8HMBf9G7BV7f2n9+b7r1+//nFtTHnGd3kkckfinbAff/zxT+P+Q7wz
J/bEi4j8jvi/P/zww3+I+yRn7m00SjlHFusMH3300d9fzmuc0/i/P//88x+2
3Dci3jsQn3nvt4z/HRH/PY4d61Txu/eyr6J6eJ7aXp1nrx1m1hP2bP/jGnlU
Ny/XVPzZ2+u5i+vpVpQr7tvHtX9d/oh4N3mUv8XzwV999dWfRtty7zzFsaMM
PVy/MVeJ7xvfO77/9fm4tDUx5tjrXS5rjNy+H9UHbhXnOOpotHePrvX4s/g7
vdSNSdqnP4o68ug7RF3p7XpcYul8Zy8j15We25Da2OSo3ziuj1pZoo/euwz6
qWONfF2PYsSxwVK1Nf74O5n5YkTrc9BDfku0ATFviHYr5gj35lJRDtdZO0e2
yb30XbPkw8Xf0V700V787ne/+7PS+Yg/3/P4z2r0sdna9le+wItnzod7xr57
C+v03+qp7+Qx/dv4bfozrG1Aj2rv5ov7Xrf/prbHQkS0X2d8n6syfj9y/WrP
59+LOCfR7x/Rhp5dzmhbI8fpemxzyXtqvXdBjOmi37o91uV49+ramrLHMW77
iehnM++hjH+/ZowbY4sof3a9qfSbxnjz6PWQo+vho9/uUheiLHt+39rxzxg/
ZdrVt2O7U+8F1q6jqEMtz19cyzEmzly/9+pm/NvW953jGs22PReRP7r0+orj
LJm3xHVcW3u+d45ijrTnObl3/uM8xTx66W8a3+/o/RF7bd+P7gPjWiq1m1u/
T5Qx5nxrz2+UI+aJR7aRs7RPsY6ypn5HHdw7r2epqAP3xpqZd0rdq9utxgY9
1pWextEtRN2vle+ItcD4rUpliLFA62Pqp17s3U/dGum6HmFuf8+IY4MtMmv8
2Tlj6/cgnpXfEt831hrWvBvycp21vocw6nXWW7/fa981Sz6c9uKc9uLeXKy2
DhR//ugajzLF597mJNxew63WSErzoThOq1yN0pxrS/3ocWwWjmx/984XiLWD
R/3S9e8Y631bjrPVLPlw+u4c6/Trnd136t9y9G/j92/PtrYBvak9o/S2Hbl7
fdXGPWetE0TfteYe+6PYa57eSzlL477W92tqe8Rf5vktyn6933xtD8R7kb1n
En1z5h2SayLGB3vfUzyrHmaOudd3zrwjeq9jl2Te9XX2ekK4vZ4u+YvRn7Rc
S4jPa3ltRZ/U6nrKtj0h5tdbyx7z7VqZavffMxHj/iPOSYs25+0axK5rV723
70f3gbV1orXzsWj71sznSxHz8T3nh7O0T3HNtzj3pTXGo7VoC1vW8Rnqyp7j
6JYy+7Lt/bxFqJWhRY7QhX4qf7y11/A9o17Xvc/tr404Nmghu8afmTdGtFzL
Ojq/JX6r+M1a/f5xzbYaq4x6nfXS7/fed82UDxd/T3txbHux5hnjUlzalNrv
Hb/z1vOYGUtHzsTex1kzfuh5bBaObH/3zBeI9YNsuc5+bm6WfDh9d9vzFJ5l
nb6ml75T/1amf/vWqP3bs65tQG9qfV7kqz76t5k24ug9XjP7AqyN27HTLOU8
cq2nNhdZuiZSKvvlPGTe7bumD40/25LPvSS23EsoObMexrih9hl75QLG+LZ0
3COfwbmWqU9n7blyLfIJ4xzumfvQMkfzNlrkFGbanrD1ebnreNQex+/Rcky9
Nlcgc07iGbrWv+ceawOjtO9H94Gt550xb9trPe32PLQ0cvt03Ye0XPe6RIt1
qq2WPnu75ZqoGbmu7D2O3ktm/409j1/LW2h1XvRT98/lEe/PGPm67n1uH0Yd
G7SypA5n5xmt7kcfmd+Szd9ZEy3KOep1dna/P0PfNWI+XNBeHNderNlfpxSX
Oldbxyzdv8nK3KuOurT1OLHm2rIe9j42C0e2v3uNh5fkCpz9zscwSz6cvrvd
eQrPtE5f0lPfqX97TP82dv/27Gsb0JNoH7ZeT7V/n8mVb/Rdmo4zHsXWOXuP
5Rx1La9W9sidz+T+P4rSey4yuVyto8WY7KKXelgrw157oSX2jtj9XVr3ZM7p
GeU60pZrdmlsWZ/J5Ju0fi444va5mPgOe5ybNXPtWnuc2ZfxyPI+MlL7fnQf
2HLeuWd9uI149nPN+b01U/vUcg1wr/O9Vg/5cDPUlT3H0XvKrLPtmc9fu1fQ
Ymyrn3pcx/bMh5vhuu59bj/i2KC1JXX46PcgHpXfske+futrYdTr7Mx+f5a+
a9R8OO3Fce3FXvlwmWcLt57P7D3brcepnaPs54wyNqt959bt7x7j4cwzP63O
VSvPkA+n786dp2ddp3+kt75T//Yu/dtLjNy/WduAvmT2hq19Rmbf172/x17j
jEexdvzRazlHXcurlT36si3j3Oiv7x3zyPHIbbS4h9ZTPcw8m7H1+96q/X5n
rW9m5pgtnofp2Z7PJi29zmtq8+w9n/24XFN7j6uX5oWWzsnnn3/+w71/yxb7
Oo7Wvh/dB7acdx6Rk30dW/ctm6V9is88Yu3rzOfTzs6Hm6Wu7DWO3lvmfu9e
+y5njr31vOinyudyr3y4Wa7r3uf2o40N9rC0Dh/5HsQj8lv2fn7+zvlc9Y6Z
Ua+zs/r9mfquUfPhgvbimPZir3y4ULtGt+zvl9kzodFxiutY2X0VRhqbhSPb
39bj4SW5Amc9X37PM+TD6btz5+lZ1+nv6bXv1L99S//2uFwj9W/WNqAvtfYj
c68gMzbaMz91yzgjvn+MAda0yUvv8/VczlHX8mpl39LnPHomcu27/uK3i7JG
xP/eUrYte1r0Vg8z5Yk8mrXf955aDu9ZY4dMfnLsH31G2Y6wZF/i22sr6uXa
ulmqnyWt1ziXRswn9x5XL11/2HpO4vvE3DDqeURcq0t/0y3jjRHb96P7wFbz
zjXv6r6c53hWdO36zdpn3mZqn46cj6851y3s+S742lqeuvLtv139AzaQeafE
Hset7U239bzop+rnco98uJmu657n9qONDfaypg4f9R7EvfNb1swloi3Yep2t
yYkb9To7o9+fre8aOR8uaC/2by9az7eur6/aed2yf9CSe8JbjlO7z3/Zx6lk
tLFZOLL9bTkezuSUXX3u99ecm708Qz6cvjt3no6IHtfpW5yjo/pO/dsL/dt3
/+2SY72ta130b9Y2oC+ZPaKy445aGxt/vtf3WNK+R3sS/dK99ivayvizJW30
LOUcdS2vVvZLv7mm73i0z9CScWPsvxLf91E/HP891phinLWknFveP9VjPayt
x7V8T2yolfOsuXBmr82z9lrZ29J5dowJY35w77eK/xZ/tnTcuHS8uGWeHWPi
mGPE9445Yfz/UeaWezbF949rNL7X22N8P9qbaNuWfM6S8f7acxLtUqluR7mX
/J5rx/4jtu+99YGZ9jP7voX4zSMfulQH47deshfYmrWjZ2ufomyRVxpzgDj3
0X7E8eO3qL0H8jbO2q89yht5SXH868jsSXv7b64jPrN03BnrSus25CiZda09
xlS1cfbWd5zop+p1rHU+3GzXda9z+9HGBntaU4cze1NerrctZdszv2XJGCPa
2rfrFHfvrUV9WnIPYs165YjXWa3clzqypH26RKnfn63vGj0fTnvxXXu0F9HX
X88h4vi1Y8Sfx9+7N/+4vj9d6y+31M/MmuQlbt8PuETt96v9+xHHZuHI9rfV
eHhhrsCq/Vb39Az5cK3rTvaY1zFC312LWdfpr/Xed+rf9G+3MWr/Zm0D+lPr
B5asCdWehY/Y+mzZPZn7WpdYcs8j+7nZcVnv5Rx1La9W9lIfHP1pjAki4jze
jg3u7X+a7Sfj2lozn8rsD3aJpZ8deq2HmeceWs2ra7/hmWOGzPh0hHn6Gkuu
4yXPqix5/mfpfZA1bU/mPniMgbfsIx3lyuSyx/5rmc9bsifhmnOyJGciM9a4
nIPsZ16M2r4f2Qdmjpc5N5k1mBV78P5Rdp1q6e/3LO1T/C6ZdY9oo7Lnuqf7
hRd7lvdZ6sqWNuRItTW3Lc+X3JN51mzLngn6qeP6qbXlH+G67nVuP9rYYE9r
6/AR70HcK79lyTuBluzlvqQOLM3jHvE6q5V7jzZ5xr6rp/Gt9mKM9iLEGmvp
M5eswdbKt3b9dOk61Jpj1MqfWZMdcWy2tNyXWNv+thgP1+psizq3t2fJh2tZ
d8KMffejmH2d/mKUvnOvtkb/pn+7tnf/Zm0D+lO7bmp7IFzLPF/WOs/kTfK9
32tzurPtYu2+xgjlHHUtr1b2e1HaqyTOUTzb8Oi3yPRlW/dCeZN8n+nSd4j2
Xg9btkcltfdnZfYt3kutLve07tpSdh68ZZ/A7DtBlly/S9qemEssHT+veXZm
afuZmQ8vaROWtsdr3oWcXZdZOq8YtX0/sg/MHK8258r0RVuen8g8MxXz7Ozn
PUP7tPScXGTX6npaG6/Vvy397LPUla1tyJEyz1m3PF6t/dm637F+6ph+6tqM
13WPc/vRxgZ721KH934P4l75LZkyx3lZO6bIXstLPn+06yxT7j3a5Bn7rp7W
ZbQXY7QXoXYdL1mLrN0PXdOnZa+j61iz13LtPNTKPurYLBzZ/m4dD2fX+GPd
suf77pn1w7PLmKHvzrFO/1imrD30nfq3etn0b333b9Y2oD977MeUGSu1HCNn
rv2t9x0yY5DacwQjlHPUtbxa2e/Uv9V7VWRyPqOvXvv51zL9cjyDs+Qze6+H
tT2WW7xzOTMe2XqMPcu253unz5S5dlvs4ZJ9hiL7eQvbnsV935J9myPWrkVk
+u7sZy05J2ty4S4y52bJ9TJy+35UH5g9Xq2u155J2/ouwUwZl7QnT9I+rd6v
KtN+bLnWW9szH+5J6srpe74tkVn3bLlOVDvW0jztm++in2p0vCVjshmv6x7n
9qONDfa2pQ5n2oqIte9B3CO/JbPX/NZ1ihDjkaPath6vs0y5W7fJs/Zds+TD
aS8ea91ehJb5cLV+c811tWTvoEus2Sev9q6i2jgtU64ex2bhyPZ3S9uQfc/b
1ncqHyGzdhhtRjw7f0SsrZv67hzr9PeN1Hfq38qhf+u/f7O2Af2p5QJHv7v0
MzP7bq7Zz/WR2rFa5Y7UzlVtLWSEco66llcr+3Vsvd+VGdNt+fxbte+19Dz1
Xg9j3+haGde8v/5abfy7ZqzbSiYfbsaxTGZ/oZZ7i7Z8xu2Itif77NmWc5R8
v1tqnSB7TlqMBTLvTs0+zzVy+35UH5g9Xq2u1MYAW56RuqjNb7Pz2mdon7ae
78xa6dJ7RXvaKx/uGerKqM8X1salLdZ9w957D+in2pU9O6aZ9brucW4/0tjg
CFvrcPaez5r+eY/8llo5W/42mfuBLeY9PV5nmXK3bpNn7btmyYcL2ovHWrYX
oWU+XG1Os+Y81N6l0epaKK1x1cblI4/NwpHt79q2IZsrMMrz2kvzl46INftv
6bvbfFaL8zTaOn2ofVZPfaf+bZ86dUv/9ji29m/WNqAvmWfl1z6/flT/mhmb
rdnX9J7kGOTuWHaUco66llcre8vvUBsntM6lqu3huOQ8jVIPY7yx5zm+fQf9
nXKdtu9JJh9u7fskepaZR7Y+Zqt+KtP2bH1nXGYe2aLu1n6H7Fg9c05arpvV
yp3NIR25fT+qD8wer7YmU5vjb9mr7FqtbmTWjmZvn9Y8+3JP7dnCVs8Ot7BX
PtzsdaWn+75L7bEn+j21NdatYzj9VF6rfLhZr+se5/YjjQ2O0KIOZ+5xRCxd
j2+d33LkOsVFrR5kn9sZ7TrLlLt1+Wftu3oaF2kvxmgvQst8uFB75mPpGlGm
DqytYxe19eLavfeRx2bhyPZ3TduQzRXoqQ2s6TQfbvF4U9+dY53+XSP2nfq3
+7HkO2fUjqd/W8faBvQl02+v/ezavqARS+d499TGZq3H5rV29tG7oEYp56hr
ebWyX2LL+4kuasdonUtV229xyXkapR7W9nvakk8bv8+R52BF+Z4uHy6TO9ly
T9GLzDM3mXllpu3ZOqfM7u2/5RihliuabUOPao8vMs+zZz5n5Pb96HO+9Z5L
rZ1vdc1HDlaUNXK1Ytwb/U5c19l5p/Ypr7a+1tOz43vkwz1DXWnZhpyh9v3W
vsfkIjOG29qP6KfyWuQGzHxd9zi3H2VscJQWdTjTLkUsnV+3zm+pfddWe3he
q80fsuOW0a6zTLlbt8mz9l1nrx1d016M0V6E1vlwtbJF35r9rNL7OmI9ufTs
8pJyb7lHPPrYLBzZ/i5tGzLvbOmt/ct4pnw4fbd1+ntG7Dv1b++G/i1/rLP7
N2sb0Jda7uiW9xpl2u8W+1HUjvEo32ate+1YnMcYM0Tb86h/HKWco67l1cp+
iRbljvF+jJljTBZljH0gLsfeYw/SWl+95DodpR5m3ru2dk/ZWh7w1nuhWz1j
Plxm3L3HswytznWt7WnRLmTm2S2u39padXYOeFR7fK1FmzFy+370Od/7falv
P+O0vTovtE95tefseloz3yMfbva6ske7fbTa81pb62iMIUufv/UZ9KCfymuR
GzDzdd3j3H6UscFRWu1xmNkPYun13DK/JfPeimiLsp+3RIv6Ntp1lil36zZ5
1r6rp7Gt9mKM9iK0zoernZMlOQ6lcU/s3VR6xnpJnSjld9Suq9HHZuHI9ndJ
25DNFWgxpznaM+XDtTpns/bdrco/0jr9qH2n/q1Nu1Gjf/s2WvZv1jagHzGe
2bsfzLR/W/JUM+1Y6z4i2qjYDzj6yTh+5vNHKWcYdS2vVvalY6S1zhiTZH+X
kephqO1lt/a9a73vIfuM+XC1Z51izr3XsWvv98tcX7W2p0X5k3vObH7u46h8
uNb76ofaO+q2PnfTc/seju4Dj8iHW1Ln9jJ7+9TyHaZ75JjtZY+yzl5XjhhH
7y3zvNaW9ai1+yK3op9adrzM+Zr5uu5xbj/K2OAorfJbQuv3ILbMb6m9H2uP
e64XtflDpt0e7TrLlHuPNvmRkfuunsa22osx2ovQOh8u1H7/7OeUxj1Rh2Id
59GfZ/fIqz3/XFu3GX1sFo5sfxNtw/fi72XmSUf2Da09Sz6cvvuFdfrvGrnv
1L+1rbeP6N/at5/WNqAftTauxTuNas/IR2y5J17Lme5ljD5KOcOoa3m1sq/5
vF60mg+MVA9DbZ/siKWfWdu7Zs9xZdYz5sPVvu+e72fLjE1rn3FE7lemXmw9
RjgqHy7mIi3Ke632LHuLPWlbO3K9p3W70eKeS61OXyLWBOKZ1DP2+p69fWq5
J+qz58PNXldmGXvUvmfsI7zmcyOP7oh++mj6qXmv617n9rXvfIkzxwZHaZnf
kplLLGmrWua31D5rzzl6be/4zH4QI15ntXLv0SYfST6c9mIPLdqLsEc+XK1s
mfcCln73yz2iWtkv955Laus2tbWiWp3sfWwWjmx/M7kk2VyBHtfUsjrNh6te
L7f03TnW6Zd9Rs99p/7t29C/LTtW/J2z+7dsf/AMaxtwlkx/veT921uOs2Vs
EHtaHNW+bjFKOcOoa3m1su89ZmgtxlhR3hgT1vYzy/4uI9XDi9bjwNo56CEf
P9NuttzP52zJ56kWrxEsOP7md/PW2p4W9eqoPJOj8uFalPVWZo6zx3GX2qN9
D0f3gS3uudSezXh0TmI9ZO07s5fQPi0u79Pmwz1DXRlpHF1Se15r7bPRpeeJ
I5a8Y+Ns+qkXs1/Xvc7tex8bHKllfkto+R7Elvkttb0Q9thX+qL23owZ92HM
lHuPNnlvZ/RdPY1ttRdjtBdhj3y42lrI1j1aL2uQtbFJ7EFUO05pr6Da3gwz
jM3Cke1v7Vi158avo1WZzpDNh4s6eFSs+R767hzr9N81ct+pf9O/rT1WD/2b
tQ04X+SaHtW+1vZEzfYn90Q/clT7usUo5QyjruXVyv62TneZXx3jnXiXaFyX
MQar1Ze1v8tI9fCiNuZfmrt/1thnqVpdbrF/Zy9q86I99+y+2Hpt1H6vzLNK
NSPNs8MZ9w3Onjs+KtMR7Xs4ug9scc8l+5xWrR+I/JYt7zh85Bnap5bXxDPn
wz1JXelyHL1Upq+Idnvp59Y+c499UVvQTz02+3Xd69y+97HBkVrnt4TsexBr
85eW+S21ssRnRXmijrWM+Mx4DnjrdT7idVYr9x5tcku99F09jW21F2O0F2GP
fLhQyiXJrCFGPsqjf3893ihdb5lnd7fUhRnGZuHI9rd2rCUx8r35TD7cHu8A
bU3fnWOd/rtq57b3vlP/pn9bc6we+jdrG3C+Wltx6a+jX98S8RmZZ8oiR32P
77HmXsYeRilnGHUtr1b2t/3tafOa6K9iXBNj/sjvjjFUvJ+09uxLJlq9v72n
eniRGTNkf9fIu21Z3/ZUG3/2tO66Ve29uGv7hyVq67y1ueURbc9I8+xQOid7
7pFTu3b26Ad6aN/D0X1gq+PV9lRaEnHOo361WNsK2qdlnjkfTl0ZS+0ZzaX9
VKv9Qvain1p3vNmv657n9j2PDY60xzWTyQm+ROlzWuW3ZPYiODtqzw6Mep31
3u+P0Hed3b9f0170EZlnjfbKhyvd78+UrbSWcv1vS+/dqOUl1PZqqd2PnmFs
Fo5sf1vmCxyRj7GXJ8qH03e/sk5/U87h+079m/5tzbGWxJ79m7UNOE+LnNSd
+r3F+a29jwEvRilnGHUtr1b2I89z5LnHuD/utS191mVNtMqH66keXquVO851
5nNqY7qe9u2o3aedaX+41u3AGrW5ZW0PU/Psd52VD7f3b9Fr+37Ed9/zeJm9
hNdEfO6WvU+1T8s8cz6cujKWzHsTlnxerQ3LjlVb0E+1O97s13Xvc/texwZH
2uuaafEexIb5Lel8m7Oidp5Hvc566vdH7bt6GttqL/qIzHneKx+u9nxG/JaF
c/v9bD2vPWv8prD3S60u1L7jDGOzMGq+QO1a75l8uPZG7btbnadR1uln6Dv1
b/q3NcdaGnv2b9Y24By1du2sWNPenLEPzBqjlDOMupZXK/sR5znGBK374Uy0
el9qT/XwWuwHWyp35vmI2rMwPa1jhkw7XRqDj6T2/EsP4/1a/2Se/a7SOYlr
ukVZlx43Yu3zM72375nv3luewa3s+3jWRjznt3QfVO3TMs+cD6eujKf2jHq2
v8usL+/9XYJ+qv3xZr+ue5/bhx7HBkfa85rZ+h5E+S3fGvU666HfH73v6mls
q73oI87Mhwulz42clUf/rpT3ePv71NZXS3kJW99FN8PYLIycLxAx4ntT5cO1
M3rf3eo8jbJOP0vfWfr3+rc29G/79m/PvrYBZzi7fyvFku+R6ct7GMeOUs6L
UdfyamXf8zzH92ix7/PayPwuo9XDa8myF3PDXr9+/ePSv98zP2eN2hg4Ypbc
/9g/vfQ9M3OGrbauz5pnv6t0Tras72457prrZoT2Pfvde8szuKfWVreIeFfD
m8R7bIL2aZlnzodTV8bzySef/KT0feM5y8znxDPxpc8prc22oJ/a73izX9e9
z+0vehsbHGnPa2bJvbF7/15+y7dGvc7O7Pdn6bt6GttqL/qIs/PhavuPrPl3
9/IcS/Xt0dj3m3Pzg63fe4axWRg9X6BUl3olH267WfruVudplHX6WfpO/Zv+
bemx1kar8t3zzGsbcLRMjsWZUcqxvjVKfs8o5bwYdS2vVva9znPtvZYtojbe
mz0fLtTOQYwZS/9+tHu8kctf+72OeC4kK8ZY0X6/WfHe69r96L3vI4cR9tQZ
ZZ59UTonS/r6pVrmw43Svme/e295BiWRo7z3+xYyz0xpn5Z55nw4dWU8tWd/
IzKfE/sUlz5jz+dL9VP7Hm/267r3uf2tXsYGR9r7msm+B/He/Rf5Ld8a9To7
q9+fqe/qaWyrvegjzs6Hq73r7euvv/7je/+u9G/u/f2PP/74p4/+fuTL3Ps3
tXvAme83w9gs9JwvENdw5t+M9t5U+XDbzNR3tzpPo6zTz9J36t/0b0uPdRs9
9W/PuLYBR4vc0LP7t1IsGSeMkt8zSjkvRl3Lq5V9j/Ncu/+1NuI6jfyu6/tn
W6+b0erhrVpdifHDo38b4+HSv429ao/8Llkt28u9Xc8VYm4QY/S3+XHVd7rW
9lXpYT/oWg6Vefa7et0fLpuzOVL7vuC7d5VnkBHtd7Qve80Ra/VB+7TMM+fD
qStjqr2voJa/XXsOuDQ+3Uo/tf/xZr+ue5/bP3L22OBIR1wza9+D+GT5LcXn
60e9zs7o92fru3oa22ov+ojMfhx75sPVzlHcb7/9N6XnceOavXec+I0r5+Gd
vrR0T6rVvswjjM1Cr/kClxyA2jr6o2u9Z/Lh1put7251nkZZp5+l79S/6d+W
Hus6eu3fnmltA46UeQa+h1iStzrKfZtRyhlGXcurlb31eY588q11Pfq5WE+K
Pi+ecXj0HEOr8fVI9fCetW1Hq/yeo2XWGjPzhSOU5saX/LhH//aoe2clW+uI
efa7Sufk3hy1lRa/xYjte6vvvsTRx4s5XDw/1frZjtIxtU/LPHM+nLoyptre
6dHelP597Z0W8ZzwHuXWTx1zvNmv697n9hlnjA2O1MMc49F5OTK/Je5HxFz/
rKh9h1Gvs6Pb5Bn7rp7GttqLMdqLsGc+XCj1iffu/5f2pCm9i6P0HeK+/vXf
rf12cT1nvtsMY7PQY77A7bkr7ZH06FrvmXy4dWbsu1udp1HW6WfpO4P+bV/6
t3P7t9nXNuBItT03IyJvYc/IXJ9L3oWdaF+rexMdYZRyhlHX8mplb9nfrnnv
8OWZl/jOS/Oy4zmZ0mc3zIfrph7eUxurPNrLdtQxQYx/amW/HYOfIZtr/ej6
q7UDtXvRLdTGmT3kEIwyz74onZM9952ujTVqv8Wo7XsYLc9gqzh3cd63Pqta
qo/ap2Xkw6krI6q1EaVnD7b2OWvop/L2zocb/brufW6/xhFjgyMddc3U3j90
ieu1uiPzW1p8xz2Nep0d2SbP2nf1NLbVXozRXoS98+Fqa4m3daHUZ5byFEr/
7nY/nFobkK2fM4zNQm/5ArHefu/fZu7lLbmPdyb5cMvN2ne3Ok+jrNPP0ncG
/du+9G999W+zrW3AkWrX+J7vc7mo7Te6tF2s7SPZy75Po5QzHLnWUxsv9JoP
l+1rYgyR2Ue2pnaesr/LSPXwnjeVd1JF3P6bWptzxH2ZtTLft4f110zeXumd
tLX6fUTfVLs2enjH3Cjz7IvSOdlrPpGZ49d+i1Hb9zBankFrMU+M+pt9/qLU
d1xon5Z55nw4dWVctX7v0R5vtfX67HsxltJP5W093uzXde9z+xb2GBsc6chr
Zul7EBvmt1Sfrbp+j1aPRr3Ojqxfs/ZdPY1ttRdjtBdh73y4eNZ5yeev7Qtr
+y5c/914Z0Tpus9+txnGZqGnfIHS+xtq853ba71n8uGWy/z2l2t4pL671Xka
ZZ1+lr4z6N/2pX/ru38bfW0DjpK5vvd8f9m1zPUa+RWZz6rlLJf2Pd0i+t7L
cw6ZNnyUcoZaP9KyfCPuD/f555//MNPHtNy3q3aesuPrkerhI7Xf+HaMUtvX
+9Ee3b3IvDv+7DlL5lmMuG4e/fv4DWr/fs81iUwOVa2emGe/q3RO9prD1fJf
a8cduX0Po+UZ7CnqQvY+TcSj/eu1T23L29M9w9ZlVVfGVXv+4FFdKK17Ruyx
bqafWmbr8Z7hum5Z3h72hytpNTY4Uk99+G29aZXfEmprhC3use5p1OvsqPo1
c9/V09hWezFGexH2zocLpbXE631CSveLSs+1hthbp/Q9rscopb+XvQcUZhib
hZ7yBWr/Pvu+zFbl3Yt8uGVm7rtbnaeR1uln6Dsv9G/70L+N1b+NuLYBR6mt
179tiw55V2Lk3NTKkr1XXnt/YnzvPb7D7R6VMaaI/xbHu7cH5yjlDIk+6+E7
g5aqnZce8+Ey7+9eMtbJqM1BsuPrkerhIzHPKn2H232nWpy3M8WeJLX6dsR+
yY+02vOz9u/3fBYj8x1q5TfPfteR94UuatdLba+ekdv3MFqewREizyXzHEZp
73DtU94z58MFdWVctfcPvLnzrpfS3492Z49y6qeWaXG8J7iuu53b76XF2OAo
R18z2fcgxm9ZW9db8nvX1vJ7qTuPjHqdHVW/Zu67ehrbai/GaC/CEflwpbbi
+p5L6bfJXJel73HZY7mWV7D0flStzvU+Ngs95Qu0GA9HnP1euRr5cMvM3He3
Ok8jrdPP0Hde6N/2oX8bs38baW0DjlK7HuIewFFleVPZ1/QSmT2PMmPZPb5D
rY25Xe8apZzhyD6rNrbuLR8ukye/x7VUy1XPjq9HqoePZH6Dy9+tjeNaz9v2
kH3u9qy9ezP719WeuQm1+9B7jtlq11cmP9s8+11L93JsoVaPSvsUjt6+hxHz
DC5ibBjjvsh5bn29Z8adpfGG9inv2fPh1JVx1dbeb/dQrt0D3mPPZf3Uci2O
57rOaz2373lscJQz2uV4fqR2bjKx5PzVcrz2fD9QrEVEHYt9MWLPgzXndNTr
rIc57Oh9V09jW+3FGO1FOCIfLnGP/g/PepTGOZl9YEo5Fpe1wNJv9oxzrjBa
vkDtPX6X6Om9crfkw+XN3ncfdZ56Wqefoe+80L/tQ/+2b/9mbQOOUdtPKaLl
3rYZmWcMavu4hMy13nos/qbyTp17fcMo5QxH9lmt2+ke8uH22Hu0lk+WHV+N
VA9LavtdXnJpY2xxVF3eU+17ROy1D0lJZq/PiMy8rDa3i9jre9SOmxmjmme/
q3ZOWj9bk2nfSs9ljd6+h5HyDKIeRVv+aK7fui+qtaOl/VG1T3nPng+nroyt
9N1vx6u156uXPgecoZ9arsXxXNftylub2480NjjKGe1ypq3JPIO+ZC0nc4+6
RX7IPY/u/cS5j7Y+s5/9SNfZ0eWeve/qaWyrvRijvch8h1blL537y32gUjky
x4jnjGufUaqbn3zyyU+Wfq/Rx2ZhtHyBkM1/bVXu1uTD5c3edx91nnpap5+h
77ymf2uvdlz927Jzb20DzlFrF1q3QxnZfdXfJPaNqu1P1Ppaj76sdLxH9/hn
KWersVFmD9be8uFK753f61qqPfMQsWR8PUo9LKnVnUu9KX3XzJ5lvYh2MNNe
HvmdMvUyIpvvmGkP9sjbzuSLZ9o88+x3ZcYeLcp7UcvPrNXFGdr3kfIMas+d
rVkPKak971Xq+7RPec+eD6eujK3WLl2eM67Vnb3GY/qp5Vocb/TreqS5/Uhj
g6Oc1S5n1utq9yyXruXUjrfHPiSZ+72ZNm6k6+zaEfVr9r6rp7Gt9mKM9iIc
lQ9X6lfj3m/sj/Poz7N9YO0Z6Fr9yOzRc2v0sVkYMV8g1L5/RK/vlZMPlzd7
392q/KOt09fOb+995zX9W1v6t/b9m7UNOF6p7b/uI84oW6aNyeRRZ/YoyuTV
ZdXm8dH2jFzOWj/Sqq3O5Er0lg+X2T+15W8YMudpybhxlHq45XNjPbq2V9Ta
454ls0dcxBHrDtn8vIglz4vV6soee+BlnlXOfI559rsybdfr169/3KLMoXas
2rvrZmjfR8ozqK0btN6rP+pa6Xi18Yb2KefZ8+GCujKu2hr8ZV5ae7fqXmNM
/VT78mePN/N13dPcfrSxwRHObJe3vgdx6fmr7QEf0XrfisweDJl7TiNdZ0s+
r0X9mr3v6mlsq70Yo70IR+XDlY4TfWrpPW8x3s0eJzNmeVSGtd9t5LFZGDVf
oDYPukSP702VD5c3e9/d6jyNtk4/et95Tf/Wlv6tff9mbQOOl+lz9toLtabV
OwAzuRmtckRq7UqpnR2lnLXfpUWfm8k5X9NOH/C+1OJzAa2vp9reapdYMr4e
pR7W1PL6SuPeiBbf70iZ52kusWeOc+YauES8F3vJZ2fqe8tnJzK5odlzaZ79
rsxaRqtzkxlPvKm8u26G9n2kPINMX7RkjaKmtu5TG29on3Lkw6kroyvt8XOp
E7V3pe5VNv3Ucq2ON/J1PdLcfrSxwRHObJeXzD9bnL/MXiQt29jsvDZzjke6
zq4dNIeduu/qaWyrvRijvQi1vJyWfd3a36S2fnKttgdKq9/92shjszBqvkCI
td4jr79W5MPlzd53NzxPQ63Tj9533lrT77w9nv7tiv7tWy37N2sbcLwj+7il
MnvXZfv0zLNo8c7vLeWt7TcVUXs/zgjlzOQwbdnTZ0k+TYf5cNU1nuy71Gsy
++NeYun4eoR62OLzHz3bMGr/n10Dj4j7ubHPyVnHf3u9pecXIbuG2mJf6Kjf
mWNlz6F59ruy+XBby53pszJ7Qs/Qvo+WZ3DUO3Uz481avdY+5ciHU1dGV+tT
avOY1u88uKafWq7V8Ua+rkeb2480NjjC2e1y5j2IW37vW/GeptrntnqXU6au
Zd8rM9p1lj0HR8xhI0buu3oa22ovxmgvQi0vp9U1EWrPcdyLpXuWlH770p4z
kZux9nuNPDYLI+cLZO7xR/T23lT5cHmz991Hnafe1unDyH3nLf2b/q33/s3a
Bhwns7dtyznWGpk2IZMzk82tW5vjE21hZt/Q2nvBRyhndq1tzd7XS9bxInrL
hwutxwj3LJkLRCx93niEepiRGcPvcdwzLX0PRcwr4rrbcsyoz0vP9doxeW1f
v611M2See4no7dmX0ebZ2Xy4LWXPPkOYzc3MfFbP7ftoeQaZ369FvW6177v2
qU4+3At1ZVy1elEbh20dc9Xop5ZpebxRr+vR5vajjQ321kO7vPY9iGvyW7Lt
T9zLerPhPV3Z75RdNxjtOrs4qn5lyj1q39XT2FZ7MUZ7EWr3a1q+Cy37/q/r
WJrHlL1/fBtbv9uoY7Mwcr5AyOZQ9HT/XT7cMpnfd9S+u9V5Gm2dPozcd97S
v+nfeu/frG3AcTI50q33D1oq275k7mVn3oEesTQHMJNXuORzRyhn6V1B15HN
eYm+J/Pu3tvoMR8uO55bez8sO965c7xFY9QR6mHNmnFvT+uVa2Wvz+uI/iB+
myXHiXHdmmdttj4DmD3O0meI4hrJ7nu8tL0wz37Xkny4SywZk2TbsCX9yOjt
+2h5Btln3mJet+b+YdSnTHsZawDZz9Q+Vb+HfLi31JVxPeoLamtMrZ6jXlO2
O7+VfmqH4414XYeR5vYjjg321Eu7vKZdWLsn+5JrYek7ZrK/f8TSOe1I19nF
UfVr5r6rp7Gt9mKc9iKTlxPfLftcX8mae/lL1w7D0nXKVnuHZY/X29hs9HyB
kH1uutX32Eo+3DIz992tztNo6/QXo/adt/Rv+rfe+zdrG3CMTH+wdH/QncqZ
ahMy757JftYlIj+3NLeMfU2X9A2tv/OZ5czmh1/qUazp3Y5H43vGeCybs3Av
esyHy8yfltTbEHOH2jygdg9u6XcboR5mLK1TW95T0oulv91txO8U9S3mNFGf
47eLiP8d52ftM70RLe4FL33PRnyX0vw72qYlbVpElGFJmc2z37UmHy4i5o2l
tmbJe3uXPlc9evs+Yp5B5v1Sl4i2K1P/Yg65JJd3yXfWPpXJh/uWujKupc+p
rz3fa+inlml9vBGv6zDa3H60scGeemmX17wHcW1+y9J7W3GOave2Yq67ZI67
Zm+m0a6zcFT9mrnv6mlsq70Yp71YsqYX7UWU+1Kf19S5pe97yOabXFuav9tq
37BRx2Yz5Au8Se5f2st7U+XDLTNz393qPI22Tn9V7iH7znv0b9+9DvVvbY7V
sn+ztgH7y+zF2EteaHatJ/NZa+5fxNwy+uvYryr6t/jfmT0mr2Np/m7v5VyT
Xx8R5YlyLilXKYeqx3y4sHSsFXU81jvj/EfEGDL+7/gt1+z11aIOht7rYUaM
O5Yce824t0drr9E9o+Va8JrnxKIexlgw6mb8+6gba3KysvP4a+bZ71qbD3f9
feI3jPJErNmrcM1ziiO376PmGaypKzF2uFzrEWvryJq5vfbpMflw36WujGvp
2DbiqLLpp/L2ON5o13UYcW4/2thgLz21y0ufmVqb3xKW3IO9juvrLP7/Nb9/
xJp3N814nbWsX7P2XT2NbbUX47QXYUvdXfpbLrkXu7ZOL/0d1hzjkRHHZjPk
C4TM/ceIHt6bKh9uuVn77lbnabR1+muj9p239G/vhv6tzbFa9m/WNmBfmTFG
af+VI2VzcrLX7tr+fG2sfU937+XMtvlbItrxeH6g9OdLynxUf5vNEW8VMf+o
5e+vzW/tvR7WlOrPbcSYoeWxe7A156hVLN2bOWPpMystouex/mjz7LPrZrQN
a77/yO37qHkGZ+X3bnkuRPt0n3y4d6krY1r6u8U61VFl00/l7XW8ka7ri9Hm
9iOODfbQW7u8tD5sOdbR6xSXWPMepYvRrrODx4hT9l09jW21F2O1F0ver3Hn
t1z03N+S62/DXn3pPe8iX3LNMUpGG5vNki8QsnlOrb7PWvLhlpu17251nkZb
p781Yt95S/+2T+jfXrTq36xtwH4y+SEt3mnXUuZZyCVlXpIjsyW25vb0Xs64
t7NXmS75M6WxV6/5cCHO6RG/3eUcxPvAS39vyxi793pYkx2btBxv92Tpvs2t
I5712uu7HXWdba2f5tnvqp2TpXs7LoloL7ecg1Hb95HzDGrnoHVszSsI2qd3
yYe7T10ZTzw3tuS8t3q+OUs/lbPn8Ua5rq+NNrcfcWzQWm/t8pL39mzNbwlH
14EW6wUjXWdH168Z+66exrbai7Haiy3lXZP7kF033fI+j+xeUnvtVTLS2Gym
fIFsXd7jOeol5MOtM2Pf3eo8jbZOf89ofec9+re2oX/7Vsv+zdoG7CPz/tE9
8xfWyOY5L3kGKu5j7LU/TeTvbb3fPko51+zLWovrtY5R8+FCXEd79Vnx293u
b5S4Plbv+dh7PSzJPoe91/F7EOf36P244nnWI/YZ3TtfM+ZNW+unefa7auck
/k7rPRRifvqm0TuRR2zfR88ziO/Y6h0KpWg5BtY+fZd8uMfUlfFk9+04q17r
p+r2Pt4I1/Wtkeb2YcSxQUs9tsvZ9yC2yG8J8R237KOUibdziGbz2lGuszPq
12x9V09jW+3FeO3F2rZizX4f2WNt+T4L7u3sVhdHGZvNlC8Qss9pn/neVPlw
683Wd7c6T6Ot05e+x0h95y39W5vQv93Xsn979rUNaC27f2dv47vsM/hr3kWz
5D3imdhrn8meyxm5+63KdfscQOmzl66J1PqTVnkS12KckNnfcEk8ysOvPYvQ
Iu+753r4SGbP2SPfY3WmuJ6yz6ysjfj8Lc/UrNX6vkJct63Gh0e0PbX+PcrQ
4rvU9jTIPsuVmJP84Zy02p99j7H+aO370X1g4nirxpp7vWsq3pm95LmKJZ69
fbqo9cet2qkWziqrujKO7L4mZ6416ac2H6/JmkjP1/U9o8ztr404Nmihx/yW
kDm3reffn3/++Q9b//5xre21j8MI19lZ/f5ofZd8uG20F2Vr9s2Pf7P0OEe8
Syiz90nkXGw5RlbvY7Mj29+jxsPZdr3FsdbI9MsjzHf13f3MO0dbp68Zqe+8
pn/TvxWO1WX/9qxrG9Ba5CjUros93mPdQlyvtbJvWWuIMdaW/ZOirzli/aDn
ckbfuKZs0Tc96ldLuRBL87tq4+U9f7/4flvyu2PMVBsfZsalrb5Pz/Xwnlr7
cfR7rM4W3zd+g1bPHMS4L9bWzz6PUaciZ3NL3YxrrfX+3Ee0PbV5dqv3oNee
ecrmQi5dj18zF4j6vdd7mK+N0r4f3QfWnh/ccrwW1/ql7XrbH+2+l+Uzt0/X
jminWjiqTX10bHVlDJnf4uwyBv3UfXv2U7d6va5Lep/b3xpxbLBVr/ktmXvK
e72jJY6dWTvs5Vrr+To7u98fpe+SD7eN9qIu7uUvKefaele7nxtrMlu/S63s
Rz5H0vPY7Mj296jxcOaeZKt6tsYs+8Ppu3N9t3X69UbpO6/p3/r5jfRvOc+4
tgEcL9qGGFdFbn20mTGGu+0z4/+OtjvyP87ay7nnckaeceQgxLt5o82+Llf8
7yhrjJuiDzg7f+ZocW5i/BPP68VvcztHiPMT5yzOT/RV8bv1PN/quR5eK83F
etqP5gzx3EWM22KMFfXy0e94fb6ifsbvGb99r88V1OrmpS2KP4vvEmP8nq+1
2axdj4+6Gr9XtCn3fs/I6Y+6fEa9nK19H0W0YXH9xjmN3z/O8eV6v64j8d/i
d4nfJ36nM9su7RNZ6got6af6MNp1PeLcfsSxAe3FvCHuEV7qwOW3v63Dlzrw
dm57yt4vI15nR9F3cYQR2ouo11HOuB5izSPKGxHtQvy3+DP3O9cZbWwGvdN3
P4cR+s5np38bn7UNACCjtmdxrCOdXUZ4Nr0+nw4AAAAAAAAAAD2L5x8qeTee
S4GDyYcDAAAAAAAAAIDlSjk3sS/32eWDZyQfDgAAAAAAAAAAlvniiy/+opRz
8+WXX/752WWEZyQfDgAAAAAAAAAAlqnl3JxdPnhW8uEAAAAAAAAAACDvd7/7
3Z+V8m0++eSTn5xdRnhW8uEAAAAAAAAAACCvlGsj3wbOJR8OAAAAAAAAAADq
3rx58/333nvvX0u5Nh9++OE/nF1OeGby4QAAAAAAAAAA4NWrjz/++Ke//vWv
/8sXX3zxF7///e//JPLfvokf/Pa3v/23H3zwwT/W9oV7m2vzg7O/Bzwz+XAA
AAAAAAAAAPDqVW3vt1pEztzZ3wGenXw4AAAAAAAAAAB49er999//py35cN/4
3tnfAZ6dfDgAAAAAAAAAAHj16qOPPvr7tblwn3322Y/OLj8gHw4AAAAAAAAA
AMLr169/vCYXLvaVO7vswAv5cAAAAAAAAAAA8OrVl19++edLc+F+8Ytf/MvZ
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
IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6qispZdX137tx5OWMLd9P91+np6Sez
PtPx8fEX+/x3uAt7OAAA6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxV
17b9/tBd9mOPHj365uzs7OPtd6D+dx8+e/bsq2+//fa/Rn/23r17P13ns+3y
uR4+fPjdq1evPt1+Dt32uV6/fv3R9vPfdvzZdR/u+9/nLv88b/PvBACAd4i7
EMXkLgQo5o1BMdnDAQuwh1NM9nBAMWdVReWsuq5tPzbajN2/f//H0dfZZVO3
bdau8tm2v/cmn2v7Z7t79+7Pva+xbfmu8pluyh4OAAC63IUoJnchQDFvDIrJ
Hg5YgD2cYrKHA4o5qyoqZ9V1HR0d/dDbi207t12/1uh3mx4eHv6669fafsbb
6GfC7fq1Hjx48P0qvzfVHg4AALrchSgmdyFAMW8MiskeDliAPZxisocDijmr
Kipn1XUdHBz8dtlObNvKXfXrbduy3vZs27nt8nW236962dfYfubbVT9X72fN
vc2fEWcPBwAAXe5CFJO7EKCYNwbFZA8HLMAeTjHZwwHFnFUVlbPqms7Pz9/v
bde23zd6na97+/btX27y8+ZGn+s6n2mz/Xy6y77m2dnZx9f9uldhDwcAAF3u
QhSTuxCgmDcGxWQPByzAHk4x2cMBxZxVFZWz6ppevnz5t8v2YdvvGL3u1z05
OfnsJl/3yZMn/7jszz969Oib636uV69efTrjn/cq7OEAAKDLXYhichcCFPPG
oJjs4YAF2MMpJns4oJizqqJyVl1Tb7f2/PnzL6/7dXs/3237GW2jP7/9/tLO
z6z78Lqfa9P7/bA3+bq7socDAIAudyGKyV0IUMwbg2KyhwMWYA+nmOzhgGLO
qorKWXVNvZ8Pd3x8/MV1v+72e1avu4frbem2ndx1P9MbR0dHP1T+zlR7OAAA
6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxV19Tbw93w58Nduocbbdpm
/Q7XN3o/E+/x48df3/Trj9jDAQBAl7sQxeQuBCjmjUEx2cMBC7CHU0z2cEAx
Z1VF5ay6pt427Cbbs+3nrF32dbefz9b7s48ePfrmsj+7fd7rfqY3ej9/7vbt
27/c9OuP2MMBAECXuxDF5C4EKOaNQTHZwwELsIdTTPZwQDFnVUXlrLqm3m7t
4ODgt+t+3d6mbbSzu3fv3k+X/dnffXDdz/Rn28+o2/c/867s4QAAoMtdiGJy
FwIU88agmOzhgAXYwykmezigmLOqonJWXde2Abtsf/bkyZN/XPXrbZu1y77e
1vb7UHt//rKt2j43ZNvPgets7t7b199zEXs4AADocheimNyFAMW8MSgmezhg
AfZwiskeDijmrKqonFXXtW3eevu109PTT67y9Q4PD3+97s+c6/0u0+3r3uyf
9P97+PDhd5093If7+nsuYg8HAABd7kIUk7sQoJg3BsVkDwcswB5OMdnDAcWc
VRWVs+raenu4refPn385+hrbjqz3s922Xrx48fnga7x32Z/dfqbbvv55t9/Z
etnfc3Jy8tm+/p6L2MMBAECXuxDF5C4EKOaNQTHZwwELsIdTTPZwQDFnVUXl
rLq27WfAjTZx2x7tot91uu3gej9v7U1HR0c/jD5H7+fDbX/Hvv55j4+Pv7ju
73O9KXs4AADocheimNyFAMW8MSgmezhgAfZwiskeDijmrKqonFXX9+rVq09H
m7Y//+7Sre33n+7yv3///v0fd/kM289mext7uG3zdt2fYXdT9nAAANDlLkQx
uQsBinljUEz2cMAC7OEUkz0cUMxZVVE5q74btp/19mbjtuvWbdTTp0//vuvf
39upva093Pa7VPf191zEHg4AALrchSgmdyFAMW8MiskeDliAPZxisocDijmr
Kipn1XfL48ePv97HFu53713l731bO7W3tbu7iD0cAAB0uQtRTO5CgGLeGBST
PRywAHs4xWQPBxRzVlVUzqrvhvPz8/ePjo5+2McWbuv27du/nJ6efrLr3/+2
fo+pPRwAACzLXYhichcCFPPGoJjs4YAF2MMpJns4oJizqqJyVl3fkydP/rGv
Hdxfe/To0Te7fIbeTu3k5OSzff2zrrCH+3Mz/z4AAHjHuAtRTO5CgGLeGBST
PRywAHs4xWQPBxRzVlVUzqpru3fv3k+7btvu3r378/Yz5La2//ng4OC3Xf/c
6HO8evXq0/+Unw9nDwcAABdyF6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqic
Vde1y+9H/fbbb/+r9/PZtt+Juu3dbrqJ2/6Oy/7stmHb1z+zPRwAACzLXYhi
chcCFPPGoJjs4YAF2MMpJns4oJizqqJyVl3T8+fPvxxt2Lbfo7rr1+vtzN70
4MGD76/z558+ffr3/fxT9/+e3ufbBxs4AADocheimNyFAMW8MSgmezhgAfZw
iskeDijmrKqonFXXNNqubb+/9Kpf8/z8/L3t58n1vu7Z2dnHF/3Zt7VT6/09
jx8//npff89F7OEAAKDLXYhichcCFPPGoJjs4YAF2MMpJns4oJizqqJyVl3P
6GfD9X4/6i56X/vevXs/XfRner8vdZ+/x7S3h9vn72W9iD0cAAB0uQtRTO5C
gGLeGBSTPRywAHs4xWQPBxRzVlVUzqrr6f0Mt8v2alfR27ZtbT9H7q9/Zvt5
dPZwAADwH81diGJyFwIU88agmOzhgAXYwykmezigmLOqonJWXcu2RRts1T7Y
x99zeHj462V/x9OnT/9+lc+1z9+Xum3r7OEAAGBJ7kIUk7sQoJg3BsVkDwcs
wB5OMdnDAcWcVRWVs+paej+H7e7duz/v6+/ZNm9X2bf19nDbz7Pb1+fq7eFu
+ntiR+zhAACgy12IYnIXAhTzxqCY7OGABdjDKSZ7OKCYs6qiclZdS+93me7z
95Ken59/eNnfc//+/R8v+jOX/R7X7WfN7etzbb8PdvbPxruMPRwAAHS5C1FM
7kKAYt4YFJM9HLAAezjFZA8HFHNWVVTOqmvZfifoZXuwZ8+efbWvv+c6P+/t
9u3bv3S2au/t43Ndtrk7ODj4bR9fv8ceDgAAutyFKCZ3IUAxbwyKyR4OWIA9
nGKyhwOKOasqKmfVtfT2cMfHx1/s6+/p7eEu+3lvvd9lenZ29vHMz7Rt8W76
9Ufs4QAAoMtdiGJyFwIU88agmOzhgAXYwykmezigmLOqonJWXUtvD/f8+fMv
9/X3XOfnw217vJk/u+709PSTt/G7Yi9jDwcAAF3uQhSTuxCgmDcGxWQPByzA
Hk4x2cMBxZxVFZWz6lpOTk4+u2wTdnR09MO+/p7z8/P3r/qz2H7/Mx9e9mfu
3r37800/0+PHj7++7Ou/ePHi85t+/RF7OAAA6HIXopjchQDFvDEoJns4YAH2
cIrJHg4o5qyqqJxV19L7GWkHBwe/7evv6f0cugcPHnx/2Z/bfnbcZX/upp9p
+z2tl33t331w068/Yg8HAABd7kIUk7sQoJg3BsVkDwcswB5OMdnDAcWcVRWV
s+p6LtuEbb169erTffwdd+7ceXnZ37H9XtTL/tyjR4++uezPbRu7636ebe92
2dfddnLX/bpXYQ8HAABd7kIUk7sQoJg3BsVkDwcswB5OMdnDAcWcVRWVs+p6
tt89OnMbtm3qepu73s9ie/369UdX/T2ru9h+F+xlX/f58+dfXvfrXoU9HAAA
dLkLUUzuQoBi3hgUkz0csAB7OMVkDwcUc1ZVVM6q6zk5Ofmst1d78uTJP27y
9bffu3qTTVvvd6Y+fvz466t+nhcvXnze++e93j/l1dnDAQBAl7sQxeQuBCjm
jUEx2cMBC7CHU0z2cEAxZ1VF5ay6pt7mbGvbkF3n6257t5v+Ptbt57X1vsaz
Z8++2vXzjH5W3cOHD7+7zj/nddjDAQBAl7sQxeQuBCjmjUEx2cMBC7CHU0z2
cEAxZ1VF5ay6ppcvX/6ttxO76s+JOz09/WT09bbf07rr19vHZxv9XLj//t2t
7+36mW7KHg4AALrchSgmdyFAMW8MiskeDliAPZxisocDijmrKipn1XXdu3fv
p9Fe7M327Pz8/IOLvsbZ2dnHu36d372/62c7Pj7+YvT17ty58/L169cf/fXP
bp/1/v37P47+/PZz6G7y7++q7OEAAKDLXYhichcCFPPGoJjs4YAF2MMpJns4
oJizqqJyVl3bwcHBb7ts2ba2/91tg7bt37b/9yp/9uTk5LOrfrajo6Mfdvna
2+9+3T7T1uHh4a+7/Jntf3fCv84uezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCK
yR4OKOasqqicVde37cl23bVdp+33ll73s22/Y3Xfn2f7593nv79d2cMBAECX
uxDF5C4EKOaNQTHZwwELsIdTTPZwQDFnVUXlrPpu2OX3i16n7fep3vSz7fr7
WHfp9u3bv+zj39d12MMBAECXuxDF5C4EKOaNQTHZwwELsIdTTPZwQDFnVUXl
rPruOD4+/mJfu7Ptd53u87M9ffr07zf9TE+ePPnHPj/TVdnDAQBAl7sQxeQu
BCjmjUEx2cMBC7CHU0z2cEAxZ1VF5az67nn27NlXh4eHv15nc/bgwYPvz8/P
P5zxuX7/uu8/fPjwu2t+pvdnfKarsIcDAIAudyGKyV0IUMwbg2KyhwMWYA+n
mOzhgGLOqorKWfXdtW3IXrx48fmjR4++uXv37s/b7xrddnJvunPnzsvt58Bt
+7nXr19/9DY/2+np6SePHz/+evtdqn/9XNv/f9vAbZ/9bX6mEXs4AADochei
mNyFAMW8MSgmezhgAfZwiskeDijmrKqonFWhsYcDAIAudyGKyV0IUMwbg2Ky
hwMWYA+nmOzhgGLOqorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCKyR4O
KOasqqicVaGxhwMAgC53IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6qispZFRp7
OAAA6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxVobGHAwCALnchisld
CFDMG4NisocDFmAPp5js4YBizqqKylkVGns4AADocheimNyFAMW8MSgmezhg
AfZwiskeDijmrKqonFWhsYcDAIAudyGKyV0IUMwbg2KyhwMWYA+nmOzhgGLO
qorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqicVaGxhwMA
gC53IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6qispZFRp7OAAA6HIXopjchQDF
vDEoJns4YAH2cIrJHg4o5qyqqJxVobGHAwCALnchisldCFDMG4NisocDFmAP
p5js4YBizqqKylkVGns4AADocheimNyFAMW8MSgmezhgAfZwiskeDijmrKqo
nFWhsYcDAIAudyGKyV0IUMwbg2KyhwMWYA+nmOzhgGLOqorKWRUaezgAAOhy
F6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqicVaGxhwMAgC53IYrJXQhQzBuD
YrKHAxZgD6eY7OGAYs6qispZFRp7OAAA6HIXopjchQDFvDEoJns4YAH2cIrJ
Hg4o5qyqqJxVobGHAwCALnchisldCFDMG4NisocDFmAPp5js4YBizqqKylkV
Gns4AADocheimNyFAMW8MSgmezhgAfZwiskeDijmrKqonFWhsYcDAIAudyGK
yV0IUMwbg2KyhwMWYA+nmOzhgGLOqorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7
OGAB9nCKyR4OKOasqqicVaGxhwMAgC53IYrJXQhQzBuDYrKHAxZgD6eY7OGA
Ys6qispZFRp7OAAA6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxVobGH
AwCALnchisldCFDMG4NisocDFmAPp5js4YBizqqKylkVGns4AADocheimNyF
AMW8MSgmezhgAfZwiskeDijmrKqonFWhsYcDAIAudyGKyV0IUMwbg2KyhwMW
YA+nmOzhgGLOqorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOas
qqicVaGxhwMAgC53IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6qispZFRp7OAAA
6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxVobGHAwCALnchisldCFDM
G4NisocDFmAPp5js4YBizqqKylkVGns4AADocheimNyFAMW8MSgmezhgAfZw
iskeDijmrKqonFWhsYcDAIAudyGKyV0IUMwbg2KyhwMWYA+nmOzhgGLOqorK
WRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqicVaGxhwMAgC53
IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6qispZFRp7OAAA6HIXopjchQDFvDEo
Jns4YAH2cIrJHg4o5qyqqJxVobGHAwCALnchisldCFDMG4NisocDFmAPp5js
4YBizqqKylkVGns4AADocheimNyFAMW8MSgmezhgAfZwiskeDijmrKqonFWh
sYcDAIAudyGKyV0IUMwbg2KyhwMWYA+nmOzhgGLOqorKWRUaezgAAOhyF6KY
3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqicVaGxhwMAgC53IYrJXQhQzBuDYrKH
AxZgD6eY7OGAYs6qispZFRp7OAAA6HIXopjchQDFvDEoJns4YAH2cIrJHg4o
5qyqqJxVobGHAwCALnchisldCFDMG4NisocDFmAPp5js4YBizqqKylkVGns4
AADocheimNyFAMW8MSgmezhgAfZwiskeDijmrKqonFWhsYcDAIAudyGKyV0I
UMwbg2KyhwMWYA+nmOzhgGLOqorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB
9nCKyR4OKOasqqicVaGxhwMAgC53IYrJXQhQzBuDYrKHAxZgD6eY7OGAYs6q
ispZFRp7OAAA6HIXopjchQDFvDEoJns4YAH2cIrJHg4o5qyqqJxVobGHAwCA
LnchisldCFDMG4NisocDFmAPp5js4YBizqqKylkVGns4AADocheimNyFAMW8
MSgmezhgAfZwiskeDijmrKqonFWhsYcDAIAudyGKyV0IUMwbg2KyhwMWYA+n
mOzhgGLOqorKWRUaezgAAOhyF6KY3IUAxbwxKCZ7OGAB9nCKyR4OKOasqqic
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
U3ljUEz2cNI4e7jpfE9VTPZw0jh7uKmcVRWVs6o0zll1fQ8ePPh+15+rdnZ2
9vH5+fn72+9B/b0Pt98/uu3dRn92+zuu+rl2+UwPHz787tWrV59uP4Nu+0yv
X7/+aNff+bp9/hn/Pkf/PG/z7wQAgHeIuxDF5C5kKm8MiskeThpnDzed76mK
yR5OGmcPN5WzqqJyVpXGOauubZffR7rL7xd99OjRN6Ovs23Vdv1co59Xt/3n
vT+/bePu3r37c+9rfPvtt/+16+fZB3s4AADocheimNyFTOWNQTHZw0nj7OGm
8z1VMdnDSePs4aZyVlVUzqrSOGfVtY02bNvvLN31a52cnHzW+1p37tx5ucvX
2XZzo58Jt+tnGv3su7f5e1Pt4QAAoMtdiGJyFzKVNwbFZA8njbOHm873VMVk
DyeNs4ebyllVUTmrSuOcVdf17Nmzr3pbse33kO77a24/t230Ne7du/fTZX9+
+5lvV/1MvZ819zZ/Rpw9HAAAdLkLUUzuQqbyxqCY7OGkcfZw0/meqpjs4aRx
9nBTOasqKmdVaZyz6rq2LdhNfkfqZQ4ODn677Ou+fPnyb70/e35+/n5vT3fd
z3R4ePjrZV/z7Ozs4+t+3auwhwMAgK7/x979s+h93esetkMgEHCRIlWaVOnc
7TJl2rSp0wlvI4QxMQgENgahJgiVSSPYTVSq0CuI9QbSqUzlOi9hTn57HXOC
z8xz68/z1Rrdz/WBCw5nWzNjwz7rrKWbebyFUMNbyGj+joEa9nCQ2cON50yl
hj0cZPZwo7mrUsVdFTJ31dvZ8TmoN+3Djj3bu3ztY0t309f+9ttv/3jqzz56
9Oj3b/tnT3X8rrubvu7xmapv+3XfJHs4SZIk6WTeQqjhLWQ0f8dADXs4yOzh
xnOmUsMeDjJ7uNHcVanirgqZu+rt7NiA3bQPe/78+a/f5WtfXV397Kavfffu
3b+f+rOnfmfd8XXf5ec69Xvr3uXrvm72cJIkSdLJvIVQw1vIaP6OgRr2cJDZ
w43nTKWGPRxk9nCjuatSxV0VMnfV29lNu7Bjj3aOr398PunxtY7925dffvnX
Y393/H63U1u7U5+Veo6f6/79+9/s/MxUezhJkiTpZN5CqOEtZDR/x0ANezjI
7OHGc6ZSwx4OMnu40dxVqeKuCpm76u3r1GelPn369NNdP9eLFy9+NfmZpscW
76avf3zG6zn+HU5lDydJkiSdzFsINbyFjObvGKhhDweZPdx4zlRq2MNBZg83
mrsqVdxVIXNXvX0d268Tn0n6k10/1/H746Y+w/Xo1O+fS5/jeo7s4SRJkqST
eQuhhreQ0fwdAzXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6qt6979+69mPys
1Lft+FzVEzu9n57jexz/jtd9/Tt37vzrHF//VPZwkiRJ0sm8hVDDW8ho/o6B
GvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd9Xb102bsPv3739zG3+uc27Ijt8D
d2Jz9/G5vs912cNJkiRJJ/MWQg1vIaP5OwZq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVW9Xx+brpj3YkydPfnvTn3v16tUnjx49+v3xO9yOTdnh888//8fh
+L97/Pjx7/79tX/2Dj/XjZ9lenyPt/26P+7rr7/+7xN7uLf++V8nezhJkiTp
ZN5CqOEtZDR/x0ANezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm76u3q2HzdtAd7
8eLFr378zz98+PAPx2eJ3vRnfuz4LNaXL1/+4i1+rht3esf27jz/9h999ODB
gz/d9H2eP3/+63N9n+uyh5MkSZJO5i2EGt5CRvN3DNSwh4PMHm48Zyo17OEg
s4cbzV2VKu6qkLmr3q6OzdfrfF7o8bviXncDd47PXj31++GO3+l2rn//p0+f
fvome8BzZg8nSZIkncxbCDW8hYzm7xioYQ8HmT3ceM5UatjDQWYPN5q7KlXc
VSFzV71dndq5/bCHOz7/9F22cG/zGaSndnrn3MMdm7ebvs+zZ89+c67vc132
cJIkSdLJvIVQw1vIaP6OgRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMnfV29Wp
zws9/udffPHF3861hfvB63x+6qmd2vvawx3/bc71fa7LHk6SJEk6mbcQangL
Gc3fMVDDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuauers6tmU37cHO+XvhfuzV
q1efnPq53tdO7X3t7q7LHk6SJEk6mbcQangLGc3fMVDDHg4ye7jxnKnUsIeD
zB5uNHdVqrirQuaueru6bg93586df6U921dfffXnY0t2dXX103/7yeG77777
5f379795nT3c8T1O/Vzv63NM7eEkSZKkW5u3EGp4CxnN3zFQwx4OMnu48Zyp
1LCHg8webjR3Vaq4q0Lmrnq7OvX74a5zfH7qsX079TWP//nrfM7qw4cP/3DT
1zi1U3v+/Pmvz/Xvbw8nSZI29D9Q7lx5C6GGt5DR/ve/qb9joIE9HGT2cOM5
U6lhDweZPdxo7qpUcVeFzF31dvUme7jHjx//7k2+9qNHj36fvuZNf/b4XXOX
8vvhXue/hyRJqur/ewuBBh/Zw8GNvIWM5u8YqDF4rvo7BmrYw43nTKXGNefq
2f735CN7OErYw43mrkoVd1XI3FVvV6+7h3v69Omnb/P1nzx58ttTX/fYzF33
547fAXfTnzk2bO/2b/3/soeTJEkbsoej0kf2cHAjbyGj+TsGagyeq/6OgRr2
cOM5U6lxzbl6tv89+cgejhL2cKO5q1LFXRUyd9Xb1evs4b766qs/v8v3uHfv
3oubvvZnn332z+v+zKmd2pv+nrpTnfo+Dx48+NO5vs912cBJknSx2cNR6SN7
OLiRt5DR/B0DNQbPVX/HQA17uPGcqdS45lw92/+efGQPRwl7uNHcVanirgqZ
u+rt6nX2cP/uJ+/yPV69evVJ+Po//fGfeV87tVPf5+HDh3841/e5Lns4SZIu
Nm8hVLGHg8xbyGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdVyNxVb1dpD3f/
/v1vzvF97t69+/ebvsezZ89+8+N//tTnpZ7zc0xP7eHO+bms12UPJ0nSxeYt
hCr2cJB5CxnNuUoNezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm76u0q7eHOtQl7
9OjR79/k97199913v7SHkyRJpXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeD
zB5uNHdVqrirQuauertKe7h3/azUH3rTfdu/v+/H7+PzUk/9+9vDSZKkobyF
UMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXvV2d+lzSO3fu
/Otc3+fUvu1N93CfffbZP8/1c53awx3/bc71fa7LHk6SpIvNWwhV7OEg8xYy
mnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd9Xb1anf27ZzD3d07N6u++c/
//zzf5zr5/ryyy//euJ34/30XN/nuuzhJEm62LyFUMUeDjJvIaM5V6lhDweZ
Pdx4zlRq2MNBZg83mrsqVdxVIXNXvV2d2qmdc6v1Nnu4u3fv/v3EVu3jc/xc
N23uzrkFvCl7OEmSLjZvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVW9fx/Zrenf2Nnu4U59l+urVq08mf6Zji/euXz9lDydJ0sXmLYQq
9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu+rt69TvYTvH7uzo
1OeyPnjw4E/X/ZmnT59+etOfefLkyW/f9Wd6+fLlL950o3fO7OEkSbrYvIVQ
xR4OMm8hozlXqWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1e9fT18+PAPN+3C
jv/ZOb7Ho0ePfn/T93j27NlvrvszV1dXP7vpz3zxxRd/e9ef6dS/900/0zmz
h5Mk6WLzFkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXfX2
dfwOuJt2YZ999tk/z/E9Tv0OumP3dtOfO77/TX/uXX+mzz///B8nfqafvuvX
T9nDSZJ0sXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuau
eju7c+fOv27ahr148eJX7/K1v//++5+/7d7u22+//ePEz3Xs3W76usdO7m2/
7ptkDydJ0sXmLYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZ
u+rt7NRnhx5buXf52l9++eVfb/rax97t1J89taU7fufc2/5M9+/f/+amr/uX
v/zlv972675J9nCSJF1s3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCzhxvN
XZUq7qqQuavezk79vrTD119//d9v83WP3+F26uue+qzUHzr1manHju9Nf6Zn
z5795tTP9Db/nm+TPZwkSRebtxCq2MNB5i1kNOcqNezhILOHG8+ZSg17OMjs
4UZzV6WKuypk7qq3t1O/x+3w9OnTT9/k63333Xe/PPX1vvjii7+9ztc5fl/b
qa/z5MmT357rZ3rb3d/bZA8nSdLF5i2EKvZwkHkLGc25Sg17OMjs4cZzplLD
Hg4ye7jR3FWp4q4Kmbvq7e34XW2ntmKv8/mmP5Q2bP/3d8P99HV/tvS1Hj16
9Pv0NdLvhfu/P9PHr/szvWv2cJIkXWzeQqhiDweZt5DRnKvUsIeDzB5uPGcq
NezhILOHG81dlSruqpC5q97ujl1Z2owdHj9+/Lurq6uf/PjPv3r16pN79+69
eJ0//yY/1/G76dLXPL7v999///Mf/9ljd/fVV1/9Of35Y8P3Lv/t3jR7OEmS
LjZvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVW9/x2eG
vs4m7vDZZ5/98/jc08OdO3f+9Tp/5titvc3Pdf/+/W9e92c6Pvv18Pnnn//j
df7M8c+e+79jyh5OkqSLzVsIVezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCj
uatSxV0VMnfVD6M32cS9iWMz9y4/17G7O/fPdOznzvXf7U2yh5Mk6WLzFkIV
ezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXfXD6fhM03Puzo7f
1XaOn+v4XW7n+pnu3r3793P8TG+TPZwkSRebtxCq2MNB5i1kNOcqNezhILOH
G8+ZSg17OMjs4UZzV6WKuypk7qofVq9evfrk+P1p77o7e/To0e/P+XOdY6t3
7p/pTbOHkyTpYvMWQhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8HmT3caO6qVHFX
hcxd9cPs+fPnv753796LN/1s1IcPH/7h6urq44mf6d9f9ydv87muDx48+NPx
Zyd+pjfJHk6SpIvNWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LF
XRUyd9UPu2NH9uzZs98cO7Qvvvjib8fnjR6fg3o4/s/HZ5keG7iXL1/+4n3+
XMf3O77v8f3/82f64ec6NnDHz/0+f6aUPZwkSRebtxCq2MNB5i1kNOcqNezh
ILOHG8+ZSg17OMjs4UZzV6WKuypk7qrSyh5OkqSLzVsIVezhIPMWMppzlRr2
cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUPJ0nSxeYthCr2cJB5CxnNuUoN
ezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm7qrSyh5Mk6WLzFkIVezjIvIWM5lyl
hj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cNJknSxeQuhij0cZN5CRnOu
UsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4qrezhJEm62LyFUMUeDjJvIaM5
V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlVb2cJIkXWzeQqhiDweZt5DR
nKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q0orezhJki42byFUsYeDzFvI
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
0soeDm6Hj5xFkt5/3kKo8qMz1R4OruEtZDTnKjWuuav6Owb4EXu48Zyp1Bh8
A7aHo4Y93GjuqlRxV4XMXVVafeh7uN1nLrwLezhJm/MWQhV7OMi8hYzmXKWG
PRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxdVVrZw8E+9nCSNucthCr2cJB5CxnN
uUoNezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm7qrSyh4N97OEkbc5bCFXs4SDz
FjKac5Ua9nCQ2cON50ylhj0cZPZwo7mrUsVdFTJ3VWllDwf72MNJ2py3EKrY
w0HmLWQ05yo17OEgs4cbz5lKDXs4yOzhRnNXpYq7KmTuqtLKHg72sYeTtDlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaWVPRzsYw8n
aXPeQqhiDweZt5DRnKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q0orezjY
xx5O0ua8hVDFHg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV5VW
9nCwjz2cpM15C6GKPRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0Lm
riqt7OFgH3s4SZvzFkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRx
V4XMXVVa2cPBPvZwkjbnLYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHc
VanirgqZu6q0soeDfezhJG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2
cKO5q1LFXRUyd1VpZQ8H+9jDSdqctxCq2MNB5i1kNOcqNezhILOHG8+ZSg17
OMjs4UZzV6WKuypk7qrSyh4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54z
lRr2cJDZw43mrkoVd1XI3FWllT0c7GMPJ2lz3kKoYg8HmbeQ0Zyr1LCHg8we
bjxnKjXs4SCzhxvNXZUq7qqQuatKK3s42MceTtLmvIVQxR4OMm8hozlXqWEP
B5k93HjOVGrYw0FmDzeauypV3FUhc1eVVvZwsI89nKTNeQuhij0cZN5CRnOu
UsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4qrezhYB97OEmb8xZCFXs4yLyF
jOZcpYY9HGT2cOM5U6lhDweZPdxo7qpUcVeFzF1VWtnDwT72cJI25y2EKvZw
kHkLGc25Sg17OMjs4cZzplLDHg4ye7jR3FWp4q4KmbuqtLKHg33s4SRtzlsI
VezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUPB/vYw0na
nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0soeDvax
h5O0OW8hVLGHg8xbyGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdVyNxVpZU9
HOxjDydpc95CqGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6qkLmr
Sit7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxV
IXNXlVb2cLCPPZykzXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdV
qrirQuauKq3s4WAfezhJm/MWQhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8HmT3c
aO6qVHFXhcxdVVrZw8E+9nCSNucthCr2cJB5CxnNuUoNezjI7OHGc6ZSwx4O
Mnu40dxVqeKuCpm7qrSyh4N97OEkbc5bCFXs4SDzFjKac5Ua9nCQ2cON50yl
hj0cZPZwo7mrUsVdFTJ3VWllDwf72MNJ2py3EKrYw0HmLWQ05yo17OEgs4cb
z5lKDXs4yOzhRnNXpYq7KmTuqtLKHg72sYeTtDlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaWVPRzsYw8naXPeQqhiDweZt5DRnKvU
sIeDzB5uPGcqNezhILOHG81dlSruqpC5q0orezjYxx5O0ua8hVDFHg4ybyGj
OVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV5VW9nCwjz2cpM15C6GKPRxk
3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0Lmriqt7OFgH3s4SZvzFkIV
ezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cPBPvZwkjbn
LYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu6q0soeDfezh
JG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd1VpZQ8H
+9jDSdqctxCq2MNB5i1kNOcqNezhILOHG8+ZSg17OMjs4UZzV6WKuypk7qrS
yh4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoVd1XI
3FWllT0c7GMPJ2lz3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCzhxvNXZUq
7qqQuatKK3s42MceTtLmvIVQxR4OMm8hozlXqWEPB5k93HjOVGrYw0FmDzea
uypV3FUhc1eVVvZwsI89nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGcqdSwh4PM
Hm40d1WquKtC5q4qrezhYB97OEmb8xZCFXs4yLyFjOZcpYY9HGT2cOM5U6lh
DweZPdxo7qpUcVeFzF1VWtnDwT72cJI25y2EKvZwkHkLGc25Sg17OMjs4cZz
plLDHg4ye7jR3FWp4q4KmbuqtLKHg33s4SRtzlsIVezhIPMWMppzlRr2cJDZ
w43nTKWGPRxk9nCjuatSxV0VMndVafXDHu4D2sXZw1HDHk7S5ryFUMUeDjJv
IaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlVb2cLCPPZykzXkLoYo9
HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuauKq3s4WAfezhJm/MW
QhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxdVVp9QDu4H7KH
o4Y9nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4q
rezhYB97OEmb8xZCFXs4yLyFjOZcpYY9HGT2cOM5U6lhDweZPdxo7qpUcVeF
zF1VWtnDwT72cJI25y2EKvZwkHkLGc25Sg17OMjs4cZzplLDHg4ye7jR3FWp
4q4KmbuqtLKHg33s4SRtzlsIVezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCj
uatSxV0VMndVaWUPB/vYw0nanLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI
7OFGc1elirsqZO6q0soeDvaxh5O0OW8hVLGHg8xbyGjOVWrYw0FmDzeeM5Ua
9nCQ2cON5q5KFXdVyNxVpZU9HOxjDydpc95CqGIPB5m3kNGcq9Swh4PMHm48
Zyo17OEgs4cbzV2VKu6qkLmrSit7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZ
Pdx4zlRq2MNBZg83mrsqVdxVIXNXlVb2cLCPPZykzXkLoYo9HGTeQkZzrlLD
Hg4ye7jxnKnUsIeDzB5uNHdVqrirQuauKq3s4WAfezhJm/MWQhV7OMi8hYzm
XKWGPRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxdVVrZw8E+9nCSNucthCr2cJB5
CxnNuUoNezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm7qrSyh4N97OEkbc5bCFXs
4SDzFjKac5Ua9nCQ2cON50ylhj0cZPZwo7mrUsVdFTJ3VWllDwf72MNJ2py3
EKrYw0HmLWQ05yo17OEgs4cbz5lKDXs4yOzhRnNXpYq7KmTuqtLKHg72sYeT
tDlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaWVPRzs
Yw8naXPeQqhiDweZt5DRnKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q0or
ezjYxx5O0ua8hVDFHg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFz
V5VW9nCwjz2cpM15C6GKPRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4
q0Lmriqt7OFgH3s4SZvzFkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93Gju
qlRxV4XMXVVa2cPBPvZwkjbnLYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7
uNHcVanirgqZu6q0soeDfezhJG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9
HGT2cKO5q1LFXRUyd1VpZQ8H+9jDSdqctxCq2MNB5i1kNOcqNezhILOHG8+Z
Sg17OMjs4UZzV6WKuypk7qrSyh4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYP
N54zlRr2cJDZw43mrkoVd1XI3FWllT0c7GMPJ2lz3kKoYg8HmbeQ0Zyr1LCH
g8webjxnKjXs4SCzhxvNXZUq7qqQuatKK3s42MceTtLmvIVQxR4OMm8hozlX
qWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1eVVvZwsI89nKTNeQuhij0cZN5C
RnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4qrezhYB97OEmb8xZCFXs4
yLyFjOZcpYY9HGT2cOM5U6lhDweZPdxo7qpUcVeFzF1VWtnDwT72cJI25y2E
KvZwkHkLGc25Sg17OMjs4cZzplLDHg4ye7jR3FWp4q4KmbuqtLKHg33s4SRt
zlsIVezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUPB/vY
w0nanLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0soe
Dvaxh5O0OW8hVLGHg8xbyGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdVyNxV
pZU9HOxjDydpc95CqGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6q
kLmrSit7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsq
VdxVIXNXlVb2cLCPPZykzXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5u
NHdVqrirQuauKq3s4WAfezhJm/MWQhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8H
mT3caO6qVHFXhcxdVVrZw8E+9nCSNucthCr2cJB5CxnNuUoNezjI7OHGc6ZS
wx4OMnu40dxVqeKuCpm7qrSyh4N97OEkbc5bCFXs4SDzFjKac5Ua9nCQ2cON
50ylhj0cZPZwo7mrUsVdFTJ3VWllDwf72MNJ2py3EKrYw0HmLWQ05yo17OEg
s4cbz5lKDXs4yOzhRnNXpYq7KmTuqtLKHg72sYeTtDlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaWVPRzsYw8naXPeQqhiDweZt5DR
nKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q0orezjYxx5O0ua8hVDFHg4y
byGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV5VW9nCwjz2cpM15C6GK
PRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0Lmriqt7OFgH3s4SZvz
FkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cPBPvZw
kjbnLYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu6q0soeD
fezhJG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd1Vp
ZQ8H+9jDSdqctxCq2MNB5i1kNOcqNezhILOHG8+ZSg17OMjs4UZzV6WKuypk
7qrSyh4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoV
d1XI3FWllT0c7GMPJ2lz3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCzhxvN
XZUq7qqQuatKK3s42MceTtLmvIVQxR4OMm8hozlXqWEPB5k93HjOVGrYw0Fm
DzeauypV3FUhc1eVVvZwsI89nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGcqdSw
h4PMHm40d1WquKtC5q4qrezhYB97OEmb8xZCFXs4yLyFjOZcpYY9HGT2cOM5
U6lhDweZPdxo7qpUcVeFzF1VWtnDwT72cJI25y2EKvZwkHkLGc25Sg17OMjs
4cZzplLDHg4ye7jR3FWp4q4KmbuqtLKHg33s4SRtzlsIVezhIPMWMppzlRr2
cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUPB/vYw0nanLcQqtjDQeYtZDTn
KjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0soeDvaxh5O0OW8hVLGHg8xb
yGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdVyNxVpZU9HOxjDydpc95CqGIP
B5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6qkLmrSit7ONjHHk7S5ryF
UMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlVb2cLCPPZyk
zXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuauKq3s4WAf
ezhJm/MWQhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxdVVrZ
w8E+9nCSNucthCr2cJB5CxnNuUoNezjI7OHGc6ZSwx4OMnu40dxVqeKuCpm7
qrSyh4N97OEkbc5bCFXs4SDzFjKac5Ua9nCQ2cON50ylhj0cZPZwo7mrUsVd
FTJ3VWllDwf72MNJ2py3EKrYw0HmLWQ05yo17OEgs4cbz5lKDXs4yOzhRnNX
pYq7KmTuqtLKHg72sYeTtDlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaWVPRzsYw8naXPeQqhiDweZt5DRnKvUsIeDzB5uPGcqNezh
ILOHG81dlSruqpC5q0orezjYxx5O0ua8hVDFHg4ybyGjOVepYQ8HmT3ceM5U
atjDQWYPN5q7KlXcVSFzV5VW9nCwjz2cpM15C6GKPRxk3kJGc65Swx4OMnu4
8Zyp1LCHg8webjR3Vaq4q0Lmriqt7OFgH3s4SZvzFkIVezjIvIWM5lylhj0c
ZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cPBPvZwkjbnLYQq9nCQeQsZzblK
DXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu6q0soeDfezhJG3OWwhV7OEg8xYy
mnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd1VpZQ8H+9jDSdqctxCq2MNB
5i1kNOcqNezhILOHG8+ZSg17OMjs4UZzV6WKuypk7qrSyh4O9rGHk7Q5byFU
sYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoVd1XI3FWllT0c7GMPJ2lz
3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCzhxvNXZUq7qqQuatKK3s42Mce
TtLmvIVQxR4OMm8hozlXqWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1eVVvZw
sI89nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4q
rezhYB97OEmb8xZCFXs4yLyFjOZcpYY9HGT2cOM5U6lhDweZPdxo7qpUcVeF
zF1VWtnDwT72cJI25y2EKvZwkHkLGc25Sg17OMjs4cZzplLDHg4ye7jR3FWp
4q4KmbuqtPphD/cB7eLs4ahhDydpc95CqGIPB5m3kNGcq9Swh4PMHm48Zyo1
7OEgs4cbzV2VKu6qkLmrSit7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4
zlRq2MNBZg83mrsqVdxVIXNXlVYf0A7uh+zhqGEPJ2lz3kKoYg8HmbeQ0Zyr
1LCHg8webjxnKjXs4SCzhxvNXZUq7qqQuatKK3s42MceTtLmvIVQxR4OMm8h
ozlXqWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1eVVvZwsI89nKTNeQuhij0c
ZN5CRnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q4qrezhYB97OEmb8xZC
FXs4yLyFjOZcpYY9HGT2cOM5U6lhDweZPdxo7qpUcVeFzF1VWtnDwT72cJI2
5y2EKvZwkHkLGc25Sg17OMjs4cZzplLDHg4ye7jR3FWp4q4KmbuqtLKHg33s
4SRtzlsIVezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUP
B/vYw0nanLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q
0soeDvaxh5O0OW8hVLGHg8xbyGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdV
yNxVpZU9HOxjDydpc95CqGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2V
Ku6qkLmrSit7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83
mrsqVdxVIXNXlVb2cLCPPZykzXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeD
zB5uNHdVqrirQuauKq3s4WAfezhJm/MWQhV7OMi8hYzmXKWGPRxk9nDjOVOp
YQ8HmT3caO6qVHFXhcxdVVrZw8E+9nCSNucthCr2cJB5CxnNuUoNezjI7OHG
c6ZSwx4OMnu40dxVqeKuCpm7qrSyh4N97OEkbc5bCFXs4SDzFjKac5Ua9nCQ
2cON50ylhj0cZPZwo7mrUsVdFTJ3VWllDwf72MNJ2py3EKrYw0HmLWQ05yo1
7OEgs4cbz5lKDXs4yOzhRnNXpYq7KmTuqtLKHg72sYeTtDlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaWVPRzsYw8naXPeQqhiDweZ
t5DRnKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q0orezjYxx5O0ua8hVDF
Hg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV5VW9nCwjz2cpM15
C6GKPRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0Lmriqt7OFgH3s4
SZvzFkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cPB
PvZwkjbnLYQq9nCQeQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu6q0
soeDfezhJG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUy
d1VpZQ8H+9jDSdqctxCq2MNB5i1kNOcqNezhILOHG8+ZSg17OMjs4UZzV6WK
uypk7qrSyh4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43m
rkoVd1XI3FWllT0c7GMPJ2lz3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCz
hxvNXZUq7qqQuatKK3s42MceTtLmvIVQxR4OMm8hozlXqWEPB5k93HjOVGrY
w0FmDzeauypV3FUhc1eVVvZwsI89nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGc
qdSwh4PMHm40d1WquKtC5q4qrezhYB97OEmb8xZCFXs4yLyFjOZcpYY9HGT2
cOM5U6lhDweZPdxo7qpUcVeFzF1VWtnDwT72cJI25y2EKvZwkHkLGc25Sg17
OMjs4cZzplLDHg4ye7jR3FWp4q4KmbuqtLKHg33s4SRtzlsIVezhIPMWMppz
lRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMndVaWUPB/vYw0nanLcQqtjDQeYt
ZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0soeDvaxh5O0OW8hVLGH
g8xbyGjOVWrYw0FmDzeeM5Ua9nCQ2cON5q5KFXdVyNxVpZU9HOxjDydpc95C
qGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6qkLmrSit7ONjHHk7S
5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlVb2cLCP
PZykzXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuauKq3s
4WAfezhJm/MWQhV7OMi8hYzmXKWGPRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxd
VVrZw8E+9nCSNucthCr2cJB5CxnNuUoNezjI7OHGc6ZSwx4OMnu40dxVqeKu
Cpm7qrSyh4N97OEkbc5bCFXs4SDzFjKac5Ua9nCQ2cON50ylhj0cZPZwo7mr
UsVdFTJ3VWllDwf72MNJ2py3EKrYw0HmLWQ05yo17OEgs4cbz5lKDXs4yOzh
RnNXpYq7KmTuqtLKHg72sYeTtDlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaWVPRzsYw8naXPeQqhiDweZt5DRnKvUsIeDzB5uPGcq
NezhILOHG81dlSruqpC5q0orezjYxx5O0ua8hVDFHg4ybyGjOVepYQ8HmT3c
eM5UatjDQWYPN5q7KlXcVSFzV5VW9nCwjz2cpM15C6GKPRxk3kJGc65Swx4O
Mnu48Zyp1LCHg8webjR3Vaq4q0Lmriqt7OFgH3s4SZvzFkIVezjIvIWM5lyl
hj0cZPZw4zlTqWEPB5k93GjuqlRxV4XMXVVa2cPBPvZwkjbnLYQq9nCQeQsZ
zblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu6q0soeDfezhJG3OWwhV7OEg
8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd1VpZQ8H+9jDSdqctxCq
2MNB5i1kNOcqNezhILOHG8+ZSg17OMjs4UZzV6WKuypk7qrSyh4O9rGHk7Q5
byFUsYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoVd1XI3FWllT0c7GMP
J2lz3kKoYg8HmbeQ0Zyr1LCHg8webjxnKjXs4SCzhxvNXZUq7qqQuatKK3s4
2MceTtLmvIVQxR4OMm8hozlXqWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1ft
79WrV5+8fPnyF//p+++///n09z2+x9OnTz99/Pjx737w5MmT3z579uw37+P7
v2n2cLCPPZykzXkLoYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrir
Quau2t2xffth5/Wf7ty586+J73d1dfWzBw8e/Om673mdr7766s/Hzzjxs7xp
9nCwjz2cpM15C6GKPRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0Lm
rtrdTTu0zz///B/n/D5XV1cf379//5vX3cFd9/Mcv8funD/Tm2YPB/vYw0na
nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6qvR2/e+19
7OFevHjxq7fdwf3Y8Zmq5/q53jR7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZ
Pdx4zlRq2MNBZg83mrsqVdxVIXNX7ezZs2e/Sb+P7X18n7fx8OHDP5zjZ3vT
7OFgH3s4SZvzFkIVezjIvIWM5lylhj0cZPZw4zlTqWEPB5k93GjuqlRxV4XM
XbWvq6urn7zO55O+6/d5+fLlL869hfvB06dPPz3Hf4s3yR4O9rGHk7Q5byFU
sYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoVd1XI3FX7unv37t/fxx7u
dXZtX3/99X9/9913v7y6uvrpv338/fff//z4/W+v82f/3c/O8d/jTf993uf3
fMfs4ahhDydpc95CqGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6q
kLmrdvX48ePfvc7W7F33cF999dWfT339439+6s8f27gvvvjib6e+xmefffbP
d/kZ3zR7ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq2MNBZg83mrsq
VdxVIXNX7en43Wuv+3mk77KHS9/n+J1wr/u1Hjx48Kfb8rmp9nCwjz2cpM15
C6GKPRxk3kJGc65Swx4OMnu48Zyp1LCHg8webjR3Vaq4q0LmrtrT8fvU3sce
7ssvv/zrTV/3+J1vb/r1Tv2uuff5O+Ls4WAfezhJm/MWQhV7OMi8hYzmXKWG
PRxk9nDjOVOpYQ8HmT3caO6qVHFXhcxdtaP0e9bOtYe7urr6yamv+7Y///Hz
3PQ1X7169cnbft03yR4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54zlRr2
cJDZw43mrkoVd1XI3FU//F68ePGrUxu1O3fu/Otce7hHjx79/qbv8+233/7x
bf8dvvvuu1/e9HWPrd/bft03yR4O9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYP
N54zlRr2cJDZw43mrkoVd1XI3FU//G7akR2fa3rv3r0X5/z9cKc+k/Xf/exd
/j2u2+29z42aPRzsYw8naXPeQqhiDweZt5DRnKvUsIeDzB5uPGcqNezhILOH
G81dlSruqpC5q37YHZu3Uxuymz6H9G32cKc+K/XYyb3rv8v9+/e/2fmZqfZw
sI89nKTNeQuhij0cZN5CRnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q76
4faXv/zlv27ajz1//vzXxz9zzj3cqc9lPcdnmh4/801f/+HDh39416+fsoeD
fezhJG3OWwhV7OEg8xYymnOVGvZwkNnDjedMpYY9HGT2cKO5q1LFXRUyd9UP
s6urq5/etB07fs/aD//cOfdw33777R/T/u4d/51u/P1zd+/e/fu7fv2UPRzs
Yw8naXPeQqhiDweZt5DRnKvUsIeDzB5uPGcqNezhILOHG81dlSruqpC5q36Y
3bRz+/Ge65x7uFOfzXrs887x73V87up1X//OnTv/OsfXP5U9HOxjDydpc95C
qGIPB5m3kNGcq9Swh4PMHm48Zyo17OEgs4cbzV2VKu6qkLmrfngdnx160y7t
5cuXv/jPf/ace7ibtmrn3JAdvwfuxObu43N9n+uyh4N97OEkbc5bCFXs4SDz
FjKac5Ua9nCQ2cON50ylhj0cZPZwo7mrUsVdFTJ31Q+rV69efXLTXuz4PNMf
//Pn2sOd+izTt9nW3dTXX3/93yf2cD871/e5Lns42MceTtLmvIVQxR4OMm8h
ozlXqWEPB5k93HjOVGrYw0FmDzeauypV3FUhc1f9sDo+N/S6rdjxu9uu++fP
uIf7+Kad2vE73c7zb/fRRw8ePPjTTd/n+fPnvz7X97kuezjYxx5O0ua8hVDF
Hg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV/1wun///jc3bcW+
//77n1/3Z97H74c7fqfbef4NP/ro6dOnn970fV68ePGrc32f67KHg33s4SRt
zlsIVezhIPMWMppzlRr2cJDZw43nTKWGPRxk9nCjuatSxV0VMnfVD6Pjd6Pd
tBN7/Pjx7276c+faw536/ufcwx2bt5u+z7Nnz35zru9zXfZwsI89nKTNeQuh
ij0cZN5CRnOuUsMeDjJ7uPGcqdSwh4PMHm40d1WquKtC5q56+3uXzyo91x7u
1E7tfe3hjs9SPdf3uS57ONjHHk7S5ryFUMUeDjJvIaM5V6lhDweZPdx4zlRq
2MNBZg83mrsqVdxVIXNXvf3du3fvxU0bseNzTE/92fexhzvnTu197e6uyx4O
9rGHk7Q5byFUsYeDzFvIaM5VatjDQWYPN54zlRr2cJDZw43mrkoVd1XI3FVv
d0+ePPntTfuwp0+ffpr+/PvYw53zc0zt4d4oezhq2MNJ2py3EKrYw0HmLWQ0
5yo17OEgs4cbz5lKDXs4yOzhRnNXpYq7KmTuqre3q6urn920Dfvyyy//+jpf
433s4Z4/f/7rt/oXfMPv8772cP9p8vudIXs4atjDSdqctxCq2MNB5i1kNOcq
NezhILOHG8+ZSg17OMjs4UZzV/0/7N0xq5b52fZtJgQCgRQpUqVJlS5dypRp
006dTrxFBpEMCMIEQWxuhiknjWUsp5hPEP0C6SxTWecj+MzF+QjDjevaXXod
Hst9th9sxfu8d3QlzZ/jZMdFFbcqZG7Vm9vt27f/c9U27F3/jEvt4Z4/f/6b
n8q/D2cPBx+fPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5V
qrhVIXOr3sxO26+rdmGnzdi7/jmX2sOd/g24S/w8KXu4a2UPRw17OEnL+RZC
FXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5la9eb148eLXV23C
Hjx48Pfr/Fkf4/elfv3113++1n/B9/x7Hj58+LdL/T1v6xPZwP04ezhq2MNJ
Ws63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK36s3rqj3Y
rVu3/nvdP+tj7OEuuVM79/c8fvz480v9PW/LHg722MNJWs63EKrYw0HmW8ho
3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK36s3q/v37/7hqD/by5ctfXffP
+xi/L/WSv8f03B7ukr+X9W3Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG
86ZSwx4OMnu40dyqVHGrQuZWvTk9ffr0D5f+t9EutYd7/vz5b+zhblz2cNSw
h5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG7Vm9Hr
169/dtUO7M1G64f/m8+u4/SfuX379n/e9ued/t+v+jOv+Pk++xi/L/W0rbOH
e+fs4ahhDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5V
yNyqN6Nzv4/0Y3vbv/d2bg/3Zlt3ic7t4U7/G13q73lb9nCwxx5O0nK+hVDF
Hg4y30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VW9G535P6E3Yw526
6t+au+7vXj3X/fv3/3HVz/VDP7/U3/O27OFgjz2cpOV8C6GKPRxkvoWM5l2l
hj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq96MPoU93N27d/91Zqv21t+zet2u
2tzdunXrv5f4889lDwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4
yOzhRnOrUsWtCplb9Wb0Kezhzv0u05cvX/7qQ/83OPc7WU9bvA/981P2cLDH
Hk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVb0af
wh7u6dOnf7jqP/PNN9/86UP/N3jx4sWvr/szXTJ7ONhjDydpOd9CqGIPB5lv
IaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyqN6NPYQ/3+vXrX1z1n7l3
794/P/R/g8ePH39+1Z//7Nmz33/on5+yh4M99nCSlvMthCr2cJD5FjKad5Ua
9nCQ2cON502lhj0cZPZwo7lVqeJWhcytenM6/b7QSzr9mbdu3frv2/Zlp//3
q/7Ocz/j7du3/3PVZu1D//vfuXPn31f92T/08w/981P2cLDHHk7Scr6FUMUe
DjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVu7tqY3b6f3+fP+/R
o0d/vWqzdvo37t735zzt3a76c9/3Z71u9nCwxx5O0nK+hVDFHg4y30JG865S
wx4OMnu48byp1LCHg8webjS3KlXcqpC5Vbu79B7u1atXv7xqt3b37t1/ve/P
+eDBg79f9ed+++23f3zfP/c62cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzh
xvOmUsMeDjJ7uNHcqlRxq0LmVu3u0nu4U+d+Z+rjx48/v+6f9+zZs99f9ed9
zH2aPRzssYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3
KmRu1e4m9nCnf6/t3H7tm2+++dO7/lnPnz//zbk/66uvvvqf9/05r5s9HOyx
h5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG7V7ib2
cKfObdhOnjx58pf0Z6R/F+7khz77kJ/zOtnDwR57OEnL+RZCFXs4yHwLGc27
Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5lbtbmoP9/Tp0z+kLdsXX3zx/atX
r375f/+zr1+//vmXX375v+k/f/p36D7kZ7xu9nCwxx5O0nK+hVDFHg4y30JG
865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5Vbub2sOdevDgwd/Tpu3k9u3b
/7l///4/Tq76ef6v0//tJf77Xyd7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZ
Pdx43lRq2MNBZg83mluVKm5VyNyq3U3u4U7du3fvn++yb7uO037uEj/bdbOH
gz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK3a
3fQe7tTp33K71Bbu7t27/7rUz3Xd7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0c
ZPZw43lTqWEPB5k93GhuVaq4VSFzq3Z3+rfWPsa/wfb111//+UO3cE+ePPnL
JX+m62YPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tS
xa0KmVu1u9O/t/ax/h22169f/+yrr776n+vu4B4+fPi303/20j/PdbOHgz32
cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK2qiV68
ePHrx48ff376Xaqn7d3p97O+cfr/Pm3gnj179vvtn/PH2cPBHns4Scv5FkIV
ezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRxq0LmVpWO7OFgjz2cpOV8
C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O
0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjY
Yw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtKR
PRzssYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3KmRu
VenIHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpb
FTK3qnRkDwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOr
UsWtCplbVTqyh4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502lhj0cZPZw
o7lVqeJWhcytKh3Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4O
Mnu40dyqVHGrQuZWlY7s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOp
YQ8HmT3caG5VqrhVIXOrSkf2cLDHHk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jx
vKnUsIeDzB5uNLcqVdyqkLlVpSN7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZ
Pdx43lRq2MNBZg83mluVKm5VyNyq0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Sw
h4PMHm48byo17OEgs4cbza1KFbcqZG5V6cgeDvbYw0lazrcQqtjDQeZbyGje
VWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMt
ZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZw
kPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZC
FXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTl
fAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMce
TtJyvoVQxR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s4
2GMPJ2k530KoYg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrS
kT0c7LGHk7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypk
blXpyB4O9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWK
WxUyt6p0ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZz
q1LFrQqZW1U6soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2
cKO5VaniVoXMrSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMe
DjJ7uNHcqlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lT
qWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu4
8byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8H
mT3ceN5UatjDQWYPN5pblSpuVcjcqtKRPRzssYeTtJxvIVSxh4PMt5DRvKvU
sIeDzB5uPG8qNezhILOHG82tShW3KmRuVenIHg722MNJWs63EKrYw0HmW8ho
3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd77OEkLedbCFXs4SDz
LWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplbVTqyh4M99nCSlvMthCr2
cJD5FjKad5Ua9nCQ2cON502lhj0cZPZwo7lVqeJWhcytKh3Zw8EeezhJy/kW
QhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWlY7s4WCPPZyk
5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhVIXOrSkf2cLDH
Hk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVpSN7
ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyq
0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcq
ZG5V6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lal
ilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFG
c6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk
9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLD
Hg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuhij0cZL6FjOZdpYY9HGT2cON5
U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJyvoVQxR4OMt9CRvOuUsMeDjJ7
uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMPJ2k530KoYg8HmW8ho3lXqWEP
B5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c7LGHk7ScbyFUsYeDzLeQ0byr
1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXpyB4O9tjDSVrOtxCq2MNB5lvI
aN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt6p0ZA8He+zhJC3nWwhV7OEg
8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LFrQqZW1U6soeDPfZwkpbzLYQq
9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5VaniVoXMrSod2cPBHns4Scv5
FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRxq0LmVpWO7OFgjz2c
pOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCw
xx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUj
ezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjc
qtLRmz3cJ7SLs4ejhj2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k9
3GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCH
g8webjS3KlXcqpC5VaWjT2gH9yZ7OGrYw0lazrcQqtjDQeZbyGjeVWrYw0Fm
DzeeN5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs
4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3
lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4yHwL
Gc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuhij0c
ZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJyvoVQ
xR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMPJ2k5
30KoYg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c7LGH
k7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXpyB4O
9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt6p0
ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LFrQqZ
W1U6soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5Vani
VoXMrSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHc
qlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k9
3GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCH
g8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5U
atjDQWYPN5pblSpuVcjcqtKRPRzssYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5u
PG8qNezhILOHG82tShW3KmRuVenIHg722MNJWs63EKrYw0HmW8ho3lVq2MNB
Zg83njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd77OEkLedbCFXs4SDzLWQ07yo1
7OEgs4cbz5tKDXs4yOzhRnOrUsWtCplbVTqyh4M99nCSlvMthCr2cJD5FjKa
d5Ua9nCQ2cON502lhj0cZPZwo7lVqeJWhcytKh3Zw8EeezhJy/kWQhV7OMh8
CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWlY7s4WCPPZyk5XwLoYo9
HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhVIXOrSkf2cLDHHk7Scr6F
UMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVpSN7ONhjDydp
Od9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyq0pE9HOyx
h5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG5V6cge
DvbYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMreq
dGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tSxa0K
mVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp
4laFzK0qHdnDwR57OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR
3KpUcatC5laVjuzhYI89nKTlfAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZ
PdxoblWquFUhc6tKR/ZwsMceTtJyvoVQxR4OMt9CRvOuUsMeDjJ7uPG8qdSw
h4PMHm40typV3KqQuVWlI3s42GMPJ2k530KoYg8HmW8ho3lXqWEPB5k93Hje
VGrYw0FmDzeaW5UqblXI3KrSkT0c7LGHk7ScbyFUsYeDzLeQ0byr1LCHg8we
bjxvKjXs4SCzhxvNrUoVtypkblXpyB4O9tjDSVrOtxCq2MNB5lvIaN5VatjD
QWYPN543lRr2cJDZw43mVqWKWxUyt6p0ZA8He+zhJC3nWwhV7OEg8y1kNO8q
NezhILOHG8+bSg17OMjs4UZzq1LFrQqZW1U6soeDPfZwkpbzLYQq9nCQ+RYy
mneVGvZwkNnDjedNpYY9HGT2cKO5VaniVoXMrSod2cPBHns4Scv5FkIVezjI
fAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRxq0LmVpWO7OFgjz2cpOV8C6GK
PRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+
hVDFHg4y30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8n
aTnfQqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtKRPRzs
sYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3KmRuVenI
Hg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3
qnRkDwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWt
CplbVTqyh4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502lhj0cZPZwo7lV
qeJWhcytKh3Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu4
0dyqVHGrQuZWlY7s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8H
mT3caG5VqrhVIXOrSkf2cLDHHk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnU
sIeDzB5uNLcqVdyqkLlVpSN7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx4
3lRq2MNBZg83mluVKm5VyNyq0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PM
Hm48byo17OEgs4cbza1KFbcqZG5V6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrY
w0FmDzeeN5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTv
KjXs4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkW
Mpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4
yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuh
ij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJy
voVQxR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMP
J2k530KoYg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c
7LGHk7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXp
yB4O9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUy
t6p0ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LF
rQqZW1U6soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5
VaniVoXMrSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7
uNHcqlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEP
B5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp
1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3c
eN5UatjDQWYPN5pblSpuVcjcqtKRPRzssYeTtJxvIVSxh4PMt5DRvKvUsIeD
zB5uPG8qNezhILOHG82tShW3KmRuVenIHg722MNJWs63EKrYw0HmW8ho3lVq
2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd77OEkLedbCFXs4SDzLWQ0
7yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplbVTqyh4M99nCSlvMthCr2cJD5
FjKad5Ua9nCQ2cON502lhj0cZPZwo7lVqeJWhcytKh3Zw8EeezhJy/kWQhV7
OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWlY7s4WCPPZyk5XwL
oYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhVIXOrSkf2cLDHHk7S
cr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVpSN7ONhj
DydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyq0pE9
HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG5V
6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsV
MreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tS
xa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCj
uVWp4laFzK0qHb3Zw31Cuzh7OGrYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzee
N5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCz
hxvPm0oNezjI7OFGc6tSxa0KmVtVOvqEdnBvsoejhj2cpOV8C6GKPRxkvoWM
5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y
30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhi
DweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtKRPRzssYeTtJxv
IVSxh4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3KmRuVenIHg722MNJ
Ws63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd7
7OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplbVTqy
h4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502lhj0cZPZwo7lVqeJWhcyt
Kh3Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGr
QuZWlY7s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5V
qrhVIXOrSkf2cLDHHk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5u
NLcqVdyqkLlVpSN7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNB
Zg83mluVKm5VyNyq0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo1
7OEgs4cbza1KFbcqZG5V6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzee
N5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCz
hxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2
cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4yHwLGc27
Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuhij0cZL6F
jOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJyvoVQxR4O
Mt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMPJ2k530Ko
Yg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c7LGHk7Sc
byFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXpyB4O9tjD
SVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt6p0ZA8H
e+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LFrQqZW1U6
soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5VaniVoXM
rSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRx
q0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93Ghu
Vaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCHg8we
bjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5UatjD
QWYPN5pblSpuVcjcqtKRPRzssYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8q
NezhILOHG82tShW3KmRuVenIHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83
njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd77OEkLedbCFXs4SDzLWQ07yo17OEg
s4cbz5tKDXs4yOzhRnOrUsWtCplbVTqyh4M99nCSlvMthCr2cJD5FjKad5Ua
9nCQ2cON502lhj0cZPZwo7lVqeJWhcytKh3Zw8EeezhJy/kWQhV7OMh8CxnN
u0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWlY7s4WCPPZyk5XwLoYo9HGS+
hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhVIXOrSkf2cLDHHk7Scr6FUMUe
DjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVpSN7ONhjDydpOd9C
qGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyq0pE9HOyxh5O0
nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG5V6cgeDvbY
w0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMreqdGQP
B3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtV
OrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laF
zK0qHdnDwR57OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpU
catC5laVjuzhYI89nKTlfAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxo
blWquFUhc6tKR/ZwsMceTtJyvoVQxR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PM
Hm40typV3KqQuVWlI3s42GMPJ2k530KoYg8HmW8ho3lXqWEPB5k93HjeVGrY
w0FmDzeaW5UqblXI3KrSkT0c7LGHk7ScbyFUsYeDzLeQ0byr1LCHg8webjxv
KjXs4SCzhxvNrUoVtypkblXpyB4O9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYP
N543lRr2cJDZw43mVqWKWxUyt6p0ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezh
ILOHG8+bSg17OMjs4UZzq1LFrQqZW1U6soeDPfZwkpbzLYQq9nCQ+RYymneV
GvZwkNnDjedNpYY9HGT2cKO5VaniVoXMrSod2cPBHns4Scv5FkIVezjIfAsZ
zbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxk
voWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDF
Hg4y30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnf
QqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtKRPRzssYeT
tJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3KmRuVenIHg72
2MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3qnRk
Dwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplb
VTqyh4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502lhj0cZPZwo7lVqeJW
hcytKh3Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyq
VHGrQuZWlY7s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3c
aG5VqrhVIXOrSkf2cLDHHk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeD
zB5uNLcqVdyqkLlVpSN7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq
2MNBZg83mluVKm5VyNyq0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48
byo17OEgs4cbza1KFbcqZG5V6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrYw0Fm
DzeeN5Ua9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs
4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3
lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4yHwL
Gc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuhij0c
ZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJyvoVQ
xR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMPJ2k5
30KoYg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c7LGH
k7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXpyB4O
9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt6p0
ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LFrQqZ
W1U6soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5Vani
VoXMrSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHc
qlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k9
3GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCH
g8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5U
atjDQWYPN5pblSpuVcjcqtLRmz3cJ7SLs4ejhj2cpOV8C6GKPRxkvoWM5l2l
hj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG
865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZ
byGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtLRJ7SDe5M9HDXs4SQt
51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tSxa0KmVtVOrKHgz32
cJKW8y2EKvZwkPkWMpp3lRr2cJDZw43nTaWGPRxk9nCjuVWp4laFzK0qHdnD
wR57OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC5laV
juzhYI89nKTlfAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUh
c6tKR/ZwsMceTtJyvoVQxR4OMt9CRvOuUsMeDjJ7uPG8qdSwh4PMHm40typV
3KqQuVWlI3s42GMPJ2k530KoYg8HmW8ho3lXqWEPB5k93HjeVGrYw0FmDzea
W5UqblXI3KrSkT0c7LGHk7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCz
hxvNrUoVtypkblXpyB4O9tjDSVrOtxCq2MNB5lvIaN5VatjDQWYPN543lRr2
cJDZw43mVqWKWxUyt6p0ZA8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+b
Sg17OMjs4UZzq1LFrQqZW1U6soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnD
jedNpYY9HGT2cKO5VaniVoXMrSod2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4
yOzhxvOmUsMeDjJ7uNHcqlRxq0LmVpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2l
hj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG
865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VaUjezjYYw8naTnfQqhiDweZ
byGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqtKRPRzssYeTtJxvIVSx
h4PMt5DRvKvUsIeDzB5uPG8qNezhILOHG82tShW3KmRuVenIHg722MNJWs63
EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpbFTK3qnRkDwd77OEk
LedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplbVTqyh4M9
9nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502lhj0cZPZwo7lVqeJWhcytKh3Z
w8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZW
lY7s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhV
IXOrSkf2cLDHHk7Scr6FUMUeDjLfQkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcq
VdyqkLlVpSN7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83
mluVKm5VyNyq0pE9HOyxh5O0nG8hVLGHg8y3kNG8q9Swh4PMHm48byo17OEg
s4cbza1KFbcqZG5V6cgeDvbYw0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua
9nCQ2cON5lalilsVMreqdGQPB3vs4SQt51sIVezhIPMtZDTvKjXs4SCzhxvP
m0oNezjI7OFGc6tSxa0KmVtVOrKHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZ
w43nTaWGPRxk9nCjuVWp4laFzK0qHdnDwR57OEnL+RZCFXs4yHwLGc27Sg17
OMjs4cbzplLDHg4ye7jR3KpUcatC5laVjuzhYI89nKTlfAuhij0cZL6FjOZd
pYY9HGT2cON5U6lhDweZPdxoblWquFUhc6tKR/ZwsMceTtJyvoVQxR4OMt9C
RvOuUsMeDjJ7uPG8qdSwh4PMHm40typV3KqQuVWlI3s42GMPJ2k530KoYg8H
mW8ho3lXqWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3KrSkT0c7LGHk7ScbyFU
sYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkblXpyB4O9tjDSVrO
txCq2MNB5lvIaN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt6p0ZA8He+zh
JC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs4UZzq1LFrQqZW1U6soeD
PfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9HGT2cKO5VaniVoXMrSod
2cPBHns4Scv5FkIVezjIfAsZzbtKDXs4yOzhxvOmUsMeDjJ7uNHcqlRxq0Lm
VpWO7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4
VSFzq0pH9nCwxx5O0nK+hVDFHg4y30JG865Swx4OMnu48byp1LCHg8webjS3
KlXcqpC5VaUjezjYYw8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYP
N5pblSpuVcjcqtKRPRzssYeTtJxvIVSxh4PMt5DRvKvUsIeDzB5uPG8qNezh
ILOHG82tShW3KmRuVenIHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeV
GvZwkNnDjeZWpYpbFTK3qnRkDwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cb
z5tKDXs4yOzhRnOrUsWtCplbVTqyh4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ
2cON502lhj0cZPZwo7lVqeJWhcytKh3Zw8EeezhJy/kWQhV7OMh8CxnNu0oN
ezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWlY7s4WCPPZyk5XwLoYo9HGS+hYzm
XaWGPRxk9nDjeVOpYQ8HmT3caG5VqrhVIXOrSkf2cLDHHk7Scr6FUMUeDjLf
QkbzrlLDHg4ye7jxvKnUsIeDzB5uNLcqVdyqkLlVpSN7ONhjDydpOd9CqGIP
B5lvIaN5V6lhDweZPdx43lRq2MNBZg83mluVKm5VyNyq0pE9HOyxh5O0nG8h
VLGHg8y3kNG8q9Swh4PMHm48byo17OEgs4cbza1KFbcqZG5V6cgeDvbYw0la
zrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMreqdGQPB3vs
4SQt51sIVezhIPMtZDTvKjXs4SCzhxvPm0oNezjI7OFGc6tSxa0KmVv10+/V
q1e//O6773737bff/vHrr7/+8xtPnz79w/fff//b169f/3zr5zr9DD/+mb75
5ps/PXv27Pen/38bP9O57OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lT
qWEPB5k93GhuVaq4VSFzq356vX79+menbdkXX3zx/ZsNV3Lr1q3/fvnll/97
2s0N/2y/ePjw4d/e9ec6/UwvXrz49eTP9K7Zw8EeezhJy/kWQhV7OMh8CxnN
u0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZW/bR68ODB3991a3ZuG3f6N9ou
+XO9fv36sw/52e7cufPvly9f/uqSP9N1s4eDPfZwkpbzLYQq9nCQ+RYymneV
GvZwkNnDjedNpYY9HGT2cKO5VaniVoXMrfppdPp33T50B/d/3bt375+X+NlO
v5P1Uj/T6d+9u8TP9D7Zw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZS
wx4OMnu40dyqVHGrQuZWvfk9fvz480tv4X78b8Wdfv/q+/5sp39n7tI/0+m/
7yX/93vX7OFgjz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93Ghu
Vaq4VSFzq97sTv9e2tQW7sdOv+/0uj/bixcvfj318zx9+vQPE/97nsseDvbY
w0lazrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMrfqze3V
q1e/fJft2J07d/79zTff/On0f3/atf1/Pz/9HtMHDx78/V3+jC+++OL76/58
7/LnfvXVV//z/Pnz35x+ntPPdfoZ3/Xfu/uhX0z875r++3zMv/MDs4ejhj2c
pOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq97cTju3
tBn77rvvfpf+nNPvQ71///4/0p91+t2n7/qzffnll/977s86/f8PP9Nn9+7d
++e5P+P27dv/edef5xLZw8EeezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZS
wx4OMnu40dyqVHGrQuZWvZmdtmmX/vfcvv322z+e+zNv3br133f5c9K/W3f6
N+He9Wd6+PDh327K7021h4M99nCSlvMthCr2cJD5FjKad5Ua9nCQ2cON502l
hj0cZPZwo7lVqeJWhcytejM7bdOu2ojdvXv3X+/7555+r+qH/ntz5/6tudO/
+Xbdn+ncvzX3Mf+NOHs42GMPJ2k530KoYg8HmW8ho3lXqWEPB5k93HjeVGrY
w0FmDzeaW5UqblXI3Ko3r/Tvr/3QLz7kzz/t6T7g95z+7NzP9r4/07nfDfvy
5ctfve+fe53s4WCPPZyk5XwLoYo9HGS+hYzmXaWGPRxk9nDjeVOpYQ8HmT3c
aG5VqrhVIXOr3rzO/V7TtFd7l87t7dLvTH3y5MlfrvrPPnr06K/v+zM9f/78
N1f9uaffqfq+f+51soeDPfZwkpbzLYQq9nCQ+RYymneVGvZwkNnDjedNpYY9
HGT2cKO5VaniVoXMrXrzOu2/rtqGnbZsl/g7Tr+H9My/P/ez9/zPfdC/W3fu
d8R+yJ/7rtnDwR57OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR
3KpUcatC5la9eZ373aE/9NnW33Hud6WednIf+jM9ePDg75u/M9UeDvbYw0la
zrcQqtjDQeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMrfqzWtyc/am
c9uzq/Zw33///W8nf6fpd99997ur/vzHjx9//qF/fsoeDvbYw0lazrcQqtjD
QeZbyGjeVWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMrfqzevJkyd/+eqrr/7n
/v37/7h79+6/3vwe0Uvu4cLvPX3rHu7Ro0d/veo/c9qyfejPdO7fnzv97/Ch
f37KHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZWpYpb
FTK36qfTpX5X6qk3G7sr9nA/e9t/5rTPO/Of+fklfq6rdnqnn/cSf/657OFg
jz2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFzq/70
evXq1S+v2rWd24Od+zflLvWznf4duOv+u3WXyh4O9tjDSVrOtxCq2MNB5lvI
aN5VatjDQWYPN543lRr2cJDZw43mVqWKWxUyt+pPr3v37v3zqs3Z6d+Ae9t/
5tzvMr1z586/L/WznX5P7Jk93C8u9fe8LXs42GMPJ2k530KoYg8HmW8ho3lX
qWEPB5k93HjeVGrYw0FmDzeaW5UqblXI3Ko/rdK/Dff06dM/vO0/d/q32a76
z5z+TbdL/XwPHz7821V/z3ffffe7S/09b8seDvbYw0lazrcQqtjDQeZbyGje
VWrYw0FmDzeeN5Ua9nCQ2cON5lalilsVMrfqT6tzv4/03O8kPffvw53+TbdL
/XynPd5Vf8/333//20v9PW/LHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83
njeVGvZwkNnDjeZWpYpbFTK36k+nJ0+e/OXcFu7Ro0d/veo/e/q32T7GHu60
ebvq73n27NnvL/X3vC17ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq
2MNBZg83mluVKm5VyNyqP41OW7JzW7i0Azu3U/tYe7jT71K91N/ztuzhYI89
nKTlfAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6v29+LF
i1+nLdy33377x3N/xsfaqX2s3d3bsoeDPfZwkpbzLYQq9nCQ+RYymneVGvZw
kNnDjedNpYY9HGT2cKO5VaniVoXMrdrdq1evfpm2cHfv3v1X+nM+1u8xtYe7
VvZw1LCHk7ScbyFUsYeDzLeQ0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypk
btXeXr9+/Yu0hTv5oc/Sn3Vup/bdd9/97lI/sz3ctbKHo4Y9nKTlfAuhij0c
ZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6t29q5buJcvX/7qXf68
58+f/+an8u/D/djk33eB7OGoYQ8naTnfQqhiDweZbyGjeVepYQ8HmT3ceN5U
atjDQWYPN5pblSpuVcjcqn29y+9IPXnx4sWv3/XPPP0bcFf9OacN26V+dnu4
a2UPRw17OEnL+RZCFXs4yHwLGc27Sg17OMjs4cbzplLDHg4ye7jR3KpUcatC
5lbt6rRxe5ct3Onfe7vOn3tup/b111//+VI//7m/5+HDh3+71N/ztj6RDdyP
s4ejhj2cpOV8C6GKPRxkvoWM5l2lhj0cZPZw43lTqWEPB5k93GhuVaq4VSFz
q/Z07t9we99/F+5NH2undu7vefz48eeX+nvelj0c7LGHk7ScbyFUsYeDzLeQ
0byr1LCHg8webjxvKjXs4SCzhxvNrUoVtypkbtWOnjx58pepLdypc1u7S/4e
03N7uEv+Xta3ZQ8He+zhJC3nWwhV7OEg8y1kNO8qNezhILOHG8+bSg17OMjs
4UZzq1LFrQqZW/XT7/79+/94ly3cq1evfvm+f8fp96vaw9247OGoYQ8naTnf
QqhiDweZbyGjeVepYQ8HmT3ceN5UatjDQWYPN5pblSpuVcjcqp9ur1+//vmt
W7f++y5buNP/7Qf+XZ99jN+XetrW2cO9c/Zw1LCHk7ScbyFUsYeDzLeQ0byr
1LCHg8webjxvKjXs4SCzhxvNrUoVtypkbtVPs3P/XtuP3blz59+X+PvO7eFu
3779n0v8HafO7eFOv7P1Un/P27KHgz32cJKW8y2EKvZwkPkWMpp3lRr2cJDZ
w43nTaWGPRxk9nCjuVWp4laFzK366fX06dM/vMsW7vR7VC/59552b5Obu1Pn
fvfrh/4bdyl7ONhjDydpOd9CqGIPB5lvIaN5V6lhDweZPdx43lRq2MNBZg83
mluVKm5VyNyqn1Zff/31n99lC/fo0aO/Xvrvvnv37r/ObNU+u8TfcdXm7vR7
YS/x55/LHg722MNJWs63EKrYw0HmW8ho3lVq2MNBZg83njeVGvZwkNnDjeZW
pYpbFTK36qfTkydP/vIuW7hnz579fuLvP/e7TF++fPmrD/3zz/1O1tMW7xL/
Hc5lDwd77OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWt
Cplb9dPoXbdwl9ilXdW539P6zTff/OlD//wXL178+qo//7TFu8R/h3PZw8Ee
ezhJy/kWQhV7OMh8CxnNu0oNezjI7OHG86ZSwx4OMnu40dyqVHGrQuZWvfmd
tmZpB3f6faKvX7/+2eTP8cOf/4ur/v579+7980P//MePH3/+sf/Nux9nDwd7
7OEkLedbCFXs4SDzLWQ07yo17OEgs4cbz5tKDXs4yOzhRnOrUsWtCplb9WZ3
7t9ke+POnTv//lg/z+3bt/9z1c/xoX/26b/HVX/2D/38Ej//uezhYI89nKTl
fAuhij0cZL6FjOZdpYY9HGT2cON5U6lhDweZPdxoblWquFUhc6ve3M79/tA3
7t69+6+P+TM9evTor1f9LN9///1v3/fPPe3dtvd+9nCwxx5O0nK+hVDFHg4y
30JG865Swx4OMnu48byp1LCHg8webjS3KlXcqpC5VW9uaQt3id9Ret1evXr1
y4lt3oMHD/5+1Z/77bff/vGS/x2uyh4O9tjDSVrOtxCq2MNB5lvIaN5VatjD
QWYPN543lRr2cJDZw43mVqWKWxUyt+rN7OHDh3+7Sf8u3I879ztTHz9+/Pl1
/7xnz579/tx/14n/Dm/LHg722MP9P/bumNXu81zzsB0CgUCKFKnSpHKX7pSn
TJvW9emMI4wxJgaBQMEg1ATjMmkEp4lKFfoEkb+AO5epVOcj7MmaP4ZMRmvf
W9Z69Hjdun5wFcNMJHmz5Ffvu++RJS3nLYQq9nCQeQsZzblKDXs4yOzhxnOm
UsMeDjJ7uNHcVanirgqZu+qPr5ubm5/dtg877dE2f32nv6/ttl/f119//d93
/bFevHjxq9t+rIcPH/5h8p/l37OHgz32cJKW8xZCFXs4yLyFjOZcpYY9HGT2
cOM5U6lhDweZPdxo7qpUcVeFzF31x9fnn3/+19s2Yqf/+ydPnvz2tEubcHNz
8376Nab/luvjx49/n36M9PfCndzl13Kp7OFgjz2cpOW8hVDFHg4ybyGjOVep
YQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV/1xdXNz89O0EZv27Nmz36Rf52mP
l36cTz/99PnLly9//qp/xi+++OLP6X9/2uaNfJHPZA8He+zhJC3nLYQq9nCQ
eQsZzblKDXs4yOzhxnOmUsMeDjJ7uNHcVanirgqZu+qPq9N/H3R7D/f8+fNf
3+XXev/+/T/d5cc7/fddT3+n3cm9e/e+vcv/5vT/dvpr/Z/Zw8EeezhJy3kL
oYo9HGTeQkZzrlLDHg4ye7jxnKnUsIeDzB5uNHdVqrirQuau+uPqtB27lj3c
qc8+++xvl/75T1+Dya/xuezhYI89nKTlvIVQxR4OMm8hozlXqWEPB5k93HjO
VGrYw0FmDzeauypV3FUhc1f98XRzc/P+9hbudfdwp05/l9ulfu5PPvnk71Nf
35Q9HOyxh5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsq
ZO6qP55ubm5+sr2FO3n27NlvXvfX/tVXX/3uTX/ex48f/37gy3rn7OFgjz2c
pOW8hVDFHg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFzV/3x9GP5
++G++eabX/7AX/9PHj58+IfX/fkePHjwx9P/9tJfz9fNHg722MNJWs5bCFXs
4SDzFjKac5Ua9nCQ2cON50ylhj0cZPZwo7mrUsVdFTJ3VU102tQ9evTow9N/
S/X030C9d+/et987/Z9PG7inT59+sP3r/Pfs4WCPPZyk5byFUMUeDjJvIaM5
V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlY7s4WCPPZyk5byFUMUeDjJv
IaM5V6lhDweZPdx4zlRq2MNBZg83mrsqVdxVIXNXlY7s4WCPPZyk5byFUMUe
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
Yw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUj
ezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3Vcjc
VaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3
VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOV
GvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83
njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PM
W8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSx
h4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8n
aTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjY
Yw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUj
ezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3Vcjc
VaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3
VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOV
GvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83
njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PM
W8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSx
h4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8n
aTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjY
Yw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUj
ezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3Vcjc
VaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3
VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOV
GvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83
njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PM
W8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSx
h4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8n
aTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjY
Yw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUj
ezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3Vcjc
VaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3
VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOV
GvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83
njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PM
W8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSx
h4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8n
aTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjY
Yw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUj
ezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3Vcjc
VaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3
VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeau
ShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnD
jeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOVGvZw
kNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83njOV
GvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNBZg83
njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq2MNB
Zg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8hozlVq
2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PMW8ho
zlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSxh4PM
W8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlvIVSx
h4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaUjezjYYw8naTlv
IVSxh4PMW8hozlVq2MNBZg83njOVGvZwkNnDjeauShV3VcjcVaWj7/dwV7SL
s4ejhj2cpOW8hVDFHg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXcVSFz
V5WO7OFgjz2cpOW8hVDFHg4ybyGjOVepYQ8HmT3ceM5UatjDQWYPN5q7KlXc
VSFzV5WOrmgH9332cNSwh5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI
7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoN
ezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvP
mUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYtZDTnKjXs4SCz
hxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYtZDTnKjXs
4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYtZDTn
KjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjDQeYt
ZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQqtjD
QeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0nLcQ
qtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyxh5O0
nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9HOyx
h5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q0pE9
HOyxh5O0nLcQqtjDQeYtZDTnKjXs4SCzhxvPmUoNezjI7OFGc1elirsqZO6q
0pE9HOyZfguBYrpM//fr6S2EFvZwkHkLGc25Sg17OMjs4cZzplLDHg4ye7jR
3FWp4q4KmbuqdGQPB3vs4eAH02X6v19PbyG0sIeDzFvIaM5VatjDQWYPN54z
lRr2cJDZw43mrkoVd1XI3FWlI3s42PO23kKgxXv+3HbpvIVQxR4OMmfqaM5V
atjDQeauOp4zlRr2cJC94lzV5XJXpYq7KmTuqtKRPRzssYeD1/OeP7ddOm8h
VLGHg8yZOppzlRr2cJC5q47nTKWGPRxkrzhXdbncVanirgqZu6p0ZA8He+zh
4PW8589tl85bCFXs4SBzpo7mXKWGPRxk7qrjOVOpYQ8H2SvOVV0ud1WquKtC
5q4qHdnDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43m
rkoVd1XI3FWlI3s42OMtBDLfYxjNWwhV7OEgc6aO5lylhj0cZO6q4zlTqeEN
GDJ7uNHcVanirgqZu6p0ZA8He7yFQOZ7DKN5C6GKPRxkztTRnKvUsIeDzF11
PGcqNbwBQ2YPN5q7KlXcVSFzV5WO7OFgj7cQyHyPYTRvIVSxh4PMmTqac5Ua
9nCQuauO50ylhjdgyOzhRnNXpYq7KmTuqtKRPRzs8RYCme8xjOYthCr2cJA5
U0dzrlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVTqyh4M93kIg8z2G0byF
UMUeDjJn6mjOVWrYw0HmrjqeM5Ua3oAhs4cbzV2VKu6qkLmrSkf2cLDHWwhk
vscwmrcQqtjDQeZMHc25Sg17OMjcVcdzplLDGzBk9nCjuatSxV0VMndV6cge
DvZ4C4HM9xhG8xZCFXs4yJypozlXqWEPB5m76njOVGp4A4bMHm40d1WquKtC
5q4qHdnDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43m
rkoVd1XI3FWlI3s42OMtBDLfYxjNWwhV7OEgc6aO5lylhj0cZO6q4zlTqeEN
GDJ7uNHcVanirgqZu6p0ZA8He7yFQOZ7DKN5C6GKPRxkztTRnKvUsIeDzF11
PGcqNbwBQ2YPN5q7KlXcVSFzV5WO7OFgj7cQyHyPYTRvIVSxh4PMmTqac5Ua
9nCQuauO50ylhjdgyOzhRnNXpYq7KmTuqtKRPRzs8RYCme8xjOYthCr2cJA5
U0dzrlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVTqyh4M93kIg8z2G0byF
UMUeDjJn6mjOVWrYw0HmrjqeM5Ua3oAhs4cbzV2VKu6qkLmrSkf2cLDHWwhk
vscwmrcQqtjDQeZMHc25Sg17OMjcVcdzplLDGzBk9nCjuatSxV0VMndV6cge
DvZ4C4HM9xhG8xZCFXs4yJypozlXqWEPB5m76njOVGp4A4bMHm40d1WquKtC
5q4qHdnDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43m
rkoVd1XI3FWlI3s42OMtBDLfYxjNWwhV7OEgc6aO5lylhj0cZO6q4zlTqeEN
GDJ7uNHcVanirgqZu6p0ZA8He7yFQOZ7DKN5C6GKPRxkztTRnKvUsIeDzF11
PGcqNbwBQ2YPN5q7KlXcVSFzV5WO7OFgj7cQyHyPYTRvIVSxh4PMmTqac5Ua
9nCQuauO50ylhjdgyOzhRnNXpYq7KmTuqtKRPRzs8RYCme8xjOYthCr2cJA5
U0dzrlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVTqyh4M93kIg8z2G0byF
UMUeDjJn6mjOVWrYw0HmrjqeM5Ua3oAhs4cbzV2VKu6qkLmrSkf2cLDHWwhk
vscwmrcQqtjDQeZMHc25Sg17OMjcVcdzplLDGzBk9nCjuatSxV0VMndV6cge
DvZ4C4HM9xhG8xZCFXs4yJypozlXqWEPB5m76njOVGp4A4bMHm40d1WquKtC
5q4qHdnDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43m
rkoVd1XI3FWlI3s42OMtBDLfYxjNWwhV7OEgc6aO5lylhj0cZO6q4zlTqeEN
GDJ7uNHcVanirgqZu6p0ZA8He7yFQOZ7DKN5C6GKPRxkztTRnKvUsIeDzF11
PGcqNbwBQ2YPN5q7KlXcVSFzV5WO7OFgj7cQyHyPYTRvIVSxh4PMmTqac5Ua
9nCQuauO50ylhjdgyOzhRnNXpYq7KmTuqtKRPRzs8RYCme8xjOYthCr2cJA5
U0dzrlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVTqyh4M93kIg8z2G0byF
UMUeDjJn6mjOVWrYw0HmrjqeM5Ua3oAhs4cbzV2VKu6qkLmrSkf2cLDHWwhk
vscwmrcQqtjDQeZMHc25Sg17OMjcVcdzplLDGzBk9nCjuatSxV0VMndV6cge
DvZ4C4HM9xhG8xZCFXs4yJypozlXqWEPB5m76njOVGp4A4bMHm40d1WquKtC
5q4qHdnDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43m
rkoVd1XI3FU11cuXL3/+5MmT33711Ve/+97XX3/930+fPv3g9H+3/ev7z+zh
YI+3EMh8j2E0byFUsYeDzJk6mnOVGvZwkLmrjudMpYY3YMjs4UZzV6WKuypk
7qq6ZDc3Nz978ODBH7/fliVffPHFn7/55ptfbv+6T9nDwR5vIZD5HsNo3kKo
Yg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43mrkoVd1XI3FV1iW5ubt6/f//+
n+66g/tP9+7d+/a77777xeY/gz0c7PEWApnvMYzmLYQq9nCQOVNHc65Swx4O
MnfV8Zyp1PAGDJk93GjuqlRxV4XMXVVv2vPnz3/9Q3dw/+n031Td+uewh4M9
3kIg8z2G0byFUMUeDjJn6mjOVWrYw0HmrjqeM5Ua3oAhs4cbzV2VKu6qkLmr
6k16+vTpB5fawn3v0aNHH278s9jDwR5vIZD5HsNo3kKoYg8HmTN1NOcqNezh
IHNXHc+ZSg1vwJDZw43mrkoVd1XI3FX1Q/vmm29+eekt3PeePHny27f9z2MP
B3u8hUDmewyjeQuhij0cZM7U0Zyr1LCHg8xddTxnKjW8AUNmDzeauypV3FUh
c1fVD+0uu7aHDx/+4cWLF7+6ubn56b+8//Lly5+f/v63u/xv/9XPNv553ubP
+YbZw1HDWwhkvscwmrcQqtjDQeZMHc25Sg17OMjcVcdzplLDGzBk9nCjuatS
xV0VMndV/ZC++OKLP9+2ZTv939/2vz9t4z777LO/3fZjfPzxx/94W/88p+zh
YI+3EMh8j2E0byFUsYeDzJk6mnOVGvZwkLmrjudMpYY3YMjs4UZzV6WKuypk
7qp63U5/x1v6O+Hu+mM9ePDgjz+W/26qPRzs8RYCme8xjOYthCr2cJA5U0dz
rlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVa/b559//tdz+7XT3/n2uj/e
bX/X3Nv8O+Ls4WCPtxDIfI9hNG8hVLGHg8yZOppzlRr2cJC5q47nTKWGN2DI
7OFGc1elirsqZO6qep1ubm5+ctvf5/ZDf9x79+59e+7H/O67735xyX+Gc9nD
wR5vIZD5HsNo3kKoYg8HmTN1NOcqNezhIHNXHc+ZSg1vwJDZw43mrkoVd1XI
3FX1Oj1+/Pj353ZrX3755f/80B/3xYsXvzr3457+m6oX/Ec4mz0c7PEWApnv
MYzmLYQq9nCQOVNHc65Swx4OMnfV8Zyp1PAGDJk93GjuqlRxV4XMXVWv0+m/
X3put/avfvYmP/ZHH330z0v/vXOvkz0c7PEWApnvMYzmLYQq9nCQOVNHc65S
wx4OMnfV8Zyp1PAGDJk93GjuqlRxV4XMXVV37bb/VuppJ/emP/79+/f/tPnf
TLWHgz3eQiDzPYbRvIVQxR4OMmfqaM5VatjDQeauOp4zlRregCGzhxvNXZUq
7qqQuavqrj1//vzXk/9N02fPnv3m3I//6NGjDy/xz3Bb9nCwx1sIZL7HMJq3
EKrYw0HmTB3NuUoNezjI3FXHc6ZSwxswZPZwo7mrUsVdFTJ3Vd21L7/88n/O
7dVOW7Y3/fFv+/vnPvnkk79f4B/h1uzhYI+3EMh8j2E0byFUsYeDzJk6mnOV
GvZwkLmrjudMpYY3YMjs4UZzV6WKuypk7qq6a59//vlfz+3V/tVPL/FznP67
q6/68T/66KN/XuLHvy17ONjjLQQy32MYzVsIVezhIHOmjuZcpYY9HGTuquM5
U6nhDRgye7jR3FWp4q4Kmbuq7tq5rdolN2Snvwfuls3d+5f6eV6VPRzs8RYC
me8xjOYthCr2cJA5U0dzrlLDHg4yd9XxnKnU8AYMmT3caO6qVHFXhcxdVXfp
tv+W6b1797691M/z8OHDP9yyh/vZpX6eV2UPB3u8hUDmewyjeQuhij0cZM7U
0Zyr1LCHg8xddTxnKjW8AUNmDzeauypV3FUhc1fVXTr93Wzndmqnv9PtUj/P
gwcP/nju53n27NlvLvXzvCp7ONjjLQQy32MYzVsIVezhIHOmjuZcpYY9HGTu
quM5U6nhDRgye7jR3FWp4q4Kmbuq7tJtfz/c6e90u9TP8+TJk9+e+3meP3/+
60v9PK/KHg72eAuBzPcYRvMWQhV7OMicqaM5V6lhDweZu+p4zlRqeAOGzB5u
NHdVqrirQuauqrt0+rvZ3sYe7rR5O/fzPH369INL/Tyvyh4O9ngLgcz3GEbz
FkIVezjInKmjOVepYQ8HmbvqeM5UangDhswebjR3Vaq4q0Lmrqq7dNtO7W3t
4U7/LdVL/Tyvyh4O9ngLgcz3GEbzFkIVezjInKmjOVepYQ8HmbvqeM5UangD
hswebjR3Vaq4q0Lmrqq79LZ2am9rd/eq7OFgj7cQyHyPYTRvIVSxh4PMmTqa
c5Ua9nCQuauO50ylhjdgyOzhRnNXpYq7KmTuqrpLb+u/Y2oP91r9f39ugwbv
Db6FQIv3/Lnt0jlTqfTe5f9d4UylzsDvEzlXKfXe8PcYoMGFf5/oyJlKpfe8
AUN04d8nclel1HvuqhBd+PeJyrptp/bs2bPfvI2f523t4QAAAAAAAAAAALZM
bqR09OLFi1+d+/q3/f1wAAAAAAAAAAAAWyY3Ujo6/R1w577+pw3bpX4eezgA
AAAAAAAAAOBdNrmR0tFtO7Wvvvrqd2/j53nw4MEfL/XzvKor/Dz977/9mv8X
rt1/fJ4vld8nVHnF51mX6dzXF66WcxWyod8n+revrX9f0OAVn+dL5PcJVYZ+
n+jIn8Gp4q4KmTN1LH8Gp467KmTOVaXe1k7ttp/n0aNHH17q53lVV7iHu8pf
s3Suqc+z3ydqyud5Nl9fNeVclXI+z3P5/8OopqY+z36fqCmf59l8bdWUu6qU
83mey59Z1Ja7qpTzeVbqtv9e6iX/O6a37eEu+d9lfVXX+PvgGn/N0rm8hUg5
n+fZfH3VlHNVyvk8z+XtVE3Zw0k5n+fZfG3VlLuqlPN5nsufWdSWu6qU83lW
6sWLF7+yh/vxdY2/Zulc3kKknM/zbL6+asq5KuV8nufydqqm7OGknM/zbL62
aspdVcr5PM/lzyxqy11Vyvk8K3Vzc/P+uZ3aJf97qadtnT3c3bvGX7N0Lm8h
Us7neTZfXzXlXJVyPs9zeTtVU/ZwUs7neTZfWzXlrirlfJ7n8mcWteWuKuV8
npW6bQ/38ccf/+NSP89te7jTf7P1Uj/Pq7rG3wfX+GuWzuUtRMr5PM/m66um
nKtSzud5Lm+nasoeTsr5PM/ma6um3FWlnM/zXP7MorbcVaWcz7Pu0mn39qqd
2r1797691M/x+eef//XcHu5f/fRSP8+rusbfB9f4a5bO5S1Eyvk8z+brq6ac
q1LO53kub6dqyh5Oyvk8z+Zrq6bcVaWcz/Nc/syittxVpZzPs+7SJ5988vdb
tmrvX+LnOLe5++ijj/55iR//tq7x98E1/pqlc3kLkXI+z7P5+qop56qU83me
y9upmrKHk3I+z7P52qopd1Up5/M8lz+zqC13VSnn86y7dNt/y/S77777xZv+
+Lf9N1lPW7xL/DPc1jX+PrjGX7N0Lm8hUs7neTZfXzXlXJVyPs9zeTtVU/Zw
Us7neTZfWzXlrirlfJ7n8mcWteWuKuV8nnWXnjx58ttze7Wvv/76v9/0x//m
m29+ee7HP23xLvHPcFvX+PvgGn/N0rm8hUg5n+fZfH3VlHNVyvk8z+XtVE3Z
w0k5n+fZfG3VlLuqlPN5nsufWdSWu6qU83nWXbq5ufnZub3aZ5999rc3/fEf
PXr04bkf/+nTpx9c4p/htq7x98E1/pqlc3kLkXI+z7P5+qop56qU83mey9up
mrKHk3I+z7P52qopd1Up5/M8lz+zqC13VSnn86y79vHHH//j3GbtTX/se/fu
fXvux/5XP73Er/+2rvH3wTX+mqVzeQuRcj7Ps/n6qinnqpTzeZ7L26masoeT
cj7Ps/naqil3VSnn8zyXP7OoLXdVKefzrLv25Zdf/s+5zdrz589//UN/3NPe
7dyPe9rJXfKf4VzX+PvgGn/N0rm8hUg5n+fZfH3VlHNVyvk8z+XtVE3Zw0k5
n+fZfG3VlLuqlPN5nsufWdSWu6qU83nWXXv58uXPz+3WPvnkk7//0B/3/v37
fzr34/7lL3/5r0v+M5zrGn8fXOOvWTqXtxAp5/M8m6+vmnKuSjmf57m8naop
ezgp5/M8m6+tmnJXlXI+z3P5M4vacleVcj7Pep1u+2+mPnr06MPX/fGePn36
wbkf721+Lq/x98E1/pqlc3kLkXI+z7P5+qop56qU83mey9upmrKHk3I+z7P5
2qopd1Up5/M8lz+zqC13VSnn86zX6fT3td22X/v666//+64/1osXL35124/1
8OHDP0z+s/x71/j74Bp/zdK5vIVIOZ/n2Xx91ZRzVcr5PM/l7VRN2cNJOZ/n
2Xxt1ZS7qpTzeZ7Ln1nUlruqlPN51ut224bt5PHjx79PP0b6e+FO/tX7b+Of
59Q1/j64xl+zdC5vIVLO53k2X1815VyVcj7Pc3k7VVP2cFLO53k2X1s15a4q
5Xye5/JnFrXlrirlfJ71uj158uS3acv26aefPn/58uXP//N/e3Nz89Mvvvji
z+l/f/p76N7mP9M1/j64xl+zdC5vIVLO53k2X1815VyVcj7Pc3k7VVP2cFLO
53k2X1s15a4q5Xye5/JnFrXlrirlfJ71Q7p///6f0qbt5OOPP/7H559//teT
e/fufXuX/83p/+3b/ue5xt8H1/hrls7lLUTK+TzP5uurppyrUs7neS5vp2rK
Hk7K+TzP5murptxVpZzP81z+zKK23FWlnM+zfmifffbZ3+6yb3sdp/3cxj/L
Nf4+uMZfs3QubyFSzud5Nl9fNeVclXI+z3N5O1VT9nBSzud5Nl9bNeWuKuV8
nufyZxa15a4q5Xye9Sad/i63S23hPvnkk79v/XNc4++Da/w1S+fyFiLlfJ5n
8/VVU85VKefzPJe3UzVlDyflfJ5n87VVU+6qUs7neS5/ZlFb7qpSzudZb9pX
X331uzfdwj1+/Pj3m/8M1/j74Bp/zdK5vIVIOZ/n2Xx91ZRzVcr5PM/l7VRN
2cNJOZ/n2Xxt1ZS7qpTzeZ7Ln1nUlruqlPN51iW6ubn5ycOHD//wuju4Bw8e
/PH0v93+9V/j74Nr/DVL5/IWIuV8nmfz9VVTzlUp5/M8l7dTNWUPJ+V8nmfz
tVVT7qpSzud5Ln9mUVvuqlLO51mX7ptvvvnlo0ePPjz9t1RP/w3Ue/fuffu9
0//5tIF7+vTpB9u/zn/vGn8fXOOvWTqXtxAp5/M8m6+vmnKuSjmf57m8naop
ezgp5/M8m6+tmnJXlXI+z3P5M4vacleVcj7P0nX+PrjGX7N0Lm8hUs7neTZf
XzXlXJVyPs9zeTtVU/ZwUs7neTZfWzXlrirlfJ7n8mcWteWuKuV8nqXr/H1w
jb9mvffed99994vHjx///quvvvrd97Z/TT+GvIW8m718+fLnz549+81f/vKX
//r33xNPnjz57fPnz399c3Pz0+1f448pn+fZfH2vM+fqq3Ouvps5V18vn+e5
vJ1eZ87UV2cP927mTH29fJ5n87W9zpyrr85d9d3Mufp6+TzP5c8s15kz9Xzu
qu9mztXXy+dZus7fB9f4a9b/++eI7/2rn2z/urbzFvJudPqsn/5M9umnnz5/
1e+FV/noo4/++cUXX/z59Ge77V//dj7Ps/n6XmfO1VfnXH03cq6+WT7Pc3k7
vc6cqa/OHu7dyJn6Zvk8z+Zre505V1+du+q7kXP1zfJ5nsufWa4zZ+r53FXf
jZyrb5bPs3Sdvw+u8df8rvfw4cM/nPlz2/vbvzZpuvv37//prn9Ou+3Pb0+f
Pv1g+59lK//en83X9/pyrupdzrn65vn3/lzeTq8vZ6re5Zypb55/78/ma3t9
OVf1LudcffP8e38uf2a5vpypetdzrr55/r0vXefvg2v8Nb/LvXjx4lfnziF/
blNzp/+/B2/6Z7X/9Nlnn/1t+59rI//en83X97pyrupdzbl6ufx7fy7fY7iu
nKl6V3OmXi7/3p/N1/a6cq7qXc25ern8e38uf2a5rpypepdzrl4u/96XrjO/
d6+n099jetv5489tau3Ro0cfXvrPa987/f9neNf+Tmz/3p/N1/d6cq7qXc25
etn8e38u32O4npypeldzpl42/96fzdf2enKu6l3NuXrZ/Ht/Ln9muZ6cqXqX
c65eNv/el64zv3evp9PZ4s9tetc6/bfsp/689q7+/vHv/dl8fa8n56rexZyr
l8+/9+fyPYbryZmqdzFn6uXz7/3ZfG2vJ+eq3sWcq5fPv/fn8meW/9Pe/fPA
cZwHA4cNAQICuHCRKk0qd+5cunTr1rWrCIpACIJgAgQE2CAgsDEElnTDMixV
8BNY/ALpWLpSnY+gV0/Me3M+387M7s7sPrv3+wELJyJ5N3e3M8/8eXbmOMRU
HpW42p92H45J3c0vYkmtz/ZoMYfH8P333/9LS3/rs88++++XL1/+Ov5+1IMP
10dv3779t2fPnv2p5TU+//zzt3t/3q1o98fy/eYnrvKoxNUxtPvjWGPIT0zl
UYmpY2j3x/Ld5ieu8qjE1TG0++Pos+QnpvLIxNUxtPtwTOpubu/fv/9ZS7zR
b+OMoi9Wu++//fbbf6+9TuzZ++WXX/6l9lpv3rz5xQYfa3fa/bF8v7mJqzwy
cXUM7f441hhyE1N5ZGLqGNr9sXy3uYmrPDJxdQzt/jj6LLmJqTw6cXUM7T4c
k7qb16tXr37V2mfTb+Nsov9Uut+XPHNQq1PxvNCIz5KNdn8s329e4iqPTFwd
R7s/jjWGvMRUHpmYOo52fyzfbV7iKo9MXB1Huz+OPkteYiqPTlwdR7sPx6Tu
5vT06dM/z+mz6bdxNqW9rJ88efLXpa8be/+W6lHLMxFHp90fy/ebk7jKoxNX
x9Huj2ONIScxlUcnpo6j3R/Ld5uTuMqjE1fH0e6Po8+Sk5gK4upI2n04JnU3
l+++++5f5/bX9Ns4m9rZ9j/6eM3rR59v6rVjzNTrc2Sl3R/L95uLuAri6mja
/XGsMeQipoKYOpp2fyzfbS7iKoiro2n3x9FnyUVMhb8TV8fS7sMxqbs5xBnc
S55d0G/jjEp77/boU5X6hI+wr692fyzfbw7iKvwfcXUs7f441hhyEFPh/4ip
Y2n3x/Ld5iCuwv8RV8fS7o+jz5KDmAr/SFwdS7sPx6Tu7iv6Wn/84x//c01/
Tb+Ns/nqq6/+MHWfR3+rx3t8+umnfyvUpZ/2eI+stPtj+X73Ja7CPxNXx9Lu
j2ONYV9iKvwzMXUs7f5Yvtt9iavwz8TVsbT74+iz7EtMhfvE1bG0+3BM6u6+
nj179qfWflmcvf3111//Tr+Ns/vss8/+e/R9vsV7ZKXdH8v3uy9xFf6ZuDqW
dn8cawz7ElPhn4mpY2n3x/Ld7ktchX8mro6l3R9Hn2VfYircJ66Opd2HYzpr
3f2xzf0o8qCfP3/+++srnhmI/UJ7vtfLly9/Ha97+15x1f5tyzMMscfoJW+7
lNt99jhDf1nrydQ9Hs8d9CpPacx09rp01nY/i7N+v1nbi1viKnvKWk/E1bHO
2u5ncNY1hqxtxS0xlT1lrSdi6lhnbfezOOt3m7W9uCWusqes9URcHeus7X4G
Z+6zZG0vromp7C1rPRFXxzpruw9nd9a6+/79+5+V+kI932vN+9T6bbfxrPT3
zx5n6C9rPXnx4sVv417/8ssv//LkyZO/xtild5+tsqfvqevSWdv9LM76/WZt
L26Jq+wpaz0RV8c6a7ufwaj6s7esbcUtMZU9Za0nYupYZ233szjrd5u1vbgl
rrKnrPVEXB3rrO1+Bmfus2RtL66Jqewtaz0RV8c6a7sPHFdpz87YI7fHe7x+
/fqXU+8RueG1fz/VD/viiy/+68e48XHr33+EOMMYR6gnFz3v8Us/cKIunfqM
e1jqCO2FuMrejlBPLsRV2M8R2goxlb0doZ5ciKmwryO0F+IqeztCPbkQV2Ff
2dsLMZUMsteTa+IqwDnFnqRTbXLkRvd4j88///zt1Htc9uItue2HRfz87rvv
/rX17+u3sdYR6klv8Z5T5Ylr6/LAURyhvRBX2dsR6klv4irMd4S2Qkxlb0eo
J72JqbDMEdoLcZW9HaGe9CauwjLZ2wsxlQyy15MRxFWAXKIfU2qX1/ZzIs95
6rVb9x69nLMdMa3UX7vQb6O3I9ST3uI5odH9VDijI7QX4ip7O0I96U1chfmO
0FaIqeztCPWkNzEVljlCeyGusrcj1JPexFVYJnt7IaaSQfZ6MoK4CpDP06dP
/zzVNkfu9prX/uabb34z9drxZy2vEWeMz8nh1m9jhOz1pKfa8wux//DWZYIj
yd5eiKtkkL2e9CSuwnLZ2woxlQyy15OexFRYJ3t7Ia6SQfZ60pO4Cutkbi/E
VLLIXE96E1cBcopnA6ba5idPnvx1zWtH/vXWfSj9NkY4Wz0pic9T6rOpR1B2
tvZCXGWEs9WTEnEVljtbWyGmMsLZ6kmJmArrnK29EFcZ4Wz1pERchXXO1F6I
qYxypnpSI64C5PXJJ5/8T6F9/mjJa5byoGO/0N6f4UK/jVHOVE+mvHjx4rel
/trz589/v3WZ4IjO1F6Iq4xypnoyRVyF9c7UVoipjHKmejJFTIU+ztReiKuM
cqZ6MkVchT7O0l6IqYx0lnpSIq4C5Pb111//bqqNjjZ8yWuW+k9v3779t96f
oeV99dtY40z15J43b978otRfi2vL8sCRnam9EFcZ5Uz15B5xFfo4U1shpjLK
merJPWIq9HOm9kJcZZQz1ZN7xFXo5yzthZjKSGepJ1PEVYD8Iv96qo2O/UaX
vOZe7b5+G6OcqZ7cevfu3c9r/bVXr179assywZGdqb0QVxnlTPXklrgK/Zyp
rRBTGeVM9eSWmAp9nam9EFcZ5Uz15Ja4Cn2dpb0QUxnpLPXkHnEV4Dg+//zz
t1Ntdew7Oue1SueBR79q1GcI+m2MdJZ6cq20r/DlinPvtyoPnMVZ2gtxlZHO
Uk+uiavQ31naCjGVkc5ST66JqTDGWdoLcZWRzlJPromrMMYZ2gsxldHOUE9u
iasAx1Laz3Nu/Hj69Omfe8W1ufTbGOks9eTixzrxca2/pu7AMmdpL8RVRjpL
PbkQV2GMs7QVYiojnaWeXIipMM5Z2gtxlZHOUk8uxFUY5wzthZjKaGeoJ9fE
VYBjmmqvP/nkk//p8TqfffbZf48q+4V+G6OdoZ6E1v7a+/fvf7ZFeeCMztBe
iKuMdoZ6EsRVGOsMbYWYymhnqCdBTIXxztBeiKuMdoZ6EsRVGO/o7YWYyhaO
Xk8uxFWA43r27Nmfptrt2H+05TVev379y6nX2OKMbP02RjtDPWnZxzeud+/e
/Xx0WeDMztBeiKuMdoZ6Iq7CeGdoK8RURjtDPRFTYRtnaC/EVUY7Qz0RV2Eb
R28vxFS2cPR6EsRVgGOLXOWptjviVMtrlM4A36LfpN/GaEevJ9EPa+mvtfY/
gWlHby+CuMpoR68n4ips4+htRRBTGe3o9URMhe0cvb0I4iqjHb2eiKuwnaO3
F2IqWzh6PRFXAc7h008//dtUG177tz/Gmo+m/u2XX375ly3Kr9/GFo5aT779
9tt/b+mveXYB+jlqe3EhrrKFo9YTcRW2ddS24kJMZQtHrSdiKmzvqO3FhbjK
Fo5aT8RV2N5R24sgprKVo9YTcRXgPL755pvfTLXj0d6X/u2LFy9+O/Vvt8qH
1m9jC0esJ6X31V+DcY7YXlwTV9nCEeuJuArbO2JbcU1MZQtHrCdiKuzjiO3F
NXGVLRyxnoirsI8jthcXYipbOWI9EVcBzuXHvs1Pp9ryL7744r9K/3Yqr/uT
Tz75n63Kr9/GFo5WT+LZiJb+2vfff/8vo8oAj+po7cUtcZUtHK2eiKuwj6O1
FbfEVLZwtHoipsJ+jtZe3BJX2cLR6om4Cvs5WntxTUxlK0erJ+IqwDlFzJnb
94m2furfPH/+/PdblV2/ja0coZ7E/sHRF2zpr8Xf7f3+wN8dob2YIq6ylSPU
E3EV9neEtmKKmMpWjlBPxFTI4QjtxRRxla0coZ6Iq5DDEdqLe8RUtnSEeiKu
Apxb6RzsV69e/erev6n0lz7equz6bWwlez2J/YFb+mqfffbZf/d8X+CfZW8v
SsRVtpK9noirkEP2tqJETGUr2euJmAp5ZG8vSsRVtpK9noirkEf29mKKmMqW
stcTcRXgMUy170+ePPlrj78/in4bW8paT16/fv3Llv5a7PXb832BaVnbixpx
lS1lrSfiKuSSta2oEVPZUtZ6IqZCPlnbixpxlS1lrSfiKuSTtb0oEVPZWtZ6
Iq4CPI5K/+cf9v58+/btv0393Ygdicqt30ZXGevJN99885uW/tqWZ1gAOduL
DuUWV+kqYz0RVyGfjG1Fh3KLqXSVsZ6IqZBTxvaiQ7nFVbrKWE/EVcgpY3ux
ssxiKt1lrCfiKsBjKZ3F/eLFi99e/93Ig576u1uXW7+NLWWrJ/GeLf21N2/e
/KLXewJtsrUXrcRVtpStnoirkFO2tqKVmMqWstUTMRXyytZetBJX2VK2eiKu
Ql7Z2osWYipby1ZPxFWAxxRnX99r7z/99NO/Xf+9qbjw9OnTP29dZv02tpal
nrT2196/f/+zHu8HzJelvZhDXGVrWeqJuAq5ZWkr5hBT2VqWeiKmQn5Z2os5
xFW2lqWeiKuQX5b2opWYyh6y1BNxFeBxvXz58tdT7X7kbsffKZ2l/e7du59v
XWb9NraWoZ6UynC5Pvnkk//5sQ78dP0nBpbK0F7MJa6ytQz1RFyF/DK0FXOJ
qWwtQz0RU+EYMrQXc4mrbC1DPRFX4RgytBdziKnsIUM9EVcBHlv0c6ba/6+/
/vp38Xe++OKL/5qKD3uUWb+Nre1dT0r9wcsVz1ms/6TAWnu3F0uIq2xt73oi
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
MyLOz3mtOfunRa5YzEvOLW98L5EP1hJf41ryHo/yuY5szp7uPfpZcXZL7X3i
ubrae8Uz7w3ltd8tD6e17Tt6XTHvDHA+2dc8oVceW2lu1jpAXmeYe6qtC8RY
IuYISq8Rn7P2LGLLma3UiYs8uux1wLzEPno+V7C2T1Y70y7Dfco6pXao55kb
kcMRz/e37vegnelrbj7cnNyeHmU4y+/tubBpW6/TXpTi4Jpc3+srxobxPq1l
askTbskpjxjdsoervVWAI6jtN7XFHmC1sc+c5zWiH90S8yKO9HrmttQP6dXH
O+vnOrLS/sQj+lkt56TOqa9xn5Re66j7XsFSpf2tS/X966+//t3eZZ/LvDPA
+WRf84Re8/eXPc5vr0d/Viu7o8891dZY5j4bX5tvqeXVUScu8uiy1wHzEvvo
mU+xtk9Wyl+RG34OpXZo1B5/retoPfPxHt3cfLgR8+ny4R43H27rddpr2foy
kZvWc8waat9vPBM24rMA9Fbac2qLdrt0lvXc92+JdyPOqG/Zb2tNH/+sn+uo
Yv+9uX38tf2syD0svX70S+a+Zm2sYg6eR1Kq1/Hnpbqyd9nnyjZWA2C97Gue
YP6eI889lcYKS9cASt/HnD0AuE9c5NFlrwPmJfaRqT9WylOPcm5ZFsbYsx2q
raVE327k+z+SJflwcfU8t1Y+3GOOp/dYp7029R5zz7zrpXT20Zo889q5sI+Y
IwAcTy3nacR57tdKfdM5OT4t+5mN3Luz9j0ujTdn/VxH1Pp8Ue9+VmnfqrjW
zBGUPpM94ngkU/Ug9oWOPy/tf320Pr95Z4Dzyb7mCebvOfLcU6ncS9vYWAMs
ve6yT8mFuMijy14HzEvsI1N/LO7Ds8yzcd+e7VDtbBx9rX6W5sP1PHtKPtxj
jaf3Wqe9VhrL7XGGaG1suXasXXqWS34xcBSldvL58+e/H/W+veb/Wvq3W8Sg
Wu7a3Jhz1s91NPG82pJnDXr1s+J5gpFjt9gnt1DuLufvQmalfZ8va2OlcdaS
vab3ZN4Z4Hyyr3mC+XvCEeeeSs+nre0/l9pu9WIdcZFHl70OmJfYR6b+WCkf
LsM9ynp7t0PRtyz1/1rP9qVsaT5cXL3OTZUP9xjjhr3Xaa+VzibdY728tL7V
I1+tNJ52ZipwFKV8m5FtWSmGz2mjazFwyz22e/bvzvq5jiL6Ri37843uZ5We
Y+9xTm5p/iHOlFn7+pBdZR3q/+eEVur4YfKCzTsDnM/eaw1QY/6ecMS5p5jv
GDVeLn0f1mjXERd5dNnrgHmJfWTqj8mHO7+926HSmbxx2Yewj6lctNLZjddX
j3NT5cOdezydZZ32Wqk8PV5/rtK4stfZxKV16mhve7wHwEjv37//WSlGjJqH
6/Ge2fY+jvykqXLM2QP4rJ/rSErnI94bP5XmyZf2s2rP1/TqZ0y9vjNTObvI
Y2tt20rjii3zk2/K/1HsXRfPJF2umFMq7e241bxztF/Rv4jy3ClfmvzBKGO0
4VG2OMcr/jf6IGvGx/H5bj/3h9d8yLFhfO5790J873H/xrh87+8m6sx1+eJe
iPL1mjM4a9nIY+ezaP6pzduzrY/2JNrcS9u+Z73JHgu3bF9K+zP0fq9eLvd2
fC+XPkJcEbsy/H4hW/2rOeLcU+lsmLV1pbSOYo12nT3j4pnHF1n79VPj4gz9
5b36AlvWgczzEh/Kl7o/drFFTM/UHyudwxB/tnV56G/vfLhQ6gMOaAtTtTVR
noiD92J2zz5Eaf0qzlSp5TH1WFvcOh9uj986U/u9tQzrtLemxojx33u8/lxb
7Dtub3PgDEq5vRFver9f6RmgOX2gUmyLa+uzunvlL531cx1JyzMH8ZzLZX6t
lCuztD9Qmhvo2ZefOjPVXrecXame3+59WVu/26rM0eZEe1N7zi7+PMbKt+3z
yHnnKFu8Z2l8dH1Fzu3lTNq1Ii7G7xnvf7nie7o3Bx9j49JZ0Zcr/k5rvI35
jtr51pc+TpRzznnU8R3dfrbLFf997XppxJqp14/PNHdtOj5b7JcSv2/LfXB9
z0afc+2cZOFe+Ic5qagb8Wctz6x++eWXf+kxV5q5bBxbj7WG1vszRLvRek7F
FvdoxOgoe2lMext/RuWa7BULs7Uv1+WIPlXp/aLtvxff7r1u/G63n/Py/y8p
562IeXPOYLn8fmvnf49c/+Y64txT/A6XtZX4Ti+fYW3ZSmORbL/b0QyOi4cf
X7Tau19f0jouvrSF9/Jr4tnfezFl7Xe557j4YnQeSuZ5iUv5Es5NbB7TR/XH
wpw+2b2/W2oz4/eYmp+I7/Hen9XKu8TlPp8oR/c292wy5MNt0Rbu3d6vKU+0
CdEGRbs1Yj+HS5teK8fa86e2yIfb+rce2X4fTYZ12ltTv8de3/vU5+25l00p
L1E+HHAUL1++/HUpnvR+vxjDTb3XnDMnSnOpe+1bdjtPdJkHmpPDdtbPdSS1
ftbt+H7EnsUxXzD1mtGv6/JB62U/Xa4jXJTq+L25ylLbHM/+jyxrlGfuOsS9
9mrEvHPkIZT2zphbxiWmxrrX+Q7xf7fu138b70rzZHPWza+v1jOva320NW11
7fyIuFr3VYjvqHVeqOWKz73kM7XcC7XnDqauaAPWzJlmLhvH1mOev+X+jFyh
1pyze1fvccPadifa9155cXvHwkztS0tsabnuxbbK3PbicUt8vjX3dlwf1kYX
jfuOWP+WOurc0wilXADj8HW2iotHHV/UZOnX37NmXByf6XpsM/XbLe0b7N0X
uDYqByTzvETI8Btkiekj+2Olz3nv37Tk9rZepbnyNfX3nlJbHPdar/c5qwz5
cKUYvaYMGdqa2/K05OXXriXPprTkopX2fLhca/Z0HZkPt8dvPbr9PpoM67TX
Sme77TXmvjzjEWPfuF8vbV/PXILKeany4YBDqO3/1XMs0bDXWFPbWTrnLq6R
z1qUxHcVMSfme5bsj3vWz3U0U/2mmPe59/lH9LNKz7L3fNagNC/hnBbOqjSH
NrW3dayZjRpfl5TOrG69LuXrPe/c8ozWnGvpnOJUOS7zWz3mX2/HtDFXs/Y1
Y3615fPV1hxi3mvJ91ab02ntcyxdE6ldS87trt0LPeYIl54nnrlsHFuPtYap
+/PSF+wRi+Lq0YeNvnWP+nLdhq6Zv8sQCzO1L7Xxfut17zfpPeaKf9M7hi0Z
Px2p/q11xLmnETKX7QxGxsWzjC+mZOrX3+oVby9jnKl1vSU5Ehn6AtdG5KFk
npcIWX6DLDF9ZH+s9n3f/puev03cv6XX6zkert3HlO2dD1fKWbmuk3NlaWsu
lj7zVLrmnBPRmotW6zetydsZlQ+31289uv0+mgzrtNdKa7bZ1s173gOl/OKz
5F4Cj6H03Gz8Wa/3KT0PPOd9SnkJR473Z/1cR3Pbb4q+873zFab+fo/frNS3
6jluLK2P9dyHDjIpzfNP7fVWez5rzbNsU0p7Uc+9oh2bGrssmR9Y+3zc3O+/
ZKoNjjmcns8iX8Z3PdaqLlfrc4K115mbL1+bh2/pk9XmF3vdt3M+V2ntsmf+
zJIzxTOXjWMbue4f7Wivdbu57d49Pdvf22vJHF6WWJipfTlKPlxprLX1PX6U
+tfL0eaeRij1T+W2rzc6Lp5lfHEtY7/+WqndWHJF+zAVH+fOt2XpC1zrnYeS
eV4iZPoNssT0M+fD1drLHmsn8dtPvf5eexUczd75cLU8sSV5aJnamtA7X+v6
Kq2DXZuTi1Z7z6Xnpo7Ih9vzt5YP948yrNNeK7Utt383+vnR3kW/M/oA8W8j
dsf//eGc4lT5c1NqcXfv8gHMUdu3tlf8LPWFW/tZoTSvv3SflAzO+rmO5jLX
E995y325dT5cz7NdSmXPsIcA9FbLayv921Ie3ZJ95UtGzWvcm3ueOz+w9kyx
2jV3fnHqu+pdzsvaae/PG+tPtc/Ysm7fGm9i3q/2WrXX6LV/f8s1JxatqTdR
N+aceTW1l+QRy8axjVz3H7VPzJLn8Ufmwl3q2ZzyZIqFmdqXkee79BpzldY4
e11z+oVHqH89HW3uqbdY+yh9fuefrzcyLp5pfHGRtV9/0TP/8Pa6F//m1MFM
fYFrPfNQMs9LhGy/QZaYPvq8vTl9st7npcZrlu7xHvlqlTPNT5FjMtre+XC1
e2nu62Vra2pnB/e4Wp77npOLNurc1N75cHv/1s5L/UcZ1mmvTT2jcT1PEvlv
pTbw+or7Lf7+2nKNVOrD7P2cGcASpXnwHmOJ0lmgc9YfajnykV+9tqx7OOvn
OqLIFZjT/x7RzyqNa7Y6L1U+HGdUeia3dr5Mbb6hVxlb12ljzBFlivgaVzxz
XHpOqcdz2K3zAjFejTmuD2X7KK74/+M7bvn3c9ZqS23w1GeOcXR8V9G/iXui
x/x0vGa8VrxmjGVbP2vrXpy1eeTW/URqeQ8tz8m2jOvjfeK3id8yYurlPoj/
O9aC5+zz0PK5wtz1mihj/F7XsTr+7yhfy70+5/nVzGXj2Eau+5fa0bgP49/F
fRpXPOfa+hz1kvNQWutOlCnmSS9tTrRp8SxJS85Xaw5TtliYrX2J9v36Kr1W
xM7bvz8Vz3qMuVpywi9X3NMf7qX/7WfFv50zt906ljpC/evtKHNPvdX2BpLP
3sdecfGI44va93X9mbfu14fWvTzju45yfCjbx5e9uObke8+9R7L1BVp/0zl5
KJnnJbL+Bpli+qj+WO1z3vbJ4jPdvn6pbsZ9cFuWuOI1LnMV8ZpT/35tLC3l
olj3b7dnPlyt/sz9HTO2NbXXijp2M5b5/2PjiI8tn6lljnFuLtqIc1N75sNl
+a1Htt9Hk2Gd9trUPRLvW9qfvOVaszfwKLXnUjOWGaCmNFbtMS8XfbCp15+z
Zlfbx3/OGfeZnPVzPYKt94fruVdgqZ8vH44zKt3zLc8ZldrpXs/z1MZHMZ6v
7aldirn3Xq+lXC3r7S1rLxHvWuZ3W7+vOXkA8XennpGL9nrJulX8m9Lv0fJb
tH7W2txMrAOV/n3trJuW/Udr61Ix71Yrx0V85y3Pi7e+3px7oeVerZ2xEVfr
/huZy8axjV73v72u16LuifawZV18zpxmy7xyS7+1ZX6yNubKGAuzty+l8rW+
Ru11WsdcLbkRLXMTrTkaLWP47PVvhKPMPfUQ92a0PS333ln2cdjb1nHxyOOL
zP36UHutGBvV2rO5a5Mt90jGvsC1XnkotXLtNS8Rsv4GmWN6r/5Y7bVa+mSl
faJa5uVqewqsGQeXctft4dpur3y40t5+l2vOGlvGtibm7Uqv0Rpna3sWf6hL
xb7pkly02nvOPfe9Vz5cxt+6pWxzXucRjMyHq8WeHle2XMbavWzPVOCIavlY
a9fUer12bX+eo7bBZ/1cj2BEP6vWv+pR7tr+y0v2lIbMYs5j6n5v3SuiNMff
Y7+N2nxxbQ+7a61rtS11vdZHiGvunFbts/bYV+WmPS7O1V+0PosdV2sOZG0/
kJY92ULLeYFT/7bWz2jNtS6t6S2tA6W6OadsrffCnNzV2r4IrXMVmcvGsW25
7j/n2c9aG9+ak9LS7s05+7C2P1ipvckaC7O3L5WxUnP+z9oxV0ueX2s8vqit
ubXExcz1b5SjzD3NFW1R/E5xxXfcsiZ7ufbOUTyTLePi0ccXmfv1tTZ7zri4
tGfk3Hska1/gWo86kHVeImT+DTLH9F79sYbXqvbJSnMTrXtklXIF15yxU3oG
celrPqIt8+GiTWjNfZ4zhsna1pT6FHP7k7X4WGurluSitZybOmdM1iMfLutv
fdGz/T67kflwLfdur6t1jDFSbawxN3cVIJPSfF3LniFTSrFi7l5XpXF0hrM/
ljrr53oEo/pZpTF4j32oan0a+XCcTWlvrF7r8mv38iy99pw554uWsVpLXa/t
K7Z0nFZrh1ra0JY55zlzKS25F3HN2dsglOYD57xW7VnQe2c/tDzD1vLetdeZ
m0dwrXQvtPaDWu6FJf3ZWl5Iy+fOXDaObat1/yW5GqWytfYza/tiLClXrd5M
zSlnjYXZ25deY6U1r9MSB5euJdT2L6yt62aufyMdYe5prtYzluK63i8uw3rH
mWwVF48+vsjcr6+VrfV889vXbNmnsXaPZO0LXOtRB0pl2XNeImT+DTLH9J5z
12tfq7QG0nqPlu6ppesopedmnKEyT+mevZzjGb/1kivGKFFfoy2a0/f6cH82
PxeRsa0pxcel92jp/OFae780F63nuak98uEy/tbXRp8BeiYjv6vafHzva8/n
pVr2j9yrbAA9lJ7PWZOTVVrHaH3up6WMGeZ1lzrr53oEo/pZtb742nLX+jTu
O86m19i2NN+yZG74ojQH0bp/3T215yRrdb22l+ScZ5vvWftcb23OuWU/+1ul
ubu4luy7VcormFvG2h4Tt32r2t9v3VupNB7usca8Nh7V7oU19bN0n7a8buay
cWxbrPsv3UuqtEdM43p4Mf7MHUdeK+Xi3MshyBwLs7cvGfLhat/R2nykNevU
WevfaEeYe5qr1n+8XJecnDX9e6ZtERfPML7I3K/v8ZzMPS37xJXukcx9gWtr
60DWeYmQ/TfIHNPPlg8XSjmuS3J6Szk6ctfnae0TbXnNubeytjWl3K81++6V
Pmvp363JRav9Xq17T63Nh8v6W1+TD9du5HdVW6u9vWK+JHLoos8dV/zfpb2Z
59a/UWp7PccVfcU9ygbQU6mdW5KT3Pvcx1JMO3L+zlk/1yMY1c+qPT+55JnY
i9pzOO47zqY0pxu5QnNeq/Y80NJ6X1qbXzvOKM0T1up6aT1i7nd3T2ldomW+
vWGNe/bvUXvNJfsAlvaFmPscZ22+5rp/Vbtf5+xvXhr791hjnpoz7ZUPt+Yc
gdr62ZHLxrFtse6/pj9bij+1+74Uu9f2U0v97Hv7bGaOhdnblwz5cKX7cEle
y63anHFpHiVr/dvC0u9sSu+5p57vXbp67P3O/8kaF7ONLzL360vPn609Z6+2
lll6/cx9gWtr60DWeYmQ/TfIHNPPmA9XOo9wyV5Za+5N/lG2fLi5sSNrWzNi
f7hw2e864m/k68RrRf+09uzsmly0lpyblrzWtflwWX/ra/Lh2o38rlr2o4y/
07JHc+083cu1Zv13iZY9rXvUC4AMSjFjyZnQpXWMJa+3Rd7YJR5Fn2TqithW
+vPrK16r9nzlWT/XI9izn7VkrBPPI7b0t4z3OZPS/lhzn/WqrXfNeXb7Wuk1
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
Q/QR496JNerbvddHzfH3zJ2pzE3MXhvJUDaOLeu6f+21a/X6KOelZoiF2duX
rPlwW5+XOnX2Zcb6t4esc0+jlfIA9z4j4KiyxsWM44uM/fot9mpakg+XvS9w
bUQ+XM+4MeK81Cy/QeaYfvZ8uBDPoxbK9U/zcp4nG2d0Plyp33h9XedNtTpC
W1P5bn4S63GRl772DPTaM94j8uHCnHNT15ThKL91r/bbOm3+dn1EP6z1nLHW
fSEBzqqUJ38vP6v0PE70w3qUqXaW9po+4xpr+4Bn/Fwx7x9/J/rPe11xD4/8
fo7czyqN/fcuG6xRurfjirFzz6v0Xi1rEaOe/7nWOx9uTU5VT4+yXjVlae7n
kvf6oeFM1uvvP+aPYtwdc5Br9zJYM8cf+14s+bxzylg7Qyhz2Ti2rOv+tdeu
1evSGn2mfLgMsTB7+5I1H25pLCxZsq6asf7tJePc02ilPufoeYyzyhoXs40v
svbrt8jHKs29LsmHy9AXuLamDmSdlwhH+A0yx/RHyIcrPfN9r1889XflBKw3
Oh8utOT2LJkLOUJbM0fEvHj+YuleaFGvpl57VD5caJ1rL+VGniGuhF7tt3Xa
fOPfW6X7fkn5S89e1WIkwKMpjVEiR/7275f2OJt6JnqJ2rlgvd5njh59wLN+
rjM7cj9ri2dvYQ+ldnTE2Um1cXrt35f2wbl91n6pqdyCUn0vlSvLmcqPsF5V
0jKuvXctmeMt7cFyueI+W/qs36h8uJ7njS3tD2UuG8eWdd2/9tq1el1qh7fe
Myl7LMzevuydD1dZ2++6//qSPIKM9W8vWeee4ruK/niUL9YUeu6jXvrMI870
fQRZ42K28UXWfn2pXL3a7FIOxdRvkb0vcG1NHcg6L1ErW5bfIHNMf4R8uDD1
urd5UUvaAdptkQ8Xas9CxxV/Z85rHqGtWSPa8thzo7YGeblK+zSPXDOcc27q
0jIc5bc+2phuT1t+Vz80ns814/Um69OS8tfOortcpZxXgEcztc5/b35uzt9d
I/ptpXa85/x/qx59wLN+rjM7ap+09EzsHvcZ9FLbB3rEe9ba7to4ujQG7zUu
mXqPUjte2p8nSzvxCOtVU2Lvk9J9V5sbnDO/U9tDIvp/a2PeqHy4Xn2V0j40
pTnC7GXj2LKu+9deu1av43nsqX/Xc8/xeD454lnkuMS6WPy323Jlj4XZ25e9
8+FKsTJ+89b3b1GKk1M5JRnr356yzD1Fvyde59579Ny3v7Qen6F9OaKscTHT
+CJzv77UbvUaF5feY+q3yN4XuDYqH27PeYlwhN8gc0x/lHy40hzI9dmZ8Xzg
1N9b8/783Vb5cKHlTNA5e30doa3pJXLOWvaNm6rXo9cMW85NXVOGo/zWRxzT
7WXEdxXzIREzoq7EPXXd5vTcTzRi1FTZ545vW3PhlpwpDXBmsV/mVJt5/XxY
qc2ONYaeZSrthbtXe96jD3jWz3VmI/uk0d+K3zvGirGnVcy999oTo5S/47kA
jqz0TPmocw9Ka8UtbWXpXIde6/5Tz/6VylZ6Hq93+x/t5ZI28+zrVVNK90xc
l31Uans/tO75UBtLL9074lrl9VfN8a8tW4g4XPu+j1g2ji3run/ttWv1ujT+
6HUGcKneXOdJZY+F2duXvfPhtlrnKOVwluavM9a/PWWZeyr9nj3zzEu5J5nW
4Y4ka1zMNL7I3K8v5Yj2GsuX9sSZ+i2y9wWurakDWeclwhF+g8wx/VHy4Ur9
g+t2seXvsNyW+XAt+4jNGT8eoa259uF5rlX7p9b6BVNrkVusGdbyHUvPPp0h
roQjjun2MuK7KvVNe81NhdLZpnP2uSzNf1yXu0d/H+BsSuv812dLl+byRsTm
0vtdrt7vWdOjD3XWz3VWo/qkpfmBHme09D6PHjKoPes+8tyDWt5R6XyR2p7Y
a8tWiuO1drxUrl752dftXbRN8V3GnEbk7db2MDv7etU9tdz5689ey9VsXdMt
xboec8aleevWuFQqY489gEp1vFYXMpeNY8u67l977ZZ6XVqv7nFfl+bOb9cU
MsfC7O3L3vlwtfjS+v41pfuplNeUtf7tJcvcU8N5NV3WD0pj8ljL6PEejyZr
XMw0vsjcr6+Nc9bW71reROm3KP27vfsC19bUgczzEiH7b5A5pj9KPlyYGkNc
8hZK79/rXOBHt2U+XGhZS7vuR9ZkbWviv0f9i32qru/zuWfC3lMa802NKbfI
h2vJdzxzXAlHHNPtZdD+cLW+6ap81IvS/Fc8o9jyGrUzk3rWTYCzmuoTXT/r
PNXGjtqPp/Se98o3WimHe26cOevnOqM98uHWzo1v8cwt7KG0p0RcI9+7tl9X
bX6iNPcw51zLe0rfS60dL5Ur5mDWlKvlPfY4hzLTetU9DXu+/UPOdCmOx9Wy
v0/pPXvMZ9bmL9fO8X/++edv15Svlmt75LJxbFnX/Wuv3VKvS+cd9dg3aeq1
7z3jmzkWZm9f9s6HC6XPsLaPFWr5A6W8xKz1b09Z5p5KaxI99l4t7UH34Tda
/QzcI8oaFzONL7L360tnt62te7Vz4UqfP3Nf4NraOpB1XqJWtgy/QeaY/kj5
cKX5j8hrWHpmL+22zocLpbb9crXmO2Zsa0bnni15xmqLfLha2UrXGeJK7fNn
HtPtYdR3VXqGKfIa15a7YVxYfRarJXe05z7nAGdVWuePebrS83/Rno8qV+n8
ltsyjipDxKPanMrcPuBZP9cZjepnlcYUa/supT5c9J3WvDbsqdRebXHmUK3N
Lv3b0pzd2v2317TjtWeL1rYZtTFf7fzms69X3Vqa21aaj4yr9tzjknOFWsWc
ZEN/Z9Ucf1xrnvUu7fvT8ixu5rJxbFnX/Wuv3VKva/N5a8pVGmvdOw8scyzM
3r5kyIcr5Wb0OOOk9huUype1/u0py9xTKSd3bRsUSn2rLZ9/PJuscTHT+CJ7
v770XX3494v2Z6y9bu3zZ+4LXFtbB7LOS4Tsv0HmmP5I+XClvXzi/p6qI/Zl
7WePfLiWNr61LmZta0rf69o1wlK93vO81IvaualnjSvhqGO6PYz6ruKZq9Lv
uLbcpb556/NetfrQK78T4BFMtaUxXog86Ht/1vMM7Snx3HtLHyjGPL3fe+pz
9+gDnvVznc3IPumI8WNpXcvvyZHV5j62ODOw9ix8aX6ttrfI0rNramt5a/eP
Xxvna3MatX9/9vWqa7X1pdJnru3xU/sdS7FjzrkT95TG/XPiaS0fYek9UdpT
Na6WXJPMZePYsq771167tV6X2od7eWutSvVm6vn3rLEwe/uSIR+uFj/XPDNR
W+OozV9nrn97mir3lnNPtbHFmvumNt8yYo7nUWSNi5nGF0fo15fiYvzZ3Das
9by12m9R+rd7j4sv1taBzPMSIfNvkDmmP1I+XKg939/je2DaHvlwoRTfLldr
HytjWzNyX/BSmabqxpb5cLWz2M8aV8KRx3RbG/Vd1fIm1zyLXDvrqGU9q7Ye
ZV84gHmm2tVoT6f6uT32C23R2g+KPsja531iTXnuPr1L+05n/VxnMrJP2vvs
x9rrjRyTwmil+a6t9liojc9r5aitjc2NqS1tesv8QOw5VvtcS57Tr81Vtcy1
n3296lptfan2PGjtdyyt69bupbnfxUXrPHWPfLi45s4R1tbCW5/Ty1w2ji3r
un/ttVvrdW3P7CX5KLV2Z+rfZY2F2duX0tzsnL281t5Ltd99yb1Uyxn8ULZi
bM5c//aUZe6ptr/ukrMDW5497P05HknWuJhpfHGEfn1t3TGu1ufdWs/faPkt
svYFrvWoA1nnJULm3yBzTO/VH+tRli3y4Vr6aNeXfXP62isfrpbPe3WfVtuI
jG1NLbd76fMUpTpdmsfeMh+uVs6zxpXQs/0+u5Hj39r9tmRtvrZW2zKPU3v+
3b7jAPO17Hu/pH/Zw4/v89HcssU8fuxJG/+29voxzxJ9o9p86NQV8y8+1zmN
7GeV9ni/9Otb61jtWUxjf46sVlemzpAcodae1vZar7W7rfvh1Pbyvm5HWl6v
5bWm9tS51XIed2sbevb1qovas16t93jt/pz6fLX55Lm5FjFejzXt1v5Gy3pX
69xYa+ysnU374R5tisGZy8axZV33r712axsfas9UR/vT8lpRJ2rtTu28kpZ6
vHUszN6+1HIattpnrmUuI+6P1s/WktPUki+Qvf7tJcvcU8teFK37acV33tI/
b21DuC9rXMw0vjhCvz60vGaMkabqfrQjc/eIavktWl5nj3HxRa88lFqZ9pqX
aCnbXr9B5pjeqz/Woyxb5MOFOXVf7O1rr3y40JJP3RrnMrY1tedk5+7hWcvH
Ka39bZ0PF+acm3qGuBJ6tt9nN3L8G3NFtd+09Rm7KEvjPVI9B7nWz4o/j3so
6vKIK/u8AsBSc/Kmts6vWZI7drmiLxVzLREfIm8oxvVR/pa9/kvXh+cHqnHr
ET/XWYxeZ6iNS+KKtZZ7c4Dx32rPuPQsK+yltnbbkh/cSzwPVBuHlP597dyt
S9s+tR9Fy9zP9dU6P9D6fG3MK009nzZnH9LW/TbOvl5VK8/cz1p7biyuqX/b
cl/W5ofi3mhdE5n7vc99VjTi473YF2VsWX+b8+xf5rJxbFnX/WuvHVdr37PW
Bl6u6Avce83oD7fkLrWsi2SMhdnbl5bvLMaW8d6XMeq9Zwd63Eut39WHsdXd
vmPMg7eMpVvrT/b6t6csc0+1ZxLiKvXNW9uguNacA83fZY2L2cYXLff0nv36
UHvm7fqKGBJ1NebPYu5z6ZxnS9ky9gWu9cpDyTovEbL+Bpljeq/+WI+ybJUP
N6eP3Os9+bs98+FC1P0e9TpjWzNzbHw3Xzz+e4zpWnLLSmXZIx9uzrmpZ4gr
rWVrbb/PbvT4t/U5i6k80jlrtS3zLmvyBnpd8smBs6qt82doC+c8lzjyan1O
+NE/19Ftsc7Q+uxL9PNjPnJuzmPr87mQVel+j7Zzy7K07M/fa6+Xy+eLOl+K
EaU2ZM78QEt+7r2yxXzBnGf45pxZZr2q7Xmxa7U12ak15dYxe/zWsQ4Vfz+u
+Hxz92a4vVrOfZibE3J9r8y9T+euu2cuG8eWdd2/9tof2q7mfnJrLsltvZnT
H24tT7ZYmL19WTJHe299oNe9NCcexf0Tf7/Wz1pTpiPUv71kmnua05ZcnkeM
+2ZOTt+odcNHkzUuZhtfZO/XX8xZ9279PD3akmx9gWs981CyzkuEjL9B5pje
qz/Woyxb5cO17jU7dz8t6vbOh2u931teK2NbUzuH8/qKPmyU5TKmmdOnrZ3F
uUc+XJizP/qc1834W4ee7ffZbTH+nfM7XK/VzhkXtq6/L50L6nlt0aYD7KFl
nf9y7VnO1rmdEdeHM3uG7J121s91ZFv0s1r281l61cY2kF1tjnyPc51rz8m3
nG25dp3hXht+77/PnR8YHYdq++fdOvt6VY976Z7aHNhUvVm7v2zpKn3vLfs2
3bsX5sxJtV7xHcz9vjOXjWPLuu5fe+245vaT5+TEzb3mPhuSKRYeoX2ZW557
cbHnvbRkP6M515wx81Hq3x6yzT2N7APNPZ+SaVnjYqbxxUXmfv21ln3KWq8Y
Y5f2fJxz7nKmvsC13nkoWeclQrbfIHtM79Ef61GWrfLhQkv+gbMG+9s7Hy60
tA+t+/Jma2vCyBgeV8tc+l75cKGlPTtDXJnzeVva77M7+jrt3N9udDvQcsmH
A86s5RmEDHuIRe786Lnu6yueCdgit+isn+uotlpnaH2ubc5lXzjOIJ5XL93n
e6z31ebsYxzb8jpznvkrXZFDEHul3/uzJfMDcVbYiHizZLx+5vWqmH8qfV9r
PmNLTLl3Vtycc4tar+v5oNK86dJ9FWPNZe55PVPX0vXqzGXj2LKu+9deu6VO
31NrF+deMX+49HmfLLHwCO1L67k+pffrfS/Nff5/xv1095zVKUeqf3vINvfU
q2++ps5TljUuZhlfXMvcr79T1o/XrvnFvEG8Vs+2MUtf4NqIPJSs8xIh02+Q
Pab36I/1KMuW+XC1vWY9TzZGhny40BI3WsuTqa25mLPf1JyrdW+xPfPhWvaP
PUNcuejVfp/dVuPfeK0R9W/OM+9znh0becmHA86s5dm8TPuIRVlKz/+tvWJe
YI+8orN+rqOpPFvafZ2hxzyUOXfOpHSvL33uqofas1ut44X4e2v2ebmMpeLs
l3t/vnT+L9Z7ez0rHmPIpfFmxJzz1HcV15rzuOasV7Xsh7+2r1Xba6n0Hfb4
7ePeu60HpbmL2vOpU//2co/PnT+6vWJObOl3nblsHFtpjr+1vRq5djeinxxt
X4+5xx45NBli4VHalznP2t/rm1Tmtpv387kWa/I9nqmOftrS/YiPVv+2lnHu
qdRPnHvfeO6wv6xxMcP4YkrGfv2UyG2Z227Hd3Rdtt5rpRn6Atd61IF7ss5L
hCy/wRFi+tr+WOlzfihLtU82qj28p5YvMOf8ZtqNaofmaj1zu/X1srQ11+Ie
7lGeS5nm7JdYyqvfIte09nzTGeLKtR7t99ltPf7ttZ9g/F5z75ERz7UsubZs
0wH2UOrXZs4/j/a5Rz5R5FjE2kCWeeSzfq4jKOUTjPoeo3+0pE8ecxZL14sg
o6lniy/Xns+o1HKN5ualxprBnLn/aM+v1wen1hNjD9A1nzPao9oefVNXtGNr
1wFHzDmX1l7XlHdqvepeTkbtO116TmprmS5XaVwbfxb3z5LffapuluYra/dq
670wZ0+gqHM9zlzOXDaOrVQHW9urkWt3I/vJ0Y4s6Q/HHGnv/vCesfBI7Ut8
zqlz0mr3R2ntdW25Ip4tuZfis6zNFzxq/dtS1rmnyMtZkhsS7bY89nGyxsUM
44uSbP36mnjtaOPi/W/biKiX8frxHdxbWxy1d8je4+KLHnWgJOu8RNj7NzhK
TF/THyt9zrha3r80jzdiDq+0XmKOfIzR7dAcpfv1cs0d9+zd1twTeXFLc5aj
jiwt09Rr9mjTW5TmNHuME7L91mvb77PbY/wbrxt9ziX1r9SPbnnfJfdl7yti
eu/vFIC+4nmH2P834lWMz6MvEX2oyxX9tvhv0SeMWPohTyzNvndTzvq5+Gcx
bo8xW/yW8bvGnNT1bx19qviNPXcO5xFtfMxzRL2Ptjzq/qVdjzX+aP/3GvPG
PEGsDUY5ov25lO0Se+K/xVyUvOtziecm4zeN3/bS77i+L+Nejfy90bFo7vpD
rPvFv7m+Vy/ljTo257nYI5cNji7iScwhRp/3tg261J2oT1s9t7p1LDxi+xJj
mIgJ8R3EdxVX9F/id9yzfbu+l277WXHF/RVj7A+/nfVT/td1Xk7UuxiTX67L
mDzum6h77huyy9KvH2nEfqO3HmFcnHleIjzCb7BW1v5Yb1P5MnEP7F02ji9b
WxN1N8oTOVzx3tEm37bR8WfRfstjmSfTb/0o7ffRxBp7rNVe3yPXa/I348KH
7HsAAAAAy4x8Hv/MZQOOTfsCAO1K+xbtXTagr8gLmarvzngDAAAAAOAIMueE
ZC4bcGzaFwDOJPY2iX1r4n9HnGUxdZ7VVme7AdtZe7YrAAAAAADsLXNOSOay
AcemfQHgTO7lq8X5wxHv1r52nA03lRsTZ1v1KD+Qx1R979GeAAAAAADAFjLn
hGQuG3Bs2hcAziRy3+7FtciTW/vaT58+/fNUfsybN29+0aP8QA6vX7/+5VR9
H7H3JAAAAAAAjJA5JyRz2YBj074AcCalnLXvvvvuX5e+bpy/OvW6H/JjPur5
OYB9ORsZAAAAAIAzyJwTkrlswLFpXwA4k5cvX/56Kmdt6R5x33///b+UcuHk
x8C5lPJqIzd27/IBAAAAAECrzDkhmcsGHJv2BYAziX3aSrlrcZ7qu3fvft76
eqX8uss15/WA/f3YTvw09ov88X9/cv3fI9ct8ltL7cdeZQYAAAAAgCUy54Rk
LhtwbNoXAM7myy+//Esthy1yXl6/fv3L23NOIz/m/fv3P3v+/Pnva68RV+wj
tdfnBJb56quv/nC9b2TkubXU92gz9i47AAAAAADMkTknJHPZgGPTvgBwNrH3
U0tuy9pr6fmrwL5evHjx27n1Xd8YAAAAAIAjypwTkrlswLFpXwA4ozdv3vxi
dC7c7VmLwDHEuahz6/yPPt673AAAAAAAMFfmnJDMZQOOTfsCwFl9++23/z4i
Fy7OY937swHLvXv37udz6vyrV69+tXeZAQAAAABgia+++uoP9+a+P/30078p
G3BW2hcAzu758+e/75EHF7Excuz2/jzAOrG3Y2u9f/ny5a/3Li8AAAAAACz1
zTff/ObJkyd//fzzz99ervj/nz59+mdlA85K+wLAo4iYF/ufzs2De/bs2Z9i
P6m9yw/00ZIPF33i77///l/2LisAAAAAAAAAAJT88MMPP4193l68ePHb2Cc1
8t3i/PD4v+N/47+/efPmFz/+vY/3LiswTuS5Rp5s1PvLFWej/lj3P9q7bAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABH8f8A/DnfcA==
    "], {{0, 1782}, {
    2500, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> 500, Interleaving -> True],
   
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{449.56484375, Automatic},
  ImageSizeRaw->{2500, 1782},
  PlotRange->{{0, 2500}, {0, 1782}}]], "Output",
 CellChangeTimes->{
  3.740252996121529*^9, 3.7402531639093733`*^9, 3.740253293717545*^9, {
   3.740253332825734*^9, 3.740253419837123*^9}, 3.7402534528173*^9, 
   3.740253506519487*^9, {3.740253537990347*^9, 3.7402535425398893`*^9}, 
   3.740253777955985*^9, 3.7402541598074827`*^9, 3.740256463588964*^9, {
   3.740256678984177*^9, 3.74025669446663*^9}, 3.7402570834804087`*^9, 
   3.740257169016244*^9, 3.7402573438388567`*^9},
 CellLabel->"Out[236]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzt3Qm0ZlV1J/CX9+rVRFGAcQ6o6ZhkpTvpLNPdiZ1OjNG0iZHOJFkriRJF
ESgmmeexRqAminksJgVR5nmeCikZi4KCogqIEYRiLAYxiNPp8zvf2ffd93ig
mKAPcu9aVe/77nDO3vu/93/vc8699/t/m+2y1Re222yXaZ/f7H1/vtNmO2w1
7fM7v+9jX9wp7xr4pb6+X7oh//vw+/p8Tn198d8pKW/96Vvf+tagT30D6V/+
5V98Ld9+t+5bu3Ztuvfee9OPfvSjvo3LvsH0/e9/P91xxx3pnHPOSddee216
+umn+/5rOTYuvfjii+mKK65Iy5YtSz/+8Y+3KLv7TqmtffWrX01f+9rX6rm9
faeeemrZ3+719ttvT/PmzdNT3yfKvgkkSF/5ylfS9OnTSxtHHHFEOuigg9Kj
jz7a91u1xWeffTYdf/zxac899yRh7f03a6ta+OEPf1i+ja/7yPvMM8+kl156
KffR2/ed73yntETndUe5dqBnueeff/59raM/+MEPqn16//tuv83f3GJfP5vk
vmO/Task+N73vtdfRcsnlcv9tfmbT+uvWoYs/uXTijhZULtBY8uNlUajhWiN
ocGW1SV/T5Xc5GmnnZbOPvvs2P+OqkNL6/jc1191rkKVb7Hv3/7t39Jzzz03
ZKX8f+jHwv21XfguWLCgiOl87Q60+iRG9M1i0T71IDMkx4RhMraMVa6b0JKh
bo3faQfSvk2tJhxp+NrOyHZHsceUtu5lI6t9F1xwQURVaZvf5n1hHpe88MIL
w8zYdrYAnaiaq2LF5eG/fDXcZ6RF6vdoySEGbryqZ6m23rYrr7wyHX300QW3
Yp9+Zw/WPmjX7oMKWZUwboCexRtVqxB/NCf67ne/W8BpnxdOQdTJdV9L4MZ5
9BlWqqD1CGuEE6xf/u/7jWoSzeCW4447Tjfjqms98sgjhZ5mzpxZaGf27Nkl
gh577LFhYXDXXXelww8/PO/LZ+V9Bx98cLrqqqsYpW+dct7ktGTJknTWWWcN
c4/zzz+/nDt37tx05pln0vw9tdnchSZxcvXY/1U497DDDhOg6V//9V/LZyx5
wgknpJNOOindfffdpel77rknLVy4MM2fP78cv/HGG4uYTz75ZDmXkWyrV69O
X/7yl4thbd/4xjeKSA8//HBp23Gb84888sh0yy23FF4/5JBDimz6vOiii4qJ
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
sMTDtQgKaZbnBBnDaBvJ8nXRzOOPP5auu+7aYc0w6kMPD2/m2WefS/e2xlwK
gvvuWxnNIKoYeEYzDz30cC7RbhqGzR13LGvW2/hsfYlINLNq1X1NWTYCG/4l
Wtp3BMXMaoNNFV4NmsuRnFd7/6spy4s1Zk9PRx2+YKP838Lc8OGHzk3z5x2c
y//LS/ViKDtrthsajsgCH7roiNzcgdNnlqGyWdgppbmBMjk0e+b0dMQib+zp
tZWbTYccNLN0rTvtHXnkUXnsOb9p66CD5qbj82hFW+vWthYumJ/m5uuOPmJh
09bsGd77c1w+o9fOEUccmWbMnJMW5VY2LG2N87m0d/Ahc7MRL5vS0vSUk09K
cw+eSaQNW9ItnHdQrpCOKC06jVazZh/USLdgwaIs7SFlXj80dd6XvnRamn7A
Pvm8XltHHjY/HTxnZklXjrPa/vsfkBYsPCxrENKReHYZ4+VzBmtzxlmxSD5x
OLzi3rChPScJMvN+I+HlwoYX5WahumB3TR7nn7jvn6b7v7LxhmnllzfO7a86
feN063EfTYcesHn69iNrSs+rVq1Mm289I22/96UbpR32vTRfveN+l6e/+Yc9
cgvXaHWd0uhgOfvuFVmo7f4yLT/5z9N9p2/c12t5IN1/+ifSifv9eebCG7Ng
RBlI8xYem/552uK0035X5POGmv7stKPTl08/k5BTqrxr1jyWjlo4PZ0754+G
5B1Iq7O8x+/5R+nM009uWj36mBPTP2w2b1irO+VW/3nrE9O+B8zN/PNItPp4
tsJF552Rzpzx4bT6jMYK95+xcbpi/ofSqcfMzjo9XoqaJXkE+Zkt5+b2Lus1
OphFvSxtvft5aZsd5uQEdX95Xdg6rZavuOLyNH/HD2WjfqLX8qR035c3Tvec
+hdp0b7/mFatfqC0nCkhfXqzndO03c7RZMsSV6Z/+tycstryxBOPjy8tD7QH
M9UTGoeIcaXngQN8hb7gG52Ll925PF04989S+vonLRpf/0k+tmST9MyFH0/H
H7xl+mG9/fOZZ55OW++wIO07f+VG6YCFK0X5olVpk01n5CaWVfpyb+sT6ZCd
P5FevOKvUrrhk70Wc55e8nfp/Hl/mVbcc28j15HHfClttfulafqi1bnnaHJ1
mrbr2emCCy9tbq856eiD063H/kmWcJO+ofY+mR3hj9MlF549NK1x6hnpM1sv
zu3dX9sbp+3cx0VpxhyP+PyoScfXXJSuP+IjKd34yaEmb9wk3XfaR9LZpy5o
mrznnhVpix2Oz43d1zR54KH3pT0OWpZ23P3wPCz5TjSpyj5h7w9lpf+uNjmJ
AdKPrv7rdNKcT6e1z/beDvLsM2vTZzbfO+0++1ZNNZpPX/RA+uzWR2fGvjvu
T44SyAqGopQb2HC9teNch7xqCXR7ThvnH/JnjJW7+cE1oP3RdZukp87/eDru
oC3T938Q0/NPZmjnp33mrdgo7b9gRb70gEPvzdBOz03c3kD76KOPpYMztC9c
9lfph9d+stdi7v+6v0vnzv3LdNfdK4Zc7ujT0la7XZwVXJl7jiZXpmm7fC2d
f8ElTZPm8xcfdVC6+ZgM7w2bRJM/vu6T6ezZH0oXX3BW0+TJp5ye0T2x2kyT
oFiZu7kgzZjtKdIfNFM9V12Yrj38owWERsrrN0n3nPKRdNYp81uvG7sro3ts
buyepskDFt6Tdp9zW0bX2/eeiyZN8R2/14ey+f6uNjmJDdJLV/51Wjz70+mp
tb1799c+/VRGd6+026ybNdUof+ChqzK6RyljAt0YgnIcC8dm5HA57m699rED
9o0GbNzmb33OwqIaLJeq4zpA36CAbtAh1yHXIdch1yHXIdch91MgtyDtt3DV
Rvowsjns/vT3m87skBvbyK1d+3TadLNd0t/+08yNcqTNypdusuns9LGNv2D+
sUNu7CJXfqVj2Z15sLH0PeWNaQPp5ptvHTFd3iH3C0Vu3EjkPtCh8nqiYiK0
Lid1qIwZVNyqURdyO1TGDCodg3WodKh0qHSodKh0qHSodKh0qHSodKh0qHSo
dKh0qHSovB6ojHxkqUPlF40KROJ53A6VsYJKx2AdKh0qHSodKh0qHSodKh0q
HSodKh0qHSodKh0qHSodKq8HKvEesw6VsYIKROLVJR0qYwUVc8b1TcYdKmMG
lS6vdKh0qHSodKh0qHSodKh0qHSodKh0qIw1VPoGmt8w8ebC/vICwQnlBW/x
myU27xb3ltXeOxY7IMcgkOuW+Rnv1/eTWH6dwY8UxPvcbOZu7PO2d69kvfRS
r3jswByDYE5tfvoLUN4k7cW9XpgavznjJzj8UIC3FHsdNOAzgAMdnmMRz8He
FWvXll+S86tq7XdV+30T70zFvbHPz1B4y7Jvsa+bFh9LoPakmFh+LM1PWKDW
+pbk8lpkP8X1wgsvhLBeeB0/edcGNF7U3gH6iwa0x52932L2LlTU6+fA0Ctw
h379vPcKcz8d1kYT3xKrQ3MsoBm/Re9d1aoh7z33K0T1hwJCSCDG7912PDsW
gcx7/RyEH0nJhVAVatDPG5cXi/sdDD8I6KdzQ2C/HOfXgUaC2lVEYwbUqeXH
M/wOk9/VlDctZMqZAtWv4vgdPD8jrOr1c4BAbv2EbIfnmMKztF1+SwCefr5V
pavg8fJ4m0BtH2v/DngH5lgCM6TwQ1uqWz96Hkj5xZj6e3bdTNCYRK+baO1Q
6VDpUOlQ6VDpUOlQ6VDpbmTvUGmjIk7q7552qIwZVMz/1F/C7lAZM6h0DDZW
UemyfYdKh0qHSodKh0qHSodKh0qHSodKh0qHSodKh8obG5VuxmWsoQIRd3V3
qIwlVLDXXXfd1aEyplDpGGysotJl+w6VDpUOlQ6VDpUOlQ6VDpUOlQ6VDpUO
lQ6VDpU3NirdjMtYQ0WcLF++vENlTKEiTrqXrow1VDoGG6uodNm+Q6VDpUOl
Q6VDpUOlQ6VD5eeDyuTatLfw1K2ve1/SWESqh8qk8jNMS5cuDbTKa+vOO++8
8h7fk046qbyirkNw7CI4OZ188snptNNOaxD0efbs2eUes9NPPz0deOCB3oU+
0IE4BkHsm5pWrVpV3h/ozdjnn39+eYUrzG6++eb09NNPl7csP/DAA6VlbzJz
/MYbb+zwHJN4Ti5vwN5qq63S8ccfXxgUfnvuuWe6+uqrC9Ze5vrss8+GvIsX
L05f+9rXyreyrx+k4zskf/FIvvDCC+Wd5pEfMStGtbmvWiS++OKLIa9X8lYi
bnTwgohrrrmmi86xgqkNXfqRCW/+9EMTXnMemNqfa6CQF9z1tygaHUz5dq9i
GSuY9qSYmK688sryqlZ8Gr8eIvrQ75NPPhnCekOv+rYNaDePP/YAnVLetSyH
Tps2LX6EoLyXV4TecMMN5bsIllvvvfferh4ai2AGKn4KZrfddkO1VbLxpTsv
yEa/M2fOLAOZDHoH5FgEMuYA8OSDDz7Y4s9xZZ8i58477zRC6aYLxiKA3YRp
h0qHSodKh0qHSodKh0qHSodKh0qHylhHxRzebbfd1qEyplARK3VRskNlTKHS
MViHSodKh0qHSodKh0qHSodKh0qHSodKh0qHSodKh0qHSofKmx0VNyjdeOON
HSpjChWxEreOdaiMJVQ6ButQ6VDpUOlQ6VDpUPnPiMpF8zIqSzfJTWTLZMnS
jX+fnr8YKlt0qPxCUPEwxext/yide9Cf5ibOnv2RLNk5cz6SvrTvH6aFB05L
P/hhh8rPH5XvfOc76Y5ly9Jtt9+Rm7g9/z/gc7rtttvTgw880Pd7HSQ/L0j+
sTN1Z+rO1J2pX+uLdO+///7O1K+/qU31ebtUZ+qOQDpTd6buTN2ZujN1Z+rO
1J2pO1N3ph7Dpu6vNvAKKuZ+6KGHvNJ4oPboHbkefnviiSeaicEOldf/7X2l
bVYvb2WM96QeddRR3m9bjhna2z9nzpzyns3LL7+8b7TXEXUIvV5vs/1x1t9r
+PzztrbnnnsuHXTQQeWde94K7vM555xT3mS7cuXK8lKwjMpAB9LPDaSBtHbt
2rTHHnt4HW0VajBdd911af78+emRRx5J++yzj1frNQIvWLCgvNbWt/4WUvHS
xDZSh+zyifTiFX9N8Q2zQTdhgxs+mc6b94kOqdeOFDS23357P8nWIHXBBRek
RYsWlR8E23///a1JNQJ7l159WWKzD0pePNxG6pFH16T9p30k3XfKh9I3z/jo
hulfTv8oUL/ykbR47w95d3iH1Gt7sey3v/3ttMMOO6RZs2aV9xWY+txpp53K
faisLy1973vfC3lHe1kw4iPcEFADhT+/vPiwdPIRB/RtlE45anred8qRB6ZT
jj04rVnzaIfSa0Pp0UcfTTNmzEjXXnttKRwOOeSQdP3115eWpCNFQzZ5yHvq
qacOD6fycu79O5u/Fg5TBvD+IVIZbLLHY489Vl7g6mcmQuCDDz44XXXVVS/L
NlEX7NeZ/7VUZDYpQ62MpKQUL0XOtXGp1o444oh0wgkneCd9CQVwZFhGq8g6
y7/m0Uqm/PJ6fwHgzcVeTW38aHvyySeL9e2XNpYtWzbqaOVnMvuRc9Jtx2Wz
37SJe7qKjb6ey7A5f5zN/rU3r9nbY3Tv7+996/3P240UX3rppVHH7T+tnafW
8xYfdXBa+MX/mc6a+eF83pkzPpz3fXXmn6QZW/1+uvTCs9+8Rh5tKuq1Gm/N
mkfSiruXp7tzVtiQPrS6a3m6Z8VdeXzydGe80Yz3e51ROqN0RumM0hnlZ/uZ
7s4otWle4vduOqOMeNfkLbfc0hmlMcprmu94c5uio9fOKJ1ROqN0RumM0hml
M0pnlM4obwqjdGPjUR4Su/feezujjJwwuPvuuzuj/ALC5/pslBuO/KgVvL6h
1bxN0uovMcq8MWiUnwPRMsr0Lf5HOm73P8inHrvbB/O+43b/YJqz5e+kL5/w
n9QoTz31ZLr55m+km25amk9dunRp3nfT0qX5+03poYe+9Z/LKB/olO2UbSt7
wt4fKuy5obcOZWV/nBPLD67+m3TSnDeZsktzuLsz4bFz/m8+9dGzPpaVXXP2
x9K3z/xIOnLfTd5cyj74wP3p6Hl7pcWH7t63UTox/z8xnbBgl3TqCQuaW21G
KPqG0jNe89Pp8EbW4XUsE38uOsBg+fLlb2gdYOAu3zeyDm8GX3qzxHSnQ6dD
p0Onw1jQod5v7mGLiy++uDwg5gEXt7O479nmXvQLL7ywPD178sknpzVr1vy7
7jcfM6pPLY+WnnjiiWnmzJnl6atrrrkm7b777vErAOn0008vx5YtW1Ye6vH5
+eef//c85DBmtB8oj0R7bOPBBx+sMzyT0mWXXVYetn366afL85yrV68ulvBM
u0dBbrrppr43ifqPP/54UT+r0DxgJAbmzp1bHr3zUNezzz7bTH5xFM9k+NZ+
wMhj/m9IE0wuj1N7tGTevHnpjjvuKM+3eazEZ8+JevzkxRdfbD996FHRtgXc
/Hb11Ve/US1g83SfB8o9TMMhEB1msJjDGt/97ndDW0/1jbSAsvquu+56I1vA
g1yondYeHaX10qVLi2vvtdde6amnngptZYdzzz13yAKv171+rzf32w477LB0
1llnlc905++cWcrbb7/94kWE9C+esWLFijcF+fW0l9U8z4/YPKsvu9HUZuYf
8rzCk68nnXRS+v73v/8L0H7LHY+rp2p4XJq+6L6058HLsvaH/2zax2ta6ABs
yT7z/EDd7RUtV155ZakHssY/50ony5k+tfnctN3eV+dTt9v7qnzq9vtcnbbY
5eK09Q6HvCEKVV3sufestMPOHj7fcZcD877td9wvLTj0GNmkb8wqMKsTrBOs
E2yMzS2GYE9nwT79uT3TrrNuzYKtdPa9RbD702e2OiotX37naA9mKGVfZ8Ge
eWZtmrbtnukzW8xOm28zf8P837zcQv6YPr3ZHunelStHm1GWZ15XwQZKSWNp
/7E1j/S9p/yfRz2PrZHWyhnr/1wd7PI3cm+f3eakNOOw+5sqZMZhq9O03S96
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
\
\>"],ExpressionUUID->"db838cb7-d91c-413a-9fc3-f77b1289e93a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Callout", "[", 
        RowBox[{"0.25", ",", "\"\<VGG-19 v1\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.256", ",", "\"\<VGG-19 v2\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"1.20", ",", "\"\<Ademxapp v1\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"1.10", ",", "\"\<Ademxapp v2\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.15", ",", "\"\<Inception V3 v1\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.14", ",", "\"\<Inception V3 v2\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.069", ",", "\"\<ImageIdentify v1\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.062", ",", "\"\<ImageIdentify v2\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.18", ",", "\"\<ResNet-152 v1\>\""}], "]"}], ",", 
       RowBox[{"Callout", "[", 
        RowBox[{"0.14", ",", "\"\<ResNet-152 v2\>\""}], "]"}]}], "}"}], ",", 
     RowBox[{"Ticks", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True"}], "}"}]}], ",", 
     RowBox[{
     "PlotLabel", "\[Rule]", 
      "\"\<Speed Comparison for Various Neural Network Frameworks\>\""}]}], 
    "]"}], ",", 
   RowBox[{"ImageResolution", "\[Rule]", "500"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.740254021181561*^9, 3.740254162195964*^9}, {
   3.740254192345426*^9, 3.740254193723054*^9}, {3.740254247503889*^9, 
   3.7402543208377953`*^9}, {3.740254527254233*^9, 3.7402545481608067`*^9}, {
   3.740254652413972*^9, 3.740254658305537*^9}, {3.740254753428434*^9, 
   3.74025477103249*^9}, {3.7402548035671377`*^9, 3.7402549499825153`*^9}, {
   3.740255009809696*^9, 3.740255014567869*^9}, {3.740255092288353*^9, 
   3.740255209261424*^9}, {3.74025526741122*^9, 3.740255348183608*^9}, {
   3.740255386907238*^9, 3.74025541596345*^9}, {3.740255469027834*^9, 
   3.740255594905636*^9}, {3.7402557441277037`*^9, 3.740255779394342*^9}, {
   3.7402558322458143`*^9, 3.740255859573105*^9}, {3.740255912850069*^9, 
   3.74025591310723*^9}, {3.740255959937502*^9, 3.7402561092699947`*^9}, {
   3.740256143105859*^9, 3.7402563498470488`*^9}, {3.740256387468261*^9, 
   3.740256418963141*^9}, {3.740256472265489*^9, 3.740256591713854*^9}, {
   3.7402566306557007`*^9, 3.740256667281982*^9}, {3.7402568569178333`*^9, 
   3.740256877149562*^9}, 3.740256912104727*^9, {3.740256992863188*^9, 
   3.7402570188951902`*^9}, 3.740257079450289*^9, {3.740257173886156*^9, 
   3.74025717479668*^9}, {3.740257349414626*^9, 3.740257354180118*^9}},
 CellLabel->
  "In[237]:=",ExpressionUUID->"3ef63a13-3910-4cc4-90b1-7bd626933fb5"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
3HDO+XDn2HdPYa7+hpr6Tvrp39pv089hbgM4b6n14ZZut6Ov6StLjH2GvF78
fqwftT9Wioi+6th9n2jLYyyVMz9zOHey9PpY0R/HeHDMngSxB0Ec6zX6robL
/X2p+nmsvPFZD1+rlXy41No1e23EqvcCU/u5xpoopdqxqHtRD3L2kD1Vf0vf
c+5r506dK7EmTWqtmGPt75BrlmgTU/POx45RXB/NfVxabv/jO4j8n9x7CX3H
Oo5RyfnuuDbKrYtxvZlzHsXfH5vniXPp2HtFlNq/OcoY13xjj3GUJa4Tl2oj
a2yfwpg2KuZRxtTxqINz5/UMFXUgPuuxz59Th05FHNOxfVuNdWXJ9mMpUfdT
ZVxiLjA1fp1jPfBa+6ql69kSfdVOS+d1/FvpNQnjXs2xtnb3flEfS7xPa2OD
qXLm+HOvGUvvg7hGfkuNcxktn2e19f219l1byYfTXizfXhy7DkvNA8XPT53j
+8+oH+YlHJ7DpeZI+q6H4n1K5Wr0XXNNqR8tjc/manvnzheIuYNTfdP+9xjz
fVPeZ6qt5MPpu/OYqx+nhr5T/5ZH/9Z+/3ZucxvAeYs2OdWuRZu2VHl2bXD0
h7E3aowDo92PsWj0WUPb1r4x5OEa8GPyIE6MQWe9doljEH371LLuIvrMJfLL
Gi73TSXqxv6eWK3kw+Xs9bX2fEKItuKwbsS/RbtR6nyM18rZmzU3Yixb6h79
kHYu6mGJdi5VpqG5o8ci2v6ljksL7X/Ul5J1cD/i+q9Efcw95ofnbE4c5g2k
5oimXItF2zfmer4vov+b6/qw5vYpDDkX47wvcez75hiXVqI9LFXPa64rS7Yf
S8lZly0+z9zlSJWhVJ5QqL2vWrqezdlX7bR6XpfOw0ytez91nfnWxgal5M7x
51w3RpS8zl0yv6XmuYyWz7Na+v7a+64t5cPF72kvlmsvhuZVpGK/TUl93yXu
JeSMpY89g1z6fcaMIVodn83R9s6ZLxDzB7llW/u5ua3kw+m7yx6ncE5z9afU
1Hfq3/rp317Wav92rnMbwHnLyYeLWLucY/X1Sbs+MJ6hKNn2R8w1NsydNxoT
c+ZgtVruuD9YsqyR6xmv20o+XM7zAWuuu7ITOYtxjTBX7kOJXKlTUSKfMKed
C1OflduPU/Pu8V2UHE9PyRPYSvsf/fSUZ3WGxNR7xTnHfEq7un8dOcc1Z1y3
zTWfdngcSqm9fQp939V+H1Jy7msXSz7TccrQZ2/HnhMptdeVJduPJeWswTHn
+6dyF0odm1b6qqXr2dzPC7d8XpfO4Zjr+qrFsUFJQ+pw7rVGqfvRS+W31D6X
0fJ5tnbfv4W+q8V8uKC9WKa9GLO+Tl/s17eYg+v73d385xQ596ujLk19n1j3
qGQ9bHl81tJ4eEiuwJp7Pu5sJR9O313uOIVzm6s/pra+U/92mv6t7f7t3Oc2
AHLawBL9/Br6+qSX1o5K7hc7NkqPDee4T3wYc8ylKfd3x26N3b7fqSUfLufz
rF3GOeU8q1MqpszN5OSalH4uOOLwuZj4DHMcm7Ft6Rba/7guXaoO7mLK9Xbq
mE85pw73eyp9zTlnfTiM/fVCx2qlfQo5bVTJOcA5jvcUa+fDtVJXlmw/lpQz
1zbnWoapewUl5hxb6quWrmdzzY9u4byuPU8ntDY2mMOQOrz0PohL5Le0MJfR
8nm2Zt+/lb6r1Xw47cUy7cWc+XA5zxZOPaa592ynvk/qOOW+zhbGZ62Mh3Oe
+SlxrEo6h3w4fXfecTrnufpDNfad+rdX0r+137+Z2wDIX5O35L7lS+nrk+69
997XzN32Rw5+ic8xd972kb66yNqmrZZ7zmcdcqKGfLica8xW82RzzPls0qmI
cfmYsqausec8D3fXv3OPqeNatORxaaH9X/Ja8zDG5keknsOaMtdzeH6UvuYs
vU54KqasW9ZS+xRS8xFLzH+t+XzamvlwLdWVJduPJeXc7526NueU9556bFrr
q5auZ3PMj27lvK49Tye0NDaYy9A6vOQ+iHPnt7Qyl9HyebZW37+lvqvVfLig
vZi/vZgzHy6kztEp6/vl7mdT4H1657Jy9iAMWxmftTAeHpIrMGYucS7nkA+n
7847Tuc8V7+v1r4z6N9epn87XaaW+jdzGwDD+uCIuG/ZSl7c1Gv/6CdibBDr
5EbE/aqh/ebUfOgxnyHKHWPKiLH9/NTcslbLPea+dZQ1yhyfucTYooZ8uJw8
2Tgn1i7nHIasSXysHkypv2NyNkrPcY455+YeU5eee8iJNdv/sfu4Rvnic0fE
f0/5XsasV9R3zKeU5di6ACWvOeN7Hnus41nRsXM4Y8ZSrbVPYa56MTTGlL2E
MfUrN/rGPK3VlSXbj6XlPGcxx/um1qabemxa7KuWrmel50e3dF7XnqfT0thg
TmPq8FL7IM6Z39LSXEbL59kaff/W+q6W8+GC9mLe9qL0tdbhuZU6rlPWDxpy
T3jK+6Tu8+/WceqzpfFZ7ePhnJyyvde9aeixmdM55MPpu/OO0xJR61z9lOOz
5Fhb/3aD/u3lvx36fi/Vtyr6N3MbAC8bmwMU69/MucfPVGPHnvHZ+vLQYy5m
SD8wtu1P7XF0WOYY55wa10WZh/R98XpjytxyuYeMR2Mc9FK5XzGuieu0KevB
1JAPF7k/qXKuud7KXIZeY0c7ENcGJ+rB98TPho4Zh7YXU66x49yKeh+fO87B
+N8oc8n1muLzx7kSn+ul97gpzuvoP4a8ztCxfsvt/5Cyx3cV10ynrrHi36PM
cQ095NpvzP6CqXKPvfY8ttZeqWvO3P0W4juPdQX76mF810Pa/qFzRy22T2FK
GxXli7zSGGvGsY82JMoQ38WQsUbEWuu1R3kjLynefz/inMwp86mI1zz1ni3W
lSXbj6XlzGvNMaZKzTtO3eOkxb5q6XpWcn50a+d1zXk6LY0N5jamDi+1D+Jc
+S2tzWW0ep6lyr6rI0PaqF309f1b67taz4fTXrxsjvYi+vr964d4/9R7xM/j
945dexzem071l1PqZ86c5C4O9wccIvUdpv5+a+Oz3fk25P13Mfd4eGCuQJH9
Y0o6h3y4OepPznvuRwt9dyq2PFcfau87d6/b9zr6t+Nl1b+94vxYvX8ztwHw
SlOfGYgxWarNXNqYseeQ+2apdRd2MWaMNGQt2iHrj0Y/nDt+HnMPsdVyh9J1
JMYnY/Lna8iHyyl3C9fpQw1pM4Y8pzIk13LofZAx7VzOPfBoy6esIx3lysmX
jrXXcl5v6HqErbb/uddAcf085hzM3SM9Yuhrj32+L457XBdHRN08bH+OrQFe
6pozZx5m6DNpQ/qrId9hi+3T0HLvIr6XnHmPaKdyj3VN9wt35ipvi3VlyfZj
DanrrDE5yH3i/Mlof0Zfs7XaVy1dz0rmw23tvK45T6elscHcxtbhJfZBnCO/
pcW5jFbPs1TZ52iTt9h31TS+1V7U316EeAaj7zWHPqORKuPYvKShc1Fj3iNV
/pz7uFsbn52KtcfDqXpbos7N7Vzy4UrXny323afiHObqW+o752pr9G/6t31z
92/mNgBeqSu4p3z0I9GvRr7AmuvHDe0DI59v6HvkjsuH9is5rxmfb+zYK3e8
P/T1Wy137jh/zFq9Q9eKqyEfLnXu1DTvWkpu3Yp1gse+R+5+IEPWMRrSzsV1
xNBzY0yu9NA6nHM9PPSZqFbb/5zrlKnrXOX290OPydBj3vc5oozxjN+p773E
NWeXsV/8lL15ctr+uNbOea1W26cwtF7kHpN9uX14TXPjqfo3tp9tta4s2X6s
Iec565Lvl2p/pnz/odW+aul6Viofbovnda15Oi2NDZYwpQ7PvQ/iHPktOeWt
bS6jxfMsp+xztMlb7LtqmpfRXtTfXoTUeZyzf9q+1P3QMX3amPsTY9ZaTh2L
VNm3OD6bo+2dOh7OzRWIucua77vnzB+uXcYc+u485uqPyylnLX2n/i1dNv1b
3f2buQ2A03LXzxwTMX6N/Lgl940e0geOyYXYybmmGZLPnrOH1tT7WCE+c+p9
4vmarZc75NSRKXtZ5RybXaydD5czVpqyL22tcr6bEuu35D4/kft6Q9q5MWPn
IWs2R4ydh8iZ4xjyei22/13GfjFxLTa2rPtyrrmGtqMD6+KkNZtK5Biknkmb
updgTjlz25RW26cwsF6MXq8qpw2Zcq6XNlc+XKt1Zcn2Yw05854l54lS7zXm
+Y69z9JsX7V0PSuVD7fF87rWPJ2WxgZLmFKHc9qKiLH7IJbOb2l1LqPF8yyn
7KXb5K32XVvJh9NeHDfH3GfpfLhUvznmvBqyftAuxqyVl9qzLjVOyylXa+Oz
0m1vzvv1Hefc+1RT91ReQs7cYbQbsb7EEjG2buq785irf6XW+k79W3/o3+rv
38xtAPSbMyfusC2MNnnOZ3dy+8Cha/sek7N3Xm4+1Zz94KGcsWipezW1ljtn
LFriHnpqLLqLFvLhtjaWyVlbqOSe9yWfb8tt56bcZ8997mzKMcrc2634vmI1
tf851+xTy7ovdYzmuqdVIuejRI5Bav5oyjNSO6kxVU6/2HL7FHLrxdTjnTNX
OvR+0ZzmyIdrua4s2X6sJfX8a4m53zD32gMt91VL17MSfdVWz+ta83RaGRss
ZWodzr3nM6Z/Lp3fkipjrXMZLZ5nOWUv3SZvte/aSj5c0F4cV7K9CKXz4VLX
NGOORYxrcurC1HOhb54rNS7f6visdNub836n6m/u/alWntcemr+0RIxZg0vf
Xea1Shyn1ubqU69TW9+pf5unTh3Sv52Oqf2buQ2AtBgPj9lve2xEHzr0mjtH
zmcoed2UGofm5BDljPWnrFM2ptw5+SKtljuk6knJ/bZyzocW8uHWLmNpOdeQ
pd8z9X6548Wcdm5qHc5d33DqszWp72HIOL3F9j91DTjmmbA+cf1X8jzPOeal
7tkskWMwZa2yfam6kSpry+1TyKkXUfdLlDv1bGGpZ4dLmCMfruW6smT7sZZU
m/tSezB5T9/UHOvUMVzLfdXS9axEX7XV87rWPJ1WxgZLKVGHc+5xRAydjy+Z
37LVuYxaz7Ocspf+DFvtu2oaG2kv6m8vQul8uJB65mPoPFFOHRhbx3ZSOR6p
e+9bHZ/N0baMaRtycwVqagNTKs2HGzze1HfnMVf/3VrtO/Vvx2PIZ86Rej/9
2zjmNgDyxVgl8gXG9tVDI9rOeCawVPlz+sAp+wUdynmecWqZS60dMaTcOTkj
rZY7Zz2ZknUk5xmLtXPNzi0fLudZpxJriB3KqQs515Q57dzUa8rcdf2nvEeI
uYBS52KL7X/q70vvEZhaN3uOe1qljnmJ+y2pdf1KnfeRgxXljVytmK+KsVWc
2znXna23T2GJNmonNcdW07PjpfPhWq8rS7fZa0l9xrH7mOzkjOGm9iUt91VL
17OpfdWWz+ta83RaGBssqcR4K6ddihj67HjJ/JZW5zJSZa/1PMspe+k2eat9
V025INqL+tuLMEc+XKp80bfmvtb169dffep1Ijem7x7FkLJPuUe85fFZ6bY3
5/0O24a+OlBr+5fjnPLh9N3m6g+12nfq314Z+rf891u7fzO3ATBc9BOpfPiS
Ef1/9A9Ty53TB5Y4Pvum9N3RR6T+vsRxGVPuvmuMVssdctbqKFnenPy7tXPN
zi0fLmfMPcdzDKWOc6qdK7Eucc41dok9hVPz1EOu/1pr/0O0VzEfEtfbcSxi
jZ/d55hjfenUddjQvWiWPOZL7Jea04fMrfX2KSzRRu2knrOrac68dD5c63Vl
jTZ7DdGuzllHI5+u7/VLrHnccl+1dD2b2ldt+byuNU+nhbHBkkqMt0LOmhBD
z+dS+S0tz2WEFs+znLKXbpO32nfVNLbVXtTfXoQ58uFSx2VInkPf2Cfmb/vW
ixpSJ/ryO1Ln1ZbHZ6Xb3pz32z9WubkCJfdxWco55cOVOmZb7btLlb+VufqW
+079W5l2I0X/9nKU7N/MbQCMF7k8cZ8l9VxAqYh84inlTfVJpddVDqk9ivry
rlO5WXPut50qd9/4udVyh9R9yaH5IDlSuaVr55qdWz5cqj2LOjbXe6f29suZ
3061cyXKn7nezORnPpbMh6ut/U9Z43pz6P2VJZ/3Wyofbmi9K6319imkvquS
e5iWrtNzKl3W1uvKGs8LryHnedsp81Gp41hiPrxP7X3V0vVsal+15fO61jyd
FsYGSyqV3xJK74NYKr+l5bmM0OJ5llP2OdrkU1ruu2oa22ov6m8vwhz5cCH1
/ee+Tt/YJ+pQzOOc+nnuOnmp55RT8zZbHp/N0fZmtA2vit/LuU5asm8o7Vzy
4fTdN5irf1nrfaf+rWy9PUX/Vr585jYAyoh+OtaNi/uYOfuKj42YBxlbxlSf
FH1RyWMSUs8y9n2e1PhyzjFH5B72vXdfXlir5Q6p/YDnGA+k1lpeO9fs3PLh
Up91zv3ZcsalqddYIu8rp05MfY+wZD5cbe3/GpbOhyvZbpS635Kq17uIOYFo
u5de67v19imkvqup+0PuO+d8uNbrypLtx9pSn3Xs80CRR7dEX720Je9LlK5n
U/uqLZ/XNefppD73LtYaGyypZH5LzvXEkLaqVH5Ly3MZodXzLFX2OdrkJcmH
016UVqK9CHPlw6XKl7MvYN/3vssFSJV/d++5T2reJjVXlKqTLY/P5mh7c3JJ
cnMFaptTG6LSfLjk+XJI353HXH3+39fed+rfXg7927D3i99Zu3/L7Q/OYW4D
oJRoK6PPjfy4VI7R0BjbH5TK3x8ip4879bepHPw51jPaibFb33v3jflbLXfq
mYncseZQqfuVa1875lxPlVzPZ02Zz1IVrwN775+sg6lnnlPtXImczqVyTJbM
hytR3kNT2v+lRJ2L69e45k/lspfOhyt53Vzqfkvq+bNTxyXmQ3LXIxhrC+1T
WKKN2ivzWebDbaGuLNl+rC21p+nY56P7nieOmGPN47nM1VctXc+m9FVbP69r
ztOpeWywtJL5LaHkPoil8ltancvYafU8S5V9jjZ5bmv0XTWNbbUX9bcXYa58
uNRcSM4x7ivbbg4yNT6JdYhS79O3XlBqDZ6tj8/maHtT7xflzTnXI0qWa2m5
+XBRB5eKMZ9D353HXP3LWu879W/6t7HvV0P/Zm4DYH678WSp9ePG5AitMW80
ZeyQcwxiHBdjqJIRr3nXXXf9RN97992ba7XcSz1HM/R9186HC6nx3Njr5tqk
rovmXLN7J5U/nBqrp76rnOeUUlq5xt7XWvs/V3muX7/+6ni+Z0yueul8uJLP
GJW635L7nFZfRM5+5LdM2ePwmC20TyF3/fgSzjUfbgt1Zcn2Y205fUW03UNf
N/Wac6yLWsKSfdXS9WxKX7X187rmPJ2axwZLK53fEnL3QUxdw5TKb0mVo9a5
jJ1Wz7NU2edok0uqpe+qaWyrvai/vQhz5cOFvrn/nDnEyEc59ff7Y46+8y3n
2d0pdWHr47M52t7U+w2Jlu/N5+TDjWknl6bvzmOu/mWp49pC36l/07+Neb8a
+jdzGwDLi/YyxiCxD/bYtnfoWLGvT5pzjYRU333s+iYnB37tOHbPutVyh9S1
6Jxzi311s4Z8uFQdrmnedYoYR/d9zniGae4ypOZ4U9eVc8w7H2rlGntfS+3/
FNG3Rt8Y8znx7E5cH0c/WyIPfYZ8uGKfveR7pdZUGhJx3KN+lZjb2kL7FJas
F+eaD7eFurJkPalB6hnNof1UqTVD5lJLX7V0PZvyfls/r2vP06l1bLC0Oc6Z
nJzgXfS9Ton8lpbnMnK+o9rPs9r7/hb6rrX7933ai/Uj5zmjOfPh+u7355Sv
by5l/2/jXDz1e6m8hNRaLan70Vsfn409V6e835BYIh9jLmeUD6fvvmSufq+M
m+g79W/6tzHvNyTm7N/MbQCsJ/qeWPs+tV7u0H7/0Fr5EGP63iHzPGvFlsod
5MOdlrpPu5X14UrP6Y+Ruq5MrYftGvu4ltr/XPEcU8zpxPlZel/yEt9rq/lw
oW9N+SkRrzt2PfYttE9BPtxxJcu6hbpS+7x6aTn7Jgx5vVQbFn3HXJ/lUM19
VW3zo33vt/XzuvY8nVDj2GBpc50zJfZBLJTf0uxcRs53VPt5VlPf32rfVdPY
VnuxfuQc4znz4VLPZ8R32XN8b8qt5zH+SByHk+u/pOpC6jNufXw25Vwd+35D
Y875vDnJhyuv1b671HFqYa5+K32n/k3/Nub9hsac/Zu5DYD1xXhiyDMaQ3KP
+/qkWONzrs80Zk3kVseHrZY7pMZ5c45B+sZ3NeTDpcafLx3XatdAz5V69qWG
sX6qHrrGPq6l9j8lrvdKX2PlxDnlw4Xc/XjGRjznN2QPxC20T0E+3HFLrg/X
Ql2paV59Kanrn9w+L2csPvdnCS30VbXNj05ZH67187r2PJ2d2sYGS5vznJm6
D6L8lvR3VPt5VkPf33rfVdPYVnuxfqydDxf6XjtyVk79XV/e4+H3k1pvqC8v
YepedFsfn009V8e835hocd9U+XDltN53lzpOLczVb6XvDH2voX8rQ/82b/92
7nMbALXIbY8j5zj3Nfv6pKnX+GPfN+JYznSr48NWyx3kw52WGgOfqsetibXT
+z5jzvXCVFPnZl1jH9dS+39KlLPEmv5j49zy4ULs6z73cY29GrqM9fi30D4F
+XDHlSzrFupKDfPqS7vzzjt/su8z517zxDPxfa/TNzdbQkt9VW3zo33vt/Xz
uvY8nX01jQ2WNvO6x5P2QZTfkv6Oaj/P1uz7t9J31TS21V6sHzXkw6XWHxnz
d8fyHPvq26mx78Xx+b6pn33r47Op5+qY9xsbJcu4BPlw022l7y51nFqYq99K
3xn0b/q3oe83NkqW8dA5z20A1CS1R+PQvquvT+rLp59KPlxdMTYfbs5xXu35
cJHLnzquNZRzJ8ZYcU7H+H/I36XuRc99Dzm08OxLC9fYh1pq/4/J7Q+nROpa
/hzz4XZiDcG591tIPTO1hfYpyIc7rmRZt1BXzjEfLvXsb0TO67z5zW9+qu81
5ny+tLW+qrb50b732/p5XXuezjE1jA2WNvc5k7sP4rHrcvktN7R8nq3V92+p
76ppbKu9WD9qyIdL7fX2/PPPf/+xv+v7m2O/f+XKlZ869fuRL3Psb1L3gHM+
39bHZyXO1aHvd+wczvmb1vZNlQ83zZb67lLHqYW5+q30nUH/pn8b+n6HUVP/
do5zGwAh+oLII4k2Ku7Vr9lW5fQJufd1al0f6FjOTiPjw1fkdbda7rDEfZNT
as+HC6njWtPc6/61QlwbxBj9pfy43j1dU2uq1LAWdCp/yjX2cS21/4dSuQ1j
I57Piee99vvQkt/rlvLhdmI+I9qXua4R++rDFtqnIB/uuJJl3UJdOcd8uJBa
HzuVv516DjjarrnK3mJfVdv8aN/7bf28rj1Pp8+aY4OlLXHOjN0H8YzyW3qf
rW/5PFuj799a31XT2FZ7sX7krMUxdz5c6jjF/fbDv+l7HjfO2WPvE99x4li8
oi+N8/TU75dal7n18Vmpc3XI++3HLgcgxlpjzvWayYcbb2t9d6nj1MJc/Vb6
zpzPon+bTv/2cizVv53T3AZwnqLviDbu1BrDaz5jk3N9kLu+Tl+fdGyMUsqY
vjdnfBj9YIyj1opjn7XVcodUXZtzbrGFfLicucbca4a59V0b7/Ljjv3dmjmR
O1NzwFxjH9dS+78vnhXKvaY4FdG/x/kb1zPx/NqpZ9RKf69bzIfbF9dw8fxU
3zzDmDj1flton4J8uONKlnULdeVc8+FS+9NHe9P396k9LeI54TnK3WpfVdv8
aN/7bf28rj1PJ9fSY4Ol1XCdceq4LJXfUutcxk7L59nSbfIW+66axrbai/rb
izB3Plzo6xOP3f/vW5Mmxrqn3qfvc8R9/f3fTX1/cT7nfLatj8/maHtz8wUO
j13fGkmnzvWayYcbZ4t9d6nj1MJc/Vb6zh3927z0b+v2b1uf2wDOU2oN1VP5
6UtJ5SPnXp/39Ulz5vydyjPs63tzxodzlXeKVssdUvcg55xb7MvfqiUfLsY/
qe/2cAy+hi5jv7FT511qrJ+6D11CaoxZw1i/hWvsQy21/zupNulUHY1r6Dg2
Q5+5iWcgS36vW8+HOxTHL4791GdVT9XHLbRPQT7ccUvmw7VQV2o4p9eSaiP6
nj2Y0ueM1XJfVdv86JR8uNbP69rzdMaae2ywtKXOmdT+Q7vY3wdxqfyWEp9v
Ti2fZ0u2yVvtu2oa22ov6m8vwhL5cKm5xMO60Ndn9uUq9P3d4Xo4qTYgt35u
fXxWuu3Neb+IyA049repa53Dc71m8uGG22rfXeo4tTBXv5W+c0f/Ni/9W139
29bmNoDzlDMGX7N8qb4kd56t73Xm6k9yxnkn8uGSOT25+8QuqdVyh5yyz/Xe
fXWzlny4LrEHV0QN8685eXvxHNixv01dM8y5z9hOKv+3hrWgW7jGPtRS+7+T
+ttdxPVh7jqpfUrnBJ9bPtyh6OuiDudc0+b0NVton4J8uONKlnULdaXGc3op
qb7v1Bpvqfn63H0xhmq5r6ptfnRKjnzr53Xp9jh1vNa6vio9NljakufM0H0Q
C+W3NDuXsdPyebZk/dpq31XT2FZ7UX97EZbIh7s4VjcNeY+xfWHfujuHfxt7
RvSd97mfbevjs9Lnas779e3fkLreOTzXayYfbric7353DrfUd5c6Ti3M1W+l
79zRv81L/1Z3/9b63AZwnnLG4GuORcbeFzrU1yfN1Yen9njve99UX1JibD+H
VsudMybvW5Njir73rCUfLuTsHb/2dUvOsxj33nvva479bayRnlEHZpuPyMmf
OrWO+45r7ONaa/+jjqbqQkTJNRlL7xl97vlw+6Iu5N6niTi2fv0W2qcgH+64
kmXdQl2p/ZyeU+r5g1N1oW/eM2KOebPW+6ra5kf73u8czuuS5a1lfbg+JcYG
S6upDz+sOyXyW0Krcxk7LZ9nS9WvLfddNY1ttRf1txdhiXy40DeXuL9OSN/9
4FPPte7E2jp9n2V/nNL3e/GMbe7nOofx2dLj4dTf5+6XWbLMc5APN8yW++5S
x6mVufot9J379G/z0L+11b+1OLcBnKec/iXusaxVvlRfUmK/1Ln6ktRetH1r
NaT6kBrm8Y9ptdxhjTF56r5nTccrVZ8jllgv+ZRU/lHOeDf1t3M+h5FT/tRY
3TX2ca21/6k1wSOGXMfmSM0vyYebLtr7nOemTq0d3nr7FGq6N1bTPcPSZW29
rrRyTs8ltf9Ad2Svl77fj3ZnjnK23lfVNj+aer8zOK+LPXcU+5D0vVdN11dT
xwZLWvqcyd0HMb7P2LulxHfe8lxGaPk8W6p+bbnvqmlsq72ov70IS+XD9bUX
+88J9n03Oedl32fZPUufyiuI9X6GfLZUndvA+Kyq8XDIOdfX3lcuRT7cMFvu
u0sdp1bm6rfQd+7Tv81D/9Zm/9bS3AZwvnLa2rXG4SX25wqpPmmOPjx1P+vU
OlUhNb8457q0MU8az9TEsY1c+yHffavlDqk8/DnyQlP7e9Z0HZD73O1aa/fm
rF+XeuYmdc7OOV5L1b+cc8c19nEttf8551m8dunypurfOeXDxRxBPLsX/Unp
c75LrKff1+633j4F+XDHlS5r63Xl3PPhUnPvMZe6//upe8CHv1/CFvqq1uZH
ndf5UvfMxlxf1To2WNIabXM8P5I6NjmRe/xanssILZ9nNVzHtt531TS21V7U
316EpfLhMu7R/+GzHn1jnZy1yPvyLHZzgX3f25hzyPhsmBLvl9rHbxc17St3
SD5cvq333Usdp1rm6rfQd+7Tv81D/zZv/2ZuAzhnqT12ItbIPc68PsjKbU/1
SaU/X07b31f2nM9eam7i0KkxRxzDGGPF+Gpr5Q45z5SWLnOqXtY2PogxUuoY
zbUOSZ/UM765dS91XTdHHdhJvW/O+NQ19nEttf85cz1zrCuden5ny/lwUZdi
HHTqWr/0PGqqHT2Ve916+xTkwx1Xuqyt15Vzz4cLfZ//cO4v9Yz10OeAc2yh
r2ptftR5Xa68OddXrYwNlrRG25zT1uQ8g557Td3yXEZo7Txbuuxb77tqGttq
L+pvL3I+Q8ny9x373R6HfWXJeY/U88bxO31188477/zJoZ/L+GyYUu+Xm/9a
suwlyYfLt/W+e6njVMtc/Rb6zkP6t/JS76t/G3bszW0AvKxvD/P96FvPbA6p
PPQhbX+qTyrdh6fyc3Ly2FPlneP5l5zrjNQYutVy57zGbhxbQjz/kXq/2vLh
4lmanLYitQ5bSalncYaccznrMZesAzvxmqn3zbkedI19XEvtf05/XPqaLecc
2nI+XOq5s7FzIqeknvc6dV3YevsU5MMdV7qsrdcV+XDpdmn3nHGq7sw1HttC
X9Xa/Gjr53VqHedS9z1yjlPO9VUrY4MlrdU25zyzlrpnOeSaOvVetc5lhNbO
s31L1K+t9101jW21F/W3F2HJfLi+fjXu/fbNj+b2gTE+7vs8qfqRs0bPodbH
Z62Nh/elPn9ErfvKyYfLt/W+u1T5W5qrTx3b2vvOQ/q3svRv5fs3cxsA3y1n
r8Hc/qaEyFtPlWVIW52TD7Hbb72E1Hvl7F2Us25f6e8jJ/c/NdZptdwhte9H
ybXPco5TbflwIWeNuKHjsrFy8/Micp8XS82PzrH+Xc5zyjmv4xr7uJba/5y1
saPelypryDk+W86HS80blF6vP+ra2Ha/5fYpyIc7bo6ytlxX5MOl5+B3z/em
9laNPmWO8m2hr2pxfnTL53WpOdicepJzfdXS2GApa7bNU/dBHHL8Wp7LaO08
G/KaJerX1vuumsa22ov624uwZD5c33tFn9q3z9uQZ/Nzxi2nyjD2s215fFbj
eHgndR20ixr3TZUPl2/rfXep49TSXH3rfech/VtZ+rfy/Zu5DYDvlpN7Paav
HiO1BuxeP/J9ua+ZM5Yt1Rfm5At1GXsX5a7bN7W8O6lnDXKPUavlDjnPk45Z
Y/hQztpwtY4Pcp6p2UXMRc5YjqzvPSLyHHNft3QubkrOXq+5x9E19nEttf85
9brkvEBOfR/zvbaUD5eTV1ty3JOa++lr91tun4J8uOPmKGvLdUU+3A19zyrt
6kRqr9S5yraFvqrF+dGWz+vU+KjEXHrufEbO9VVLY4OlrNk2D7n+nHr8Wp7L
aO0827fQdeym+66axrbai/rbi5DKySk99z/2O8mZP99JrYFSqs3a1/L4rMXx
8L7UM+2lz8FS5MPl23rfXfA4NTNX33rfecyYfuel99S/7dG/vaxk/2ZuA+CV
huSZ5+zTPUZfzvx+DN3/JzcfYur4MJX/HDFkTdCcPWNLrSOcc4xyy95quUPO
WolTxghD1jSrdXwwJH82jmesc7LW+0cMub7InT8tsSZ0bu5v7vFzjX1cS+1/
Tv0r1f/mrH0+9ti0lA+X8xoRJcqakwvdV7dbbp+CfLjj5ihry3VFPtwNqT4l
Na9bes+DfVvoq1qcH235vM4ZI01Zq3fIczK511etjA2WsnbbnPPc2tTvfKfV
uYwWz7OdGq5jI1ruu2oa22ov6m8vQionp/S8f+o5jmMxdM2Svu++755H5GeM
/Vwtj89aHA/vy51fr23fVPlw+bbedy91nGqbq2+57zxG/6Z/q71/M7cB8N2G
jPt2EfdaugHrtJ0S7WDunq0v9SGD3jM3HyJi7Bgx9xmSIbk5ud9JHLtuwvrQ
uXsK5O4332q5h5R9zFgvvvsh51et+XBh6D4UcW0xta2IMW/ONdPU7yk3LzfG
6mM/S84zLxG1rb3U2jV2aK39z3mdqTmmQ/v7oetJtJYPl/P9lajbJdZ9b7V9
CvLhjpurrK3WlbXvodYiVS9S47AS12d9Wu+rWp0fbfW8zs2jGbOn1ZAcnYjc
66uWxgZLqKFtHrsP4tBr6lbnMlo8z3aWql85ZW+176ppbKu9qL+9CKl9CEvv
g5a7/9d+DM1jGvL88X5M/Wytjs9aHQ/vy82hqOn+u3y4YXK+31b77lLHqbW5
+pb7zmP0b/q32vs3cxsAr5Szn/qp9jLa1dzxZ/Thce09Zq3XMc+0DsmH2MWQ
sXRqHdBdjMlvyl0fNWLoumXxGXPzEIeO01otd8gdLw/5PlNzTaXqy5KG5LDu
Ip6ZiWMx5H1iXDfmWZspzwDmvsfQZ4ii7RtybgwZL7vGPq619j+3/Rmb65B7
LXvk/bLnIFrLh8t95i2u68bcQ8zts2IOIOf1Wmyfgny44+Ysa4t1pYZ7qLU4
1R+k5phKPUs9pmxHvq8q+6qW50dbPK9D7nVD7rMs8f5j5i5yx2OtjQ3mVkvb
PKZdOKc5mNbOs52l6teW+66axrbaizbai5ycnPhsQ57p7jPmXv7QucMwdJ6y
1Nphue9X0/is5fHwvtznpkt+linkww2z5b671HFqca6+1b7zGP2b/q32/s3c
BsBxQ/qhvnFW5K9EvxvrFsf/Rp8Yrz1kX9ap/erOmHyI3bih79p/yL6NY5+t
Gzqmis+aGlPFWrlDnpccU/ZWy/1S2bPGCLv3iDWLT71WjAf6crn6zofa8+GG
HKdjEe1BXHfGdU1cM8X3GxH/HXmvY5/pjZh6L3joHhuptTLjfMh93mUXffXq
GNfYx7XW/ufMje3Xu5zXjLqZmuNJ9c21XneWeq+cPaZ2EW1XTh2Ma8ghuby5
n7nF9inIhztuzrK2WFdquYdagzFrd489P4dqva9qeX60xfM6DHmPmEuNcdbh
faY4TlH3cp9FOBZDrq9aGhvMrZa2ecw+iGOuqVudy2jxPAtL1a8t9101jW21
F220F0Pm86K9iHLv6vLY+jZ0v4chz+TtDM3hLbVuWIvjs5bHw/u6zDVMa9k3
VT7cMFvuu0sdpxbn6lvtO0/Rv333eah/K/N+Jfs3cxsAx43NH5gzoh1e6/PE
30e/EuOOiDFrVY19TiUMGfvvR5Qz8hFjHBL/O6bcEWPXDW613GPLHuXc1ZGo
L7nPbZy6xqo9Hy6MeQZm7ih1nTfmGbH4Lvfrb9SDMe1P7jX8PtfYx7XY/g+9
jo77VXE/K65DImKOIP7/qIdj1nE8FkOeD2oxHy7ntY5FjE1253vE2Doy9Nq+
tfYp5/jKh5unrK3VlVruodZizHNES5Wt5b6q9fnR1s7rMPaaIcod9WPIudD3
fF/pPJ1T77/G2GBONbXNQ5+ZGntN3eJcxlbPs5L1a6t9V01jW+1FG+1FmFJv
x3yPQ+7Fjq3TQ7+LMe9xSmvjs9bHw/ty9oKLqGHfVPlww2217y51nFqcqw+t
9p3H6N9eGfq3Mu9Xsn8ztwFw3NixxBwxJRcurJ3fF88nTP0+xo4Rp8aY9Xu3
UO6QO96YK1rIh9tZ+xzbxdg1JE8Z+rxKiag516TFa+y16+aY9j/3+Z9SEXNL
qbo+ZE3rVvPh1srvHbteeEvtU5APd9wSZW2prtR0D7UGQ7+7mKdaqmwt91Vb
mB9t6bzeWeLaKsaQMfbq+/mQMrc2NphLbW3z0Dox9n1anMto8TxbeIy4yb6r
prGt9qKd9mLK/jBjnvkecv6N/S6GrHsX+ZJj3qNPS+OzLYyH9+XmOZX6PGPJ
hxtuq313qePU4lz9Tot95zH6t3lC/3ZDqf7N3AbAaUNy2+eKEutZp/qkeI+5
yh/7ZRb4Kv5QvNaSx77U2LDVcoc5x3oxh9z3jFNL+XBh6LrNpSOe9Zrjc919
990/ttRniPcaW07X2Me12v4vVe927UyqnR7y3baaDxeW7q+m5ha00j4F+XDH
LVXWVupKbfdQ13bxeW8acuxLPuOco9W+aivzo62c1/siZ3OuMu6ei+m7rzLm
+qq1scEcamubh+zbM/WausW5jNbOs6Xr1xb7rprGttqLdtqLKeUdu85W7j3d
IevTH8pdS2qutUpaGZ9tZTy8k1ufSz9HPZR8uHG22HeXOk4tztXva63vPEX/
Vjb0by8r2b+Z2wA4LfLbpzwzNiVK9d2pPil+p/RztDE+6UbsBZ8S/efc38dL
Zb9JuW8YMn82tG73jZVby4cLMaZaej2uqFdzfO/7+p5/LxFRD6bmzrrGPq7l
9j9yPOeqc7Fu+eHadam/yT3PWs6HC/E5S+2h0BelcnhbaJ+CfLjjlixrC3Wl
tnuoNcgdP69Vr1vsq7Y0P9rCeX1ozH4rqdi/biqdDxdaGxuUVmPbnLsPYolr
6hbnMlo6z9aoX1vru2oa22ov2movxrYVY9f6yH2/KZ8p97nmOetiC+OzLY2H
d3Kf015z31T5cONtre8udZxanKs/9hla6juP0b+VCf3bcSX7t3Of2wBIib5u
iT1Uoy0u9fz5Tkaf9Id5C6XW6F2irb/33ntfU/rYx9h/7r28Wy13KPWc9f71
Vd/YY8k9r0qLZ21yn1kZG/H6U56pGaP0fYWou6Xai9Q4tkR+VuoaO8pQ4rOk
zrUhz3K13v7HNWDUk5L17lQfmzpnc5/pWaIuDniv0decc+03FWOpbsT+Mik1
t09hyXqRWgO+VFtVwhplrbmuLFlPWpH7XMaac02t9VVL17M5+6qdms/rY2Is
V6qsh+PCvteemuvQ2tiglBrzW0LOsS15Td3aXEYr59lafX9rfZd8uGm0F6eN
WTN/7F4uOffR43yZ8nly1j6JvIsp75Gr5vHZFsfDIbddL/FeY+T0zS1c8+q7
67nubHGu/pSW+s5D+jf9W8/7Vdm/nevcBkCuaL9jbFIyNy7a8pgzK/3s+c7Q
+ZgxfcEceXw5Yqw59buIcdJcawVvrdyRPz8mLy7q+LH60ffsyxbWk419u+Jz
lHrmYNdWLL0f2L5oL2Iv6Snr4M1Rd1PX6Us8czb1um4n9bzTkDzIrbT/cU04
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
lkPPl6EhHw4AAAAA2CL5cAAAbFXXdX/8Iv6z7kbu299Z8H79qvlwfetjDV3f
LLVf5Ji9AVPr1+XuZXkq+nLaUnlGfWulTdkfdj+m5NH05a4c2zs0J2IvxlOv
OXatq756Mya/p2+dtt1rpvLmxuQzRu5VnDOxP2asPbZfP0rUhVPn6tTcyLF1
IadsOedCzWUrFX11cmgdj7o1tk2YGvLhAAAAAIAtkg8HAMCWdF33PRfx71/E
7V35dd9yY7V8uNTaSWNyzWK/zFOvN2Zv08hXOfV6JXJl+vYy7MuH68vhmrKH
62H0rd+Xylfsy10Zu65eXz7c2LWpSufDRfTlDOXElDXJDmNqzuYuYr26seXt
qwvxnc5ZT1N5sDWXrWQdKNFeTN03d2rIhwMAAAAAtkg+HAAAW9F13Z+/iLsq
uF+/Wj5cX25D5BONec2+fKmI2OtvyOvFWlunXmvo+nWnItY1O/b6ffklfXsW
xppupb6jvnzAK1eu/ObY73fo95Dz/abKcyr61mqbsv9jXz3sixJ7m5aOyF3t
yzVN5SL11YUS+Xp9eaWptfZqLlvJ6NtPN/d8jDbv1GtM3Ts6J+TDAQAAAABb
JB8OAIDWdV33b13E/1zBffpdrJYPd6lg3lru60ZOz5DX6su/KLXXYeRxHXv9
vny4q1evPnWqXJH3Er8TuTxTY+z6daljNzZ3pS8fbkp+4qmcxCn5cH25hKdi
bE5fyYjvPfa9jPymyEuN9cNS5R6bD1dqTbEp65bVXLaS8eyzzz6cajNS0bd/
8hL5aPLhAAAAAIAtkg8HAECruq77ly7iv+3W2xf1VKySD5dax23Ka5/KL9vF
kL0oI1/l1OuUyr+IPROPvX5frkzqMy4RteXDTdnb8tT3PCUfLqJvj9HDiJy8
pc6/OP6x5lscs8h7i3LG/r999b0vxubDTT2+uedq3zpvNZetdJzK+8wpR19u
bIm9o3NCPhwAAAAAsEXy4QAAaFHXdT94Ee+s4N78sVglH65v78WInDWpxkbs
gZpbzr78kSF5dX1xKserL9+sLy9kqZiSDzf22LWWD5eqQ/sR+WlznW+xVl3U
+zjv5ji3xubDDTkXx36HqfpWc9lKR9+6kql9ek/l7UZMWc9zSMiHAwAAAAC2
SD4cAACt6brutRfxdyq4L38qFs+Hi/yPSyvncuWW9VQeS8m1vFrNh7uUyEHp
K+PYNbFazIfrW1drF5FrNMe5FvlPc+aW5tSDvrow5Ts7jL41E8fU0xrKVjr6
2t7UXtKn8jqjfi1VfvlwAAAAAMAWyYcDAKAlXdf9lxdxfwX35Pti8Xy4vnWG
lorUWki7OJUnVTIHZEw+XGp9vaVizLpbqXXlxhyrSxPzl+bMh4t131LHccox
ORZRv5esB2Pz4Z588sn3l/rMY3Olai7bHNHXdpwqy3PPPffQqb+JvXaXKntN
xzEz5MMBAAAAAEny4QAAaEXXdW8odU/9G9/4xiO/8zu/8yuf/vSnn/nEJz7x
sQuf+MhHPnL9mWee+fSHP/zh/+ci/umHPvShZ8fEZz7zmU984QtfeHYXL774
4uy5Dbn7R84Zr3/96z+fU9ZTeVIl85fkw00/VhG15sPl1vcS7xUR+Uklv+Nb
b7312Ti2ly9f/tSp3xmbD5ebl5oTb3vb2z45pnw1l22O6MuVfOyxx35lyDGK
mHOf3yHlkA8HAAAAALRqlw8nLw4AgFp1Xfc9F/HTU+6hf/Ob33z4U5/61K8/
/fTTv/W+973v969du9bNFR//+Me755577v+PF1544bfmzA+4fv36ey5VkMd1
KTOP41Se1KWC+Rel90uNvRljDb577rnn1+eOvn1P5cMN39f24nx875T3e+ih
h56Yck7cfPPNL0T9ibyoWBMs97PUsF9qX97hmLzNGso2V/R9/yV+f66QDwcA
AAAAbJF8OAAAatd13a1j752/8MILH4gcuAcffPCfz5kDt2Y+XN86SRGxD2nJ
6HuvnFynvjyWWvPhpuZUlYpzz4cbm/vZl2PYFzn7su5/B5H39vjjj3/g2Wef
fTgnJ2tKbuipulByr82xexvXXLa5oq/9+NKXvvRddaHvnIv6U0u55cMBAAAA
AK2SBwcAQM26rvsrY+6Zf/WrX330137t1567du3av1gqD26NfLjI87nUk6Nz
aq++KZHKiUv9feQMnfrbw/WzxsapNb368sb6yrV0jsqpOPd8uL561xexP+mY
94u1ulKvHXVt7Hpkc+TDRT0uUdf62pZUfau5bHNFtF2nyhRrS+7/btTHU787
NndzbMiHAwAAAAC2SD4cAAC16rrudWPul/+Tf/JP/s8l14NbMx8u8rQu9eTq
zJFbEXt69r1nKnesL+/sySeffH+JMp56j75cmb59MUvl8UyNc86Hu3z58qf6
6l1qncShOY2pteEiL3RqvtAc+XCl8sFiTbNTZUvt6Vlz2eaMU99nrIm5+52+
XL6o40uXWT4cAAAAALBF8uEAAKhR13X/6dD75N/85jcffuKJJz63Vh7cGvlw
fetXjV0TKxV9uSiXMnJeIuft1N+Wygc5tSdrX9n69uIsveZU5JmMyTU513y4
vjoTsVt/K7We25B13OI1S73WsUit7Tg2Hy6iRB5srC2ZOt4tlm3O6Mup3a19
2ZfDHG3Q0mWWDwcAAAAAbJF8OAAAatN13b93EfcNuUf+e7/3e489+uijL66d
C7dkPlxq/aopuUypSOUd9e17GjkWfX87tWx9+Xp9eWOp/KRnn3324RLHbj//
LNYYi2MZeYCx7l5qDbNzzIeLvLO+72X/s6dyNYesHdaXJzRlz9ddRH3qK+uU
fLhnnnnml6eWr+8cT50LNZdtzuhr2+L8jt95wxve8NljP4+2YI0yy4cDAAAA
ALZIPhwAADXpuu7fvIh3D7k//sILL3zgPe95z9fXzoNbOh/uXe96129cmjGv
rC9S63XF3pV9f9+XzzJ0X8shxyWVN9ZXrshjKXHs+t5jjX0oa8+HS+VeRl7o
/u9fvXr1qb7fz10/rO99S+Sa9u0bfGliPtzrX//6z08pWyrXNvX3NZdt7oh1
OfvO0VPl3uXLLR3y4QAAAACALZIPBwBALbqu+2MX8b8NuTf+O7/zO7/y8MMP
f3PtHLg18uEu9eSERK7N3HkJfe8f0bcvYl/O0pR1klJrvKXyxvr2MoyYup/h
Rd14b9/rR55h39+fWz7c2Ny2U++9i5w1xE7tuTv1uETE+omp82dKPlxE3xqN
qYj1Ck+9birXtfayzR1953hffY61Ddcor3w4AAAAAGCL5MMBAFCDruu+9yLu
GHJfPNaFG5sL99hjj/3ehz/84X/6iU984mOf+cxnPvj5z3/+H3zxi198f+y7
+vu///vv+9rXvvber3/96+8ZE3/wB3/wf3z7299+z14U37+vL4fpUma+z9RI
rW/10EMPPXHqb1N7po7djzLyYfpeNydvrO/vp+5pGH/f9/p9OYQR55QPl8oZ
6/vMqTXEcr7HvryrWINwSj3oy7XbxdR8uLF1IvYz7XvdnFy2msu2RPSd58d+
NnXNvCkhHw4AAAAA2CL5cAAA1KDrurcMuSf+5S9/+e898sgj3xiSA/fggw/+
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
i724dy2mKz8T+1xhnpQd7MOFHtuWAX2G0HWo26847bTTrpz27KGrF9atu/ji
iy9Yy5VXXpmv7/BtzDT7cHfffffyddddd36YaeOM4bqHfWpjvvfh9cN8Yb/b
MNeFF1747vCfBw4c2BdmH+ee2njO4ZgR+jGdSTj3g90L4dqHezj0k2Jfn/Dc
rJ8v3A9hvkl1p+Ztrq6nquc8zvM97ddoEH04AAAAYObpwwEAbF69NP/zBp2u
D8Set01b071PSrL8rP55fq2tXlwvK/LFpdVnxT5XmAdlB/twoce2ZUCfYdeu
XR9Y/7OhzzPoZ795eu3PGzowoZcX9uOrmiX8/emnn/6hjR2jtvtwYb7wulU9
kfV5yUte8qmwr+G43bjQEwrvZXjttYTrdLBuYOgShT1uh80WfiYct87rhw5c
VV9yLaFjGeas6ixuTLg+G89tLeHPw/mMc+1CH23Q8cM5hS5f02OG89u9e/cl
4f2tcx+sv2937NhxTeh/tXE/bFzHMTwf4e+GPU8hxx577HXzOte4Ce93OI+D
3Z9re05PKnv27Llo0P26/ueqnsFJzRLu1UGvow8HAAAA0Jw+HADA5pVk+Qfr
9+Hy02PPOw3b0uLJvTR/a5u9uP6xV7YtFc+Ifa4wy8oO9uG2VPRMDrYHatX+
eGHdprbmDLM07RatZX1PpK0+XOgKHn744beNMt/B5myaQV209V2x8M91+kUb
E35nUN8o9Pi2b99+7Sjn+5a3vOXyOucW+j/DjjXq2mrh94Ydu8k6ZOE61e1C
1kk497buh9B3HWWm8Bkwav+sq3ONm2l1hcPzVud1ws+F5yv05kJfMHw2rT37
k+zDVf37QB8OAAAAoDl9OACAzSvJis/W7XAtpkUv9rzTtPXE838wSYu396/R
11vsxZ2f7Nz3/8Q+V5hFZcf6cKGDsmVAlyH0Jw72O2HNq0G/08aeoyGh1zHo
NetmbbY2+nBVa+yNktCtmdQMa/2gOmu3DcvGteJCT2zcY4YuXZ3zG9aFDGvZ
jfLeDesw1l3bK/SPRu1rDks47qTvhzrrA9aZq+m6hl2daxKp6kGOu4bhWkLn
eNBrhGe8zn06yZ5aVb82wv6/+nAAAADAzNOHAwDYnML6ZI26W+n5PxR75hjC
eSdZcXY/97XUibu/n3OPTFeeHvtcYZaUHevDVfV3Bq31Nmw9rSZradVJ1X58
TRP6KoP6G6P24cZdE67p9R+UQT2jsNfnJLpwa1nruEyiC7eWOuviDVsXK6Tp
vpTDepZhXa06xwl7ZbZxD4xzf1b1zibROVtLeJ6adM+6OtckEu6/ce+lYam6
RpP+7B2WYZ8B05zlW9GHAwAAAGaePhwAwObUy/JjmvS2FtLlB8eeOaaj0tUf
SU4qltvtxeXn9NL8x2OfK8yCskN9uGG9tqouSVWPLvTXJjXjpNddW8vBOnFN
+0bh+lTtFTiJNOl3DbpWk54x9HrqdNOaJnTKhp1j6EwNO07dta+G7W+5pWaf
p85+q5NKeI+n8eyE56PJvrqD1pKcpbkmkXDvTeLeHOVem+QeqHVT9e+BSfX/
GkYfDgAAAJh5+nAAAJtTkhZn1u1q9bJvrNNB32K6718nWXFe6K+11otL893h
dWKfK3RZ2aE+XNXaWMP2sKzaZzVkEusyVe0LuGVD7yLMc8stt5wXEtZD27Vr
1wcG/fyk1oer2zML/cDQ4wqzhc5XSPjv4RrX+f26+yxW9YwGnXNYaypcq9C7
C/fDJPb7DMcMxwrH3LNnz0V1z7POXo8hw9a6q7u36LBeVd09a6v2yFx//cP7
E97LsKbW2n0Q/jnsQRvu4brXt+6z1bR3FmYM79n6zlb45zBfnXs93EezPNek
UnW/N12/cGOq9qoOfzfN8xy2NlzT9S0nFH04AAAAYObpwwEAbE5JVlzdoKN1
Sux5uyas49a/Lntb7MXdl2T528K6dLHPFbqo7FAfrqpLctVVV60M+/1BvxsS
elDjzFZn/bHQQwods6rjhH04hx1n/fHqzlen0xN6W8O6S6ETVWe/1TodqCY9
o/Cza/uebkzoGo3Siwu/M+j9CPPXeS8mce+GhK5U1e8P24O3brdo2Hp1ocs1
bJb1173OvrZ1j9fkfqjTRazqmK6lzhp/XZ1rUgmfnYPmGHe9uqr7fty155pm
2OfWtOf5VvThAAAAgJmnDwcAsDklWfHl2uvDpau/FnverjoyXXl6/1qutNuL
K/46Sc//odjnCl1SdqQPF9ZQ21LR4alzjKruzrh79w3rTg1bv2596uyxGVK3
Dxe6NcOOFV5zkudbZ5/Muj2jYR3CtdTp6a2lbv+xak3CkLprsg1bmypkUIdw
2NqGYX27uu9bVW9w1Geg6tlsMl/d+6FJd3XYmo111ubr6lyTTNXag6N286ru
+Wmf37DnOHyeTXOeddGHAwAAAGaePhwAwOaTLK0e1qSTtZiu/lTsmbtuW1r8
ZJLlRRuduG/14r4e9rjtpStPiX2u0AVlR/pwVetj1d1fcFgnKfR6Rplt2Npw
Tbpwa6las2ktdftww9YWq9s3a9oxGbbeUp2eUd2+WZ33dy111ytbS9X+ok2O
VbV3ZEjYg3Tj74RrOOx86u5HOuxYTa51k3uhbs+uzv0wyh6bw7pnw867q3NN
MlVr1oX3dpRjVl23pv3bcRKe0Uk9Qy1EHw4AAACYefpwAACbT5IVr2rQw/p0
7Hlnybal4hlJll/QYi/ua0mav3lbWjw59rlCTGUH+nDD+mZN+lxV+/eN0lsL
KYriPYOOWXftuoMlrDdVdd51+nBhj9GqY4ROzjjvTehwDTr2sB7NsJ5Rnb0n
N6aquxYyyrpUVb2lpjMOW8MurAXX5Ofr7BO8lqpeUJM15g6Wqme0bm9z2P0w
6vM57D4ddtyuzjXJVK0hOeq6gVXXbFrnNWztwpDw+T2teQ4SfTgAAABg5unD
AQBsPklWnNugf7U39ryzaHFp9Vn9a/fuVntxWXHG1nTvk2KfK2xUluWD+nlC
Pz/Tz+H9/GY/x/fzmn6yfk7p50/6Oa2fP+vntSMki9gV+Eaq+mahL9TkWMPW
6Bq2ptnBErpEg443bteiah/DOj2jqnW7ml67gyV0EQcdf1gXcFjPaJT3Ytgx
R1kDsGrduTr7wq7PsH7ilnVdoWH3atM9HqvWCdzYwxslg7qIk+rDhWvXxn26
/prP0lyTTtXnWHgGmhyran3Lps/MqKmzXuQkPgPHjD4cAAAAMPP04QAANp8k
239D3d5VL8tPiD3vLFtMV34myYr3ttiLuzdJizcm6eoTYp8rm1f5zf7bT5Tf
7L2d2s/uKXxf//rIfYHKNbKarm82bM/IpnsDDlu7btx9+Kr6bHV6RlXrpY26
P+zGjNqjqeoZHWzv0DoJ+zAOOuao61xV3TOjdHuG7d8YjjmsNzdKjyd0r8Lz
EvbGDGuPrb83JnEfDHpO666R2Mb9UGe+Yc9CV+eadKruy6b3ebi/RvlMmFSG
9QzXMkrndsLRhwMAAABmnj4cAMDmk2TFfXX7VotLq78Ye9550EuLn+1f9/e1
2Iu7J0mLv1hM93xf7HNl8yjL8kf7Obaft0T4vj5qH25Yr2GUvlnYM3PQ8Zru
b1q1H98kujJV+xgO68NV9bjG2cd1Y6rW76vqK1b1jEZdV6+qDzfqulST7sOF
VPWF6mScNck2ZtzO5lrCenXjzFt1P4T3tc37tKoH29W5Jp2qbm+Tz4tJ7J07
Tup24a677rrzp3VtK6IPBwAAAMw8fTgAgM1lcan41SY9q21p8eTYM8+TxaX8
3yRZfkmLvbiv9o9/+pHpvsfFPlfmU1mWD+jnZ8tv7nUa8/v6qH24qi5K6BSN
csyqzlRI2Ouv7rHCWluDjtN07bpBCeuaHez4w7olVXsWhjXdJvUeVXUCTz75
5I+N8t42eQ/qvrdVs1Slaq22cfZ+rLoHqzKJvU0nndBBquqZ1lmHq+p+mERn
r6pbWrXeXlfnaiNVe+rWfSbD596gY4y7f/Sw1NkjNWSa6+4NiT4cAAAAMPP0
4QAANpdelp/UoFv1j7HnnVfJ0uph/et7eYu9uLuTNH/d4o49j419rsyPsix/
vJ8/68B39SFR+3BbJtRba3Lc0Oupe5yqrsykOhehx3Ww4w/rw+3evfuSQbOF
3kv4mdDnGTejrmFXde1G3cewqg83Tj9xUCdxnD5cVY9wUEbt9E0y4T0PvaPQ
bQqd1LB22LC5x+nDTWpNsVHXLevqXG0krJk27DNjWKr2T25zf9K6z9M4/95o
IfpwAAAAwMzThwMA2FySLL+gfqcqf1vseeddL135hV5WXNZiL+4rvbR47ZEn
rPyr2OfK7CrL8uH9/F4HvqNfn2h9uGHruI1z7EEds7XU3Y8y9FUGHWNS3Y+w
Z+LBjj+sKzPsHKeRLvXhxtnbctD7PE4fLqRqj9GNCZ28aT174fqHNd/CNQu9
tzBn2P+36n6vyjh9uHGvcd3nddBab12dq60M6n7WmaWqGzuJ/aMHJayZWOc+
7NC6cGvRhwMAAABmnj4cAMDmkmTFgQZdquNjz7tZ9NLieb2suKLFXtyX+/nT
Xrrne2KfK7OlLMun9/OmDnw/vzHR+nBV+y+G1FmXatSEfVDrzFjVHanbqRuW
QR2vYX24qr7ZtDJqH27Uazdrfbhh99D6hH5aW89a6AmFez48c208V+P04eo+
i+O8j1X3XFfnaitV60oO26t3UHc3pK112apec3062IUL0YcDAAAAZp4+HADA
5rEtLZ7cpEPVWyp+OvbMm02S5s9PsvyDLfbi7upl+alHpavfHftc6b6yLBf6
OacD380fLFH6cKEDsiVyl6vOnIN6LJNcy2uW+3BbKrpQVfONuibWLPbhqtbU
Wkvo/LTxnIXuU5u90mH3QJ37YZz3bWOq1kxsep/GnqutVH32DttLelC3M9xj
bcwa1pyrc/+F/X2neQ0bRB8OAAAAmHn6cAAAm0cvzY9s0p3SmYqnt7T6wl5W
/F2Lvbgv9e+HP05ec/53xT5Xuqcsywf388oOfCdflSh9uLpr/rSZYWshhQzq
SU2y/zFqH27Y+nrTStN1t4ad1yjXasuY/aU2+3Bh3bdh13Cca3Kw1N1fclIZ
pw938cUXXzCp8x5lj96uztVmqj47Bs0TOmeDfifstzvJ+UKHtG6PM/zstK9f
g+jDAQAAADNPHw4AYPPoZcV/b9CX+nDseQkdxtVf678XV7bYi/tiL8tP2vaa
4lGxz5VuKMvyYf2cMunv1+++++69d9xxx/5bb731wptuuulvbrzxxvd96lOf
uviGG264ZJT0j7HnrrvuumR9ptETqLuHZJvZunXrzcPmHNSTmmR/SR9u/GsV
0tU+XN17fRKvFRK6SZN8f8MaXeHabt++/dpBPzNOH65OL7VuduzYcU3TGbs6
V5up6ksWRfGeJtcpZJJ7/YZ9V+vcl+GZHXWdySlGHw4AAACYeWt9OL04AID5
18uKy2r3pNLijbHn5f/ovx//McmKj7bYi7uzf3+kR6R7Hxn7XImnLMtH9vO6
cb9L/8xnPvOej3zkIx973/ved2NRFF8477zzvra8vFxOMhdddFHYa2597m+7
I3DgwIF9WzrQ49pSo8cxqCe1ZYI9ljb2Sw37M4Y1+Hbt2vWBtjOok6IP13xP
29AFGuf19uzZc9E4z8Phhx9+W7h3Qidq4x6U465xNo19Sau6h017m7HnajtV
98Akfn6UXHjhhe+uc5+GjmaMazZC9OEAAACAmacPBwCweSRZcVPdflQvW31J
7Hn5vzwgOalY6L+PV7XYi7ujlxY7F9O3PSL2yTJd5Te7cG8Y9fvzz33ucxd8
4AMfuHbv3r13T7r71pU+XNVaSSFhn7xJpuq1hvWdqnosXe7DjdurmkQ2ex9u
1N7nqGte1dmXdf17EHpvoX903XXXnV+nkzVuN3TQ/TDJvTZH2d+4q3O1narP
j417kFY9d+EemsQ8u3fvvqTOvTvpvVlbjj4cAAAAMPP04AAANocj05WnN+lF
Hblz5cdiz8xAD0iy1a1JVlzdYi/u870sP+HwV+17eOyTpX1lWT68HHFduM9/
/vPvCuvALS8v3z+NHlysPlzo+myp6DoM2qtvnAzrxFX9bugMDfq9jetnjZpB
a3oN641VzTapjso42ex9uKp7riqjrn0V1ukaduxwr426HllbfbhwH0/ifqv6
bKm657o6V9sJn1+D5gprS67/2XBPDvrZSexZGl6vzrNx8cUXXxDreo0YfTgA
AABg5unDAQBsDovp6kub9KFekK4eGntmhkjTQ5J0dVsvy/+hxV7c7b2sePVC
uvyw2KdLO8qyfGg/pzb9vvy+++479+/+7u+uOffcc++bZg8uVh9u2H54k+hW
bEzY07PqNau6Y1Wds0l1Mwa9xrCuTNXemJPq8oyTzdyH2759+7VV99ywNRKb
9hmHrQ0XOqHjrmfYVh9uUp2wsKbZoPmq9vTs6lzTyKD3NKyLufYzVX2+cJ+P
O0PdLlxYxzDmtRox+nAAAADAzNOHAwDYHJKsOKP+XqnFxbHnpYHQi8uKpJ9/
bLEX99leWryyt/2t3xH7dJmcsiwf2M+JTb8rD2vC9X0+Rg8uVh+uag2rUdfF
GpaqPsqWIb2X0Hkb9HuT6IKEDNqTdVgfp2o/zkmvOxX6Tk37VJu1D1d1z4Ss
rb01bD23Juu4DesUjbom3FqGres4Th8uZBI92LC25LBrPktzTSNVndq19S+r
OszhM6it119L6HKOe/9GjD4cAAAAMPP04QAANockyz9Suw+X5qfFnpfmFhaW
H9h/n1+cZMUnWuzF3Zakq39g/cD5UJblf2n6PfkNN9xwyfnnn39PzC7ctPtw
w9awGqfPNCzDukeD9j4NPZ+q3xt3rqqu3rDe2LCO0qTWU1rfQQvdlHAtQxcw
rLtXtY7ZZuzDhd5O1Xuy/tyH9TSbrB1W1ekaZ8/XtYR7qWrWcftwV1xxxf5x
Z6x6xqueha7ONY1Ufb6F5zv8zEte8pJPHezvw2fBOK89bK3QteeljTVDpxh9
OAAAAGDm6cMBAGwOSVbcWbvzdFKxEHteRveNXlya/3b/Pf/nFntxtyxm+csX
XrH87bHPl9GUZflrTb8j/4d/+IcPxdofNWYf7vTTT//Qlha7ZVUZtmZX2L9y
0O9W9Vma7mvZ5JrU6Y1VzRZ6LJO4dlWvMe19KLvehxvWuwyd0PU/v3v37kuq
fr7u+mFVrzuJnmnVvsFbJtCH27p1683jzDesazuLc00rYV3Oqud00OxrfblR
UrW2ZZ3PlhmKPhwAAAAw8/ThAADmXy8tfrZJ12nbicUTY8/M+A5L0wclWf47
SVZ8ssVe3M29NP/dw9KzHhr7fKmvLMuf6eecJt+Pf+xjH/tI7A5crD7cloru
Q+jbtN1NqHr9kEHrEFV1lsZZI2nY+m51emPD1lgadz/Dq666aqXq+KFnOOh3
N1sfbtRu26DXXkudNcQG7bk77nUJCWsnDnt2xu3DhQxao7FOwnqFg45b1XXt
8lzTStUzXnVPh/UNR33NYffTpLq8HYg+HAAAADDz9OEAAOZfkua/36TjtCVN
D4k9M5PzjJed8W2LWXF0ku2/ocVe3E1JWhz7vONPf0js86VaWZZP6eftTb4b
H6cLd9555339Xe961+ff97733XjFFVd84sMf/vDVH+276qqr/v7jH//4lVdf
ffWHR8knPvGJv7nzzjs/vJYvfOELH26jF1DVY9pSs/MzboatcbVnz56LDvZ7
w/ZMHXU/ytCHqTpu3d5Y1THG3dMw/H7V8av2MtxMfbhhnbGqcx62hlid97Cq
dxXWIBznHqjq2q1lEn24Ue+LsKdp1XGH9dm6Otc0U/WcH+zvxlk3b9jn8Jys
C7cWfTgAAABg5unDAQDMv15WvKN+rykvYs9LO0IvLnTWkqy4scVe3L+E7t1C
uvzg2OfL/60sy+/u501Nvhe/5ppr/m6EDtzX3v/+9//zjTfe+L777rtv5LV4
huT10+gFhPV+tgzoP4S+zTRmCJ27QTMMmyPsDVj1u033DhzWwdnSoIcT1h0b
dl533nln4/unqmO1pUZXbDP14YZ1xjbuk9r0PRy2fuKw+6mqt1iVqud2fSbR
h9syQs9qWM827AU6q3NNM8M+3zamal3Iqgzrfk7r3wVTjD4cAAAAMPP04QAA
5l+SFf9Uu8+UFn8Ue17aFbpqYY/T/n3x6bZ6cb2s+NRiuvrS0MGLfb58U1mW
397Pf2/ynfh11113+fLy8v0NunD3X3755dfdddddK1P4vr71PlzoYm2p6EAM
2keyjQzbm7Jqf9Gq3wsJ/bE6M4QuzLBjbWnYG6tzvLBeVd33q04PalgHarP0
4Yatd1X3/h52b1ad37C1yJr2uUJvKazTVee+CqmzvmOd3tna/VGnvzlsf9qQ
Osfp6lzTTNj7tO57HTJqv3LYZ1/4+7AHdFEU72kjdXqbE44+HAAAADDz9OEA
AOZfkhX31u0xbVta/ZXY8zIdYW/TxSx/ef/+uLnF9eKuT9L8tw9L0wfFPt/N
rCzLQ/o5scn34TfffPN7w16ndbtw559//ldvuOGGS6b4fX3rfbhh/ZDQxZjW
+YY9UatmqVq36aqrrlqp+t2QsLdg6HNs7IuE/x7+fNjvr0+T3tiwPtRaQi8q
nMfBjhE6UHW7QeFchs20Gfpww9YBa3Kuw9bO2lLRQwp/XufeHNaJDPdG3b5m
02tf995aS+gRHqy/FGas09UbtP/xrMw17dTtP4Z9nkc5ftPOXRup2wmeYPTh
AAAAgJmnDwcAMN8W09V/36S/dFS6+iOxZ2a6DkvPemiSrv5BkuWfabEXd13/
+C/Wi4ujLMvfafJd+Be+8IVi7969d9ftwuV5fmf4nSl/X996H65qL8nQwZjm
+YYey6BZ1lK1hlCT7kw4t7DOWlXPJHSUBv1d097Y6aef/qG6s62fL3TkqubY
mGF7dw67VvPSh6vTQRu2T+rGDNu3Mrxfg3532J6r6++50GkKPx8SzrHuvqiD
Ejqvo94PwxLem6b3adV1mpW5pp26fd06awFO8jpPMuN8RowYfTgAAABg5unD
AQDMt15a7GzSWYo9L/EsvGL52/v3yyv798GtLfbi/qmfZGFh+YGxz3ezKMvy
BU2+B7/77rv3hn5b3S7cBRdc8LnwOxF6EK324UJ3YktFPyHsYTftcx62/tWw
/S3H7Q5tTOjTHOzPR+mN1e1EjZqq9fM2Zt77cOPeR4NS1R8d9swM+91xUnXt
6+zHerD7oUkPs27CNWhyvbs617RTp985zjm0eW82uYenfF314QAAAICZpw8H
ADDfkqxYrdtV6qXFO2PPS3wvSFcP7WXFq/v3zm1t9eL6x782SVe3bUnTQ2Kf
7zwry/JZ/byz7nfg991337kXXnjhLU26cPfcc89Ia+5MIK324cI6VFsq+glV
a7G1lWH7noYuzLBjbN++/dqqY9RNWA/swIED+w72d6P2xi6++OILJjHbxgzb
O3Rj5rkPFzppVddqnHO88cYb9wx7LwbtMXznnXdOfE/K0Ptb26d10HWq8ywP
uh9Cl67pXsKDUqeXNytzxciwz+tRO5511uWcRvThAAAAAJrThwMAmG9JVny0
9tpd6eofxJ6X7uhtf+t3LKb5jt/Mis+1uF7cgSRb3aoXN3llWT65n7c1+Q78
8ssvv65uF27//v13RFoXbi2t9eGGrTfUZK2xSWfY+k91ehPhZ8ZZR2qtW3LF
FVfsP9jfj7MWU+hLTWodu9CBGmWPxDb6cIOuVUj4u1GP26QPF67tsGvWdJ/U
jRm2b2rVNQzP3STe+3D/bXwOqva8HLbW46DfXbvPq7qOdRJ6oKNc667OFSOD
urlrCX3LUY7bRk9zlIzzGTFi9OEAAACAmacPBwAwv7aeuPf7G3WT0tXnxp6Z
7llIlx8W9t1NsuL2Fntx1yQnFQv9l3tA7POdB2VZPrqfM5p8//3RvrpduJWV
lbu+9KUvrUbuQLTWhxvWrYiwVs//zrC+UZO10EIPqMlegKEHuL4vNWi9usMP
P/y2cc8z9NiGrfk0KKFTFWYb9bXb6MNVre03zqyD+nCnn376hzb+bFtraNWd
aS3Duj3h78M9NMr7PujZrNr/eNj9Wud+CF2+cM3rzhqeu3H3XO7qXLEy6LMs
3BejHrMr68OFfydN+XrqwwEAAAAzTx8OAGB+JWnxH5t0ko5M9z0u9sx012L6
tkf0siJNsuKOFntxHw/37Ra9uJGVZfnQfv6syXff//zP//z+5eXl++t04fbs
2XPvZz/72f93At+3n93P28tvrmH31hHy2tj9i3lJ2Ody9+7dl4S9VMP+iKEf
FBL++eSTT/5Y2Hsxxv6wawldpv59d1GYJXRb1uYLvZ/wn+HPQjcorGcVc06Z
bMJ6duE9De9t6GJuvDfD/Ro6fKFPuLYvahtp0o8Mc4Q+X/id9ffq2rzhOQvP
2zzPJXMRfTgAAABg5unDAQDMryQt/qRBD+ljsedlNiy8evk7e1l+Uv+e+UKL
vbiPJUvFEVv04hopy/KQfk5o8r33Zz7zmfecd955X6vThTv33HPvu+GGGy4Z
4bv1P+rnOf08vp/vCHNO4Fx/rgOdARGZ87SxXuA8zyVzEX04AAAAYObpwwEA
zK8kyy+qv1dq/ubY8zJbjkj3PrKX5n+cZMWd7fXi8o/0llZfGPtcZ0VZlr/d
5DvvL37xi/m+ffu+Unef1KuvvvrDDb9TP6efX2vpXPXhRKT1dLV31tW5ZC6i
DwcAAADMPH04AID5lWT7b6jbO+qlxctiz8tsWkiXH93L8lOTrPhSi+vFfThJ
8+fHPtcuK8vyeU2+777nnnvO379//x11u3Af/OAH/7Hh9+nv7OfftHi++nAi
0nq62jvr6lwyF9GHAwAAAGaePhwAwHxKdhY/2qRvtC0tfjL2zMy25DXnf1eS
FX/az10t9uI+1EuL58U+164py/Lb+3lz3e+677vvvnPf+9733ly3C3fRRRd9
uuF36aEL99yWz1kfTkRaT1d7Z12dS+Yi+nAAAADAzNOHAwCYT0mWv7hJz2gx
fdsjYs/MfFg4YfkxvbR4bZIVX26xF/eB3tLKL8c+1y4py/J7+zm9znfd73//
+/+pbhfuXe961+333nvvnobfpbfeWSz14URkCulq76yrc8lcRB8OAAAAmHn6
cAAA8ylJi7+o3y3K3x97XuZPL93zPb2seH2SFV9prxeXv7+XrvxC7HPtirIs
H9bPSVXfc1911VV/X7cLt2/fvi9/6UtfWm34PXpvSueqDyciraervbOuziVz
EX04AAAAYObpwwEAzKewr2TdTlHoLMWel/m1kBbfm2T56f178u4W14u7dDHN
/23sc+2Csiwf1M/vHuw77k9+8pOXLS8v31+nC7dnz557b7vttnc3/A59+xTP
Ux9ORFpPV3tnXZ1L5iL6cAAAAMDM04cDAJhPSVbcXrtLlK5uiz0v8+/IdN/j
wrqF/Xvzq2314npZcfG2tPj52OfaBWVZ/sb677dvvfXWC88777yv1Vwb7v7r
r7/+0obfn/+3fh48xfPThxOR1tPV3llX55K5iD4cAAAAMPP04QAA5s/i0uqz
GnWI0pWnxJ6ZzWNhR/74JC3emGTFPS2uF/feJF19buxzja0sy+f2846w5+m+
ffu+Unef1I9//ONXNvzu/I39PHLK56YPJyKtp6u9s67OJXMRfTgAAABg5unD
AQDMn162elyT7tAzXnbGt8Wemc1n64l7vz/JijP6ubfFXty7k6XV58Q+15hu
vfXWn9y/f/9n63bhrrjiik80/N78r/t5wrTPq9SHE5EppKu9s67OJXMRfTgA
AABg5unDAQDMn15avKVJXyj2vGxu204snpik+Ztb7sW9q7dU/HTsc522NE0P
WV5eXqnbhfubv/mbmxp+Z/7Ofn4yxrmV+nAiMoV0tXfW1blkLqIPBwAAAMw8
fTgAgPnTy/J/qN8Tyv9r7Hkh6J248gNJWpyZZMXX2uvF5UWS7ntm7HOdlnPO
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
Cx2izczVNGFPtPBY559//oN1j9c0oW8WejCp91lb1Oc1b1nvtQyfmy4fM3Tc
Qv+q6ec+fG5DV87ndmMJn8/weocOadO/T+Hr7u7duz8QenMJZtaHa9mOlcF3
x/Thstfc/r+knhkAYBZszw8/LWodtTL4ttQzAwAwX4b6cCIiIosefThYYMNN
9OEm9c7CfkZ1H99VH+45z3nOQ+NmCvuWbfb6Yd+uyy+//N66577ZtDGn5zW/
Ca/Teq9fl3uy7d+//92b+dzedNNN70r9us1LQn8w7Lm42b9PoRt35513/u4U
Z9eHa1m/qPKIfU3+OvW8AACz5NKiur/xmal59ROp5wUAYL4M9eFEREQWPfpw
sMCGm+jDhb2NTqvpaoRuVd3Hd9GHC52uupk++tGPvmWj1w5dpK77Yo9MOJey
66/zi/q85jXhtRn3unXRhwtndE7a69Hntr2Efd3a/vv0wz/8w383pfn14VrW
L6q3Nr6HW1S/nXpeAIBZErOWyory1tTzAgAwX4b6cCIiIosefThYYMNN9OFC
Qg/jtJqeRl1/p4s+3HXXXfe+cbOEsx03et0uOixNE86j7Opr/KI+r3nNpI5p
2324sIejz+30EvbQ6+rvU+g0dn2e7lAfrnVZUX206T3cXlFekXpeAIBZkuVl
EfG7BR9IPS8AAPNlqA8nIiKy6NGHgwU23GQfblKf5o477njbuI/tog+30Vnq
Mulc2GkkzND21/dFfV7zmnCG5qR92trsw3Xdhbztttvemfo1naWE12Maf6e6
PFN3qA/Xqu354ac1vX/78J4mK4NvSz0zAMAsyfLy30ecPX+il996TuqZAQCY
H0N9OBERkUWPPhwssOEm+3Ahp9V0M7Zv3/4P4z6u7T7cpH5P6BvFXnP//v3v
rrvmetm9e/cHqqp6+7Fjx4488MADbw79lPDY4f+G/x3Okww9sPDaxFy3zX7R
oj6veU14DZucWdpW1ymcG9z08xP2XAyf27D3WEj42PA+OP/88x+c9LF33nnn
76Z+bWch4UzaJq91eE3D3nrhz4fP9cm/W6F3fM0117y/yTXqvua2EH24FmXX
VksR92//+XvzwWNSzwwAMEsu3rP2xJjfL+itDM5PPTMAAPNjqA8nIiKy6NGH
gwU2bKEPN6lbNe4Mv7b7cHVnt4ZOT+z1YvZPC12x0BOLfYzw2oQ+WJMuVMhG
HmOrPK95zb333nt7089HW324cHbwpMe6/PLL7530eGHPxUnXmcIZnjOfJt3B
0OeddJ3wWobPy6RrddhD1IdrUVaUPx9xvtefp54XAGAWZcVb/0vzNVW5J/W8
AADMj6E+nIiIyKJHHw4W2LCFPtykvabG7f/VZh8u9ETqZgj7LcVcL+yHVXe9
kwl7MYX9m9p4Dq973eveM+nxnvOc5zy0mcdY1Oc1rwn7rDX5fJxMG324Juek
xuzZF94nddcKPdXUr3PKhG7apL9rsXtXTnrfhB5qR89HH65FWVG+M2J/uJtT
zwsAMItG66Q3R6ypbk89LwAA82OoDyciIrLo0YeDBTZsoQ8XUrffVNgbab2P
abMPF/o7sY9fl3HXOjVhn7W2v+Y22W+ryT5SW+15zWPC3ntNPh+npo0+XOge
1j1G6FrFXjPMVXfNsAde6tc7Ver2SAxfNzd63XCuaoK/T/pwbcnzM7Ki+v8i
9od7WeqRAQBm0WhNdVVEH+4jqecFAGB+DPXhREREFj36cLDAhi314Sb1ncIe
co/8mDb7cHUdn9h+T5P9zDo8j3Dia7nRDs2iPq95S9M9+tbLZvtw4VzauuuH
90gXz2ur7hEX9qWM/boYk7oecuhbdvCc9OFa0s/Lf930vm3IjuXDz0g9MwDA
LOrl5XfErKv6+aEnpJ4ZAID5MNSHExERWfTow8ECG7bUhwvn/Z1W0/vYv3//
ux/5MW314SZ1TmLOIpx09uNpHXfGTmZSdy22R7Ooz2ueEs703ciecKdms324
66677n1119/scwxnf467dlvn785T6s41baOvVve1r6MzU/XhWpLl5Y9E7GPy
T+fl+VmpZwYAmEW9/NZzRuulE03XVr28vCj1zAAAzIehPpyIiMiiRx8OFtiw
pT5cSF3XZr1uRlt9uLqOVWznZFJfaTP7Z8Wmbo6bbrrpXZ7XfCR02Jrszdck
m+3D1e2j2MY5ue95z3vKcdcPZxqn/lxMO3VfE0OXrY3HqPuchg5my89JH64l
/aL61Yg+3F2p5wUAmGWj9dL7m6+tyv+Qel4AAObDUB9ORERk0aMPBwts2GIf
7t577739tJouTzir8dQ/31YfLuYx69JkD7Vpfv0N/aRxc4QOzFZ/XvOSa665
5v2TXv+Tufvuu98aOoHj/vtm+nDhY+seu63u1Ljrb8UzU88///wHu/hcTvsx
Tok+XEuyonpP8zO9ql9IPS8AwCwbrZfe2HhtVVS/l3peAADmw1AfTkREZNGj
DwcLbNhiHy6kbq+i0As69c+20Yer248qtltV10MKmcZ5oqemrf7Soj6veUmT
veHC/okn9wur21NsM/2me+65Z23cdUOnqq3nO+7M1I7O73w4ofMZXrdwLvOp
Ca99OLO0zcc6dOjQH4TrPvKx1jsTuq2vTXWp61vqw82mC3ft35YV1aeb72Ey
2J56ZgCAWdYvBq+M2Hv3Y6nnBQBgPgxb6MOFn/uHfRu6StinIjxG+Bl5Bz8P
lsiEz8d6n6dwf2Zan59x75WPfvSjb0n9+sj0E96TYZ+ScIbTyaSeaRZy/Pjx
h78+h31Kwn3EU1+fO+64422hfxC+rqaec6sk8ftUHw4W2LDlPlzoipxW0/s5
9c+20Ye7/PLL7x33WLFfK+u6fKn2LQt7ap06R+gUhf5LTIdtUZ/XvGRSH+6R
Paq6P7+Zfy+FNd2464Yu2TSeb1ddx0l7U7b1OGF93PRxwp8Na7fweoSvUxdd
dNE/hvd523/v6v5+68PNpl6+9q1N79c+vIfJ3rWvSD0zAMAs660MviVmfbV9
7+1fmXpmAABm37CFPtzJnwlPK+Hxws+iT95v0ZGbXibtBdHmvgTjEu7B1L03
Ur9GMv2s917o4l5d6JCFe43hnlhX2WxHKjzvcI1x+3qM+3uze/fuD4R7rKk/
l4ucab1Px0QfDhbYsOU+3KT13qnfLzbbh5v0WDHr/PB7EXXXanuPqaYJr1f4
t0voGW7kdzcW9XnNU8b1w0IncL3n3lUfrm4vxfCYbT3fuv3tulwv1p0b2tbj
hvX8uMdo2ikMPbk2fwZR9/OUDtaK+nAt6OfVT0TsX/JA6nkBAGbdefktjx6t
m443P4++vDj1zAAAzL5hC324up9bTyvhXkT4nfKufjYvn8uke5Yh4XfoU80w
jT5eioQ9J07b5P2zRc24+41dvFZ1+9e0lY12OsN9ubqzlmIefxH3dUmdab5P
x0QfDhbYsOU+XEjd97zw307+uc324er2ojv1cZok9MHHXeu0OV5HLerzmqc8
8vt4+DdH2Bu76Z9v6/NV14cL/62t51v3exVt7kP3yIRuZ1tfDzby3E6edzvN
hMes+/vdwWPqw7UgK8pbI/pwv5N6XgCAedAvqj9rvMbKyxtSzwsAwOwbLkgf
7mS67mJt9TTpw4V0uUfEVurDPfJMJPc7/2XCfchx74UuXqu6s4zaykbew3Vn
Z200oWOc+vO7KJn2+3RM9OFggQ076MPVfe067ZSvX5vtw9X9O6Kub7Re6nou
4b+l/n6w0Szq85qnnPydg/B6N3lfpujDtXkOe938be5D98i0uV/keqnbZ3xW
zh0+NW11AB8RfbgW9IvqAxH3aovU8wIAzIN+Uf5K4/3hiupo6nkBAJh9wwXr
w4WEvbRS/Cx7K6RpH67LXtpW6MM98MADb17v3qc+3P+fuvtZXbxWTd/7m03s
e/imm256V1ezhL3ipnie50Jm2u/TmujDwQIbdtCHC6k7w+/kGZ2b6cPVnQMa
u1/qpO/T8/o7M4v6vOYtYR/ymL3DuurD1f0OxLTOS+2yDxeye/fuD0z6urPR
1O212GafsGkm7Q0Xznbt4HH14Tapl996TlZUJ5req+2tVN+TemYAgHnQz6uX
RuzB+4nT8vyM1DMDADDbhgvYhwsJZy9N++fZWyExnaCu7s8teh+u7pwgfbjP
JZwNWnePvovX6tixY0em8bUr5j086fy0tuJ9Nz/v05row8ECG3bUh6vrXF90
0UX/GP7MZvpwJ8+DXy/hsWOuFX6XYNy1QsL38dTfFzaSRX1ei54U+8O1uVdg
3Z7IXffh6vamPPl1p4vnlWK9G55P3d/vjmbSh9ukLK8uaHqfNuTiPWtPTD0z
AMA8uHh57euj1ln52jeknhkAgNk27LgPF7oA4QyQ8PP5jWajfbuY3+GXZond
I6uLc1MXvQ9Xtx+DXtLnPv+TOkZdvFahY7uRr0OxaXpW06T9JE79OxFmD38+
vCYh4d56uJ968uyvSXEW2/y8T2uiDwcLbNhRH25SFyv898304SZdO+Zak84O
n9c11KI+r0VPV324Sf8WC138zc4+aW/bafx7q24NFfu14WTq1s7h5xXTfo+E
3x2re5073PNeH26Tenl5TcS+JR9KPS8AwLxYWlo9c7R+eijizNSXpZ4ZAIDZ
Nuy4Dxd+v7utn92Gn33feeedv7veOZLrZRG6UbOW2D5c025PWzMswue8q/tn
i5BwVlXT917br1Vdd2wzfd9TE/aICI/TZJ4mPeFwD33SdcI9z8svv/zeSdcK
X3tTf/7nJSnfpzXRh4MFNuyoDxdSt+4O+5RutA9XtwfURnrYdftmdbEenVYW
9Xkterpcz9ftcdbGHumTelrT+PdW3d6UG92DvO5zEv6eTfP9EdbVda9xSBvd
xjG5Yvi57xkbSfjYHx/lslFeNkpvlO8b5d+O8o2j/KtRFv7MqqyoDjfuw11b
raaeFwBgnvSL6s7Ga628vCn1vAAAzLZhx324Jn2MjaTuHtqpabOPJ/F9uJDY
8642M4M+3OKm7hzZabxW477OpXjPTbqHFnoEsffQJr2+YZ+O1O+BeUjq92lN
9OFggQ077MPV7U8Wejkb7cPVdbE38u+HujnneX24qM9r0dPlen7S/r6bnb3u
2tN639XtTbnRHmiXr1lMwhnHk17jsJ7scIZN//xnQm4b5edGefkozx3l7M1+
j5s1WVF9pPGeJXn1U6nnBQCYJ1lR/nzE/nB/nnpeAABmWxs/D63rw3X5u9ah
71H3+/Ehu3fv/sA0f7696NlIHy6kzbNr9eHSzzjthL/Hse+5Nl+r8LVm3OOE
822n/XrUnSEV9pjb6HUnnQnbVb95UZL6fToh+nCwwIYd9uFCTqv5OraRPtyk
9eRGZqxbP83z+nBRn9eip8v1/KTfC2u61/B6CevaumtP831Xtzdl7L8t616z
8Lma1vui7szWk9nMWr5huu7DPTJvGqUY5YJRvnCT3+6SW7qmfFLT+7MP71my
Mjgv9cwAAPOkl1cviTib/viFu/ZvSz0zAACzq42fh6bqw4XU/e74yXR41siW
y0b7cG2e56QPl37GaaXpPpBdv1Z1966mfY7opPtoH/3oR9+ymeuHe3Djrq1f
PNvv0wnRh4MFNuy4D1e3NtlIH65uL839+/e/u+0Z21ofhtnC9UIvfVzCmrfu
v5+acK1JZ8Mu6vNa9HS9np/0O2Eb6XjVnVHaxftuUur2Q459fnW/s9Dm723V
JazRm7y+U1gbTrsPd2p+a5QfGeXLNvEtL6l+Pvi+iPuzn73oqiMLtz8eAECX
tueHnxbz+we9fO1bU88MAMDsauPnoSn7cCEn7+GMSziTJOHPfBcqG+3DhbR1
bqo+XPoZu87HP/7xN29kr62uXqu6+3Gb7Z/Fpq5D0EZfra5v58zU2X6fTog+
HCywYcd9uLoex0b6cHXd641+X51Gb6zuMTaaSb8zsqjPa9HT9Xq+bm16MqGT
GNYqk64Vfnes7vzirt53TeYaN0PMmrTuOtN6Lk27cPfee+/tU5gnZR/uZMKZ
qj88yhev+01thmV59TMRfbi/TD0vAMA8urSo7o84n/4nUs8LAMDsauPnoan7
cOHn/OMeP8QZf+1lXBet7vzGU9PG79/rw6Wfscv3V1v3ZNt8repmmvb+k3Xn
WLW1v0XdniNN7qsuemb1fToh+nCwwIYd9+FCxq33Y/twdb2QzZwTWPf9cZZ7
Y5NmW9TnteiZxnq+7t/gpyb87ljYU/2RHx/WdLfddts7Yz+30+w6hrNfx80R
9udtco077rjjbeOu8T/Zexd4Pcr63ndxqbKpVm2r1WMv3movlu4etdTTujde
errbWtKedodg1vt6xPaUEqSW5oACSec1LYdWkQ1tt8a93RjB5rKyVrKy3km4
CDEkJGAEkaAEkXCJJkDCRZJwSUyY8/xJpg5v3nnmeWaemWdm1vf7+Xw/gWSt
mWfuM8/85v/IdyZlL4PJGKlihd/w1SEPF/sF5XuOvqrVl24vvME4DxeEV/pu
LwAAAEATUfdca8y/Qehf7bu9AAAAAFBfXPSH+s7D6b75LqMN8g5Dvt2W6cq3
+bHy//KOr+p8jLRH+tkH2yM5QOlXd5lf0WXRpAZB1vs0F+9Pqs7DVb29dfUO
q9yvfKh75zWo7N+6cZ1c5ozS6tgUeW+fV935tor3q23PZDZ5P82QPBxAi4kq
yMOl1Se1zcPpzolFxiDXZV6anBtr63K13SrycKY1x2Ll+yW5d5VntqzxVnVW
ef8rz2Bp7ZD7MZNpyPKWvS3SlGdxk3Vqmu1zZJ3ycLHnK39ipP4c0+2FT5rn
4ab+yneDAQAAAJpIN+j3LGry3uO7vQAAAABQX1z0h/rOw1XRBsmbSU7J9Dv8
M8444yF5b1hWNs62PfL+Q8b1k/eMRfr9TbJoWW0pOm5qFXm4Kre3zCdW1o2u
1p6890n+vCjv26rOYJalyftYWT9xHTRdzRSX77fStom0t+p1lLa8Lmt16PJe
Zb43lNolsk2H7eOu63dMTEyslekOzkts6n6aIXk4gBYTVZCHS/v+xDYPp7vP
KdI+ud9Pm67o4l7JR26sjcsl1/tFixbdLLXJfCn3AWUeL1XVe87aP/IqObS0
70Gqvv/VZfey9n/Z19J+V8aILbPd8k2EybqusC5cbB3zcOJC5VtHaszovMlf
Mn0vK44GU2/33WYAAACAJjI6P/yARR7u+RnnTb7cd5sBAAAAoJ646A+tQx5O
926tSBt07wJMNclX2LRH9427qZJ3yfP+zCSLJt+3Z82/yLiOZebhqt7eWWP9
mtqWMSyz3scOrtsq3jXq3qMVqWOTRzlm5f2xLLe8w5N9NT73uczD6d47lpnf
0tUAOXy5crcei8ynjvupgeThAFpMVEEeThyWl47zcJL9yPp9Xa0kyQ4XaVtW
LsjF+damPqipRfNwTVwu05xQ2ZZ5/1zltT/r/snW+Nk57X6w6jycbkzXrPOO
3Den/W6ZNdl0803qIQsn1jUPJy5WvnekpowGYcfivexzM4Mx7r8BAAAAcjAz
CF9r9R3C/Kn3+24zAAAAANQTF/2hvvNwurzKiEE/eZquayXIu4oiy6kbXyqv
tn3wplk0XT0ksUh2p6w8nI/trVsWG9syhmXaNpD6ezImlM02c7VOdO+hh7XJ
h5LvqqIenlh29lJ3Pcl7Lh9UN/acSR6jjvupgbyPA2gxUUV5uGF5tjgPJ+fA
rN+XWsWDvx9b5FsJMesbg6L34aLkZ/LUItPdw2fdu7ZxucqqaWZrmdfgqq/9
Ms2i30wla9uKdcnD6Y6BrPNO2jLIspbVXvlmxWR9Fz3nGbpcPSf0k+7Zs+fL
yn4e9+7dO7Vv375Van9befDgwTKfg04bqSGdoP/PFnm4W3y3FwAAAKDJdHur
HzQfpz78hO/2AgAAAEA9iVqQh8vKieV5T1S0RliaksPIs4xljGMUa/NtvE0W
LWu+ecdNLSMP52t7k4fT7+eyPXX7ZxXvGnXnl8Eai/K+Ts55MgaX1IWQ35Va
YfLfUkuuLvk5nfJuTrevlT1/GRc1bd6uxrXSvS82eTdZx/3UQPJwAC0mqigP
Jw7mS+I83EjGOU1Xm9PVePe6PLePMc5dLXvblos8XHnz1WX+dQ6OH6t7Rila
yzGPknuzXZ+6e1qX9dtj5Rs93bGaVH62ivX23HPPXavWQ5RU3WtHY2NjThwf
Hz84OTn59DXXXPPYTTfd9OAdd9xx50MPPbTOUVbuz4+62Hmm2+vfavpOVrJz
vtsLAAAA0GS6vXC58b1Xrz/hu70AAAAAUE+ihufhssa9E23GBZWf1Y0V6ELJ
e9gsYxVjCpl+n26TRStr3FSXeTjf25vxUl9sPF6X5JVMcppVvGtMq/EgGcp4
H5J3iLrzYFLZ3wbfOdZJ3ftGV3k0nVkZ0aLbVXfMmdatrON+aiB5OIAWE1WY
hxscuzCZh9Pd8+hyOrb3xmnqvm9wlbnLY9F717YtF3m48q/98h2G7p5OcltS
rzHtWV03Bmve77uKqHseTjt/6LaB629UTJ574+PCpm+iqGXn4XQ5uRtvvHHH
fffdt7FgNu6v0q57VfOOv/z8j3V74bPGY3YFYcd3mwEAAACaTCfon29Rm/d7
vtsLAAAAAPUkangeLquul21+wzQbJXkIWTbpS5fvu0X5f904UElNx/0zyfvJ
+wz5xl364ZPtkfcYUpfKZJlMxrgSbd97lTFuqss8nO/tLdtX9tGkuulI/mbw
52XbVflepUxln7XJSFbxrlE3VpTk2ky2f5o+3ifqzKoNV1V7dcdV0czEYI4j
qfxbU/dTA8nDAbSYqMI83GCuOJmHi7Piw9Tds7u6j5H73rR5iFXVZBq06L1r
25arim99TCzze5KaXPtfUJZT9hH5UzSZv+Tp0trvq95xWnvSzju2P59X05p8
VXxXMqivPFxSqR+3ZcuWbxw6dCjv8fYXuutfVcyeH77D9H3s4TG7VrzVd5sB
AAAAmsxo0H+Pzf1XJ5h4je82AwAAAED9iBqch9ONeRe7devWSdPpmYxJKvmu
rHd28r7BZPxNk3d/uuyGKO8qTJZN904j1uSdUJ73XlnztR2vxlUero7bO6td
bcm9ubLsd42uxrPVWac8Y9Z+XNX7W12NjaLvMHUZ2LKWrybvxMnDAbSYqMI8
nJisO5XMw4nDslnydyMp50HJQLtqV1auW8Yxr3I9xRa9d23bcsnzmfy7PMv5
suz7r5pc+3Mb18Idpq/7Vt06HTzv6GoQuvy+I+tZPbaM8VlNrEMeLrbf7z+l
5v/VnMvywUIXSQd0ev2zLOqT/ED9yjG+2wwAAADQZGZ+fOwV6r7qeeM83Pyp
U323GQAAAADqR9SwPJz0dZvWZDKteRZPN2t6tssi/d666UmfftY0dPkU27FG
5Vt+XXtM3g3kee9lMn6M1FsyXQ4Xebi6bm9R966nLeOiurLsd42mYx+50Fet
jdis2jNVv8eTupdpbclbB0eXJ7C5XtRtPzWUPBxAi4kqzsMlsyaDeTi5nthc
Y2y+XTExq/avjyyPi3vXti5XW63JtT+3afdhPrer7j5u8Lyjq7ldVT3KWNPv
18qwTnm4Iz7/ta99bWvOWnG/X+xKWYxuEF5p/C62F37FZ1sBAAAA2kKn17/b
/JuE/t/7bi8AAAAA1I+o5DxcPI6nvDfLo2S0pK9ZakeYjm0Za5OZ0H0DP1Ig
q5LVT657H6J7x2SarRpUxhpMm6ZJfY68771cjpvq4t1bHbd3bNPfn1Vp2evK
tOaDK20zrq40qR9Z9Xt2qXWT1pZhWYui+0uZtUxrckyThwNoMVHFeTgxzssM
5uGG3dOlZWts7v9cXD9EuSetel25uHdt63K11Zpc+3Opy5352M+SpvU7JM8l
cs+a1n5X9ShNs3A233yVYQ3zcC943XXX7dq3b98qy+VZqnxn0etlXrq98FsW
9eEu9tVOAAAAgDbRCcJFFt8kXOu7vQAAAABQP6KS83C+tMk2SM0t3bSKjqmi
+z5dl+vQvWMqkt3QLWvW7xZ575W1zUzrTxV991bX7R3b5PdnVVv2usrKTQ4q
79gkQyf5MlH+OzmmnIlV586kLk9WmyRHW/W21dVwzJufKHLuq/N+aih5OIAW
E3nIw8V1cQfzcGIy3y15kJGUc6BcJ123K+s+T6w6o+IiN9bW5WqrZV/75T5J
trc8E8p9muQl834vNague+mz1pmoqxMfn3fkWS7tZ1zUozSpVS8Z4DrU9a5r
Hk6cmpra+8QTT6yxXKarlW8qcr3MQ2fuVT/e7YUHjd/FBlN/UnUbAQAAANpI
pzd1tsU3Cbt9txcAAAAA6kfUwjycbVZM9323jFdadP3oximVvvK03yujPpwo
mR2ZhmRKJKsj05J+fanjl/W7Rd57meRuTN7jFX33VtftHVuT7EwjLHtdmdSk
lJ/JejcobckaTzdWMnhVrT9d/Q+Xx0ReZ82atTOtXba19HRj37p6f+xrPzWU
PBxAi4k85OHi3HKch0vm4pLfOOhqBJd1DsyqSyxWmT/X1auyyY21dbnaaJnX
/uR4xYPmrXGdVDdmve9nEd1zoOT45GfSvkUxeQ7LUpe1S+77PsYvHmad83Di
ypUrn921a5ftt2jSf/VTuS+YOejOnzrF9D2sOPPC/uurbB8AAABAW/lg0D/Z
5j5s1kUr3uy7zQAAAABQL6IW5eEkt2EzRqpJ+118Qy7myXVk1YHIO7ai9M/n
7aMvmkXLeo9n8p6iaBvqur1ja5KdaYRlrivdO95Y23E75R2lScauinFTdbnN
uuxzunFcbTNscQ7Yx/quyTFNHg6gxUQe8nCi3HsPy8Ml63iOpJz/pJ5uWe0y
uYZLG6vKrOjGX7fJjbV1udqorzycfONUZNqbNm1a7eOYtTGtFne8z6W1P87L
5dXk2y6f35EMU50Lph577LF7k27evHmL2s735nHjxo3fVd63YcOG+7/61a9u
v/766x/t9/t7xsfHD+bNxK1YsWJ/jkzcp5Un5L9q2tHthedZ1CXZUVW7AAAA
ANrOKcEXT1D3VwfM6/T2T/fdZgAAAACoF1EL8nDS75x3/FBdtsrFN+SxMo5N
2nx043Pqvs/P+t0ydDEuUtYyZY2bWqQNdd/eYk2yM42wzHWlG99NLDKGqC4v
OVLB+0bTLFzV464Nqnvvb3O8+q5fU5NjmjwcQIuJPOXhJLc8bLxUUa41umup
SV3iIuruxQbbWVYb5NuWrHHTba9DbV2utlnmtV/3PFM0j6V7TnP13VBRdTV/
dRnNPN/NJc065uSY8L1uDC3c/zPooUOHlj/66KPX33HHHXeqc9QPcmTinnvs
scdsx+L9hPJY+yumPd1PhmMWebiVVbQJAAAAYLrQ6YVfN87D9cLP+G4vAAAA
ANQLF/2hPvJw0tcv33gXreuj60+XzIqrPmLd9+RSMy3t92TsRJP1IT8nmcCy
60G4yMMVHTe1SBvqvr3FmmRnGmGZ60rOLbKtJJs2eI4rWl9CzMqFFn1np1su
k3NKXd556s6BplkK3dhWRXKNddhPLSQPB9BiIk95ODEtDyd1quR6Ofj3ostv
EHRm5c9jJUPjcr5yP5627IPmyY21dbnaZNnXft3zd97vxHS1dOu2PXX30cP+
rehzXlaN87rVhcvQeR5u0AceeGB9v99/yiYTNzk5+fTevXunLOf1Efsrpj3d
3uoHzd/B9i+ook0AAAAA04VuEH7WIg+3wXd7AQAAAKBeuOgPzcrDybg90i89
aPz3ut8dpst6B7pvyCWHIT8Tjy9aRMm2pM1H937BJDs2qPT3y3KVMQagizyc
WGTc1CJtqPv2FmuSnWmEVa8rqYfiqmaabjwqseh4V8M0PZ+UXbPHRl1tofiY
zVKXG6jimKrJMU0eDqDFRDXMw0k+JO0ZwUWu3EST8UVj5d5Trr1Fvi2RZxTd
OT9tvixX+yz72i/1tHXr3/X08mbsytI0lxkrtSzzziurrnJyfOiGWHoeTjx4
8OC4jLFqk4lbvXr1k/v377d91voD44tlDmZeMPZq0/evL9SHC8LfLbM9AAAA
ANONTm/qDItavXtHgqCSGsIAAAAA0Axc9Ie6+D5d3gtIVkNXCyiZnXNV0ycr
l1WFWfko3bf6JsrvyzsAF+9eXOXhxKwspLxHct2GJmxvV+/PJJO3aNGimyUD
6MsyMl1lrCtfyvuztPa7HjM1K38XW5e6cKbrKev9vi6bWva4tDXbT8nDAbSY
qIZ5OJ2SL6+qfbrrQJpyfZB756xarXINkty23G/lrZed95mmrcvVFsu+9ssx
pFv/st1Mj7OseuR1HAfUdv8vkgeV4ybruJJaxLLPl2EJ94qV5OFiv/Od79wy
Pj5+0DQTd8MNN+yU8Vct5rFU+faMy2RuRueHH7B4//r8HwcrX1lWWwAAAACm
I6fPW/U2m+8TZs9beZLvNgMAAABAfXDRH6p7TyIZjDz921JTIm2asaa1gXTa
1jooQ5McmS4PYqPUSZKMUt73kC7zcHnHTS3ShiZsb1fvz0zzT2Vb5jvvmuSM
cqurV+iy1oS8zzbZVnXMwmWtp6xrjG7Zq6qDV5P9lDwcQIuJGpSH85GtyZMd
i5XvN+S5RDIv8uwh35nIMhS9N5ffL1rzuq3L1QaruPZn1XQTpY7asHtx+TvT
+8O63lOb9BeIRfoMihxjrszTn5JhpXk4cfv27V+dmJg4YJqJ27hx43ct53GV
8hdGSqDT63/SIg93TxltAAAAAJjOzJw5dpy6z9pnXq+3/xHfbQYAAACA+uCi
P9RFfbhhZn2rLsq7myJtr0M+asTgPYN80563PkOa8s7LNg/iMg9nsv6HjbXU
9Dxc1vZ29f5Mjj3fy2nbZpf7T13f3SWVMY3LXndZNS1iyxhf2ZW6GihZuYq0
9/pVjuNWk/2UPBxAi4kalIcrIdthpNxLm+ZnylZyTCxXu63q2p9VbztWnpHk
ntA28zjs26S6KDXZyl6GOjw7ljBWbeV5OHHnzp032GTi7rzzzjss5/E55atG
HNPthWvM83D9q13PHwAAAADknqx/k0UebqHv9gIAAABAfXDRH1pWHk40GSs0
bVxNE+WdQNb0q9C0hpbpd/w22owZ6DoPJ9qOm1qkDU3Y3uThzK1Jzii3un25
6DJIPQvTd6RZ46bVQd2xm7aedHnDKt/Z12Q/JQ8H0GKiBuXhfF9PyriXNlXq
NJdVO62ty9VUq7r2y3ova7tWVUc3r5IFzVqGovWWXdVoL2Jb8nDi97///bUW
Y6c+f//992+wnMc/Kl864pBuL9xtUR/uHJfzBgAAAIDDdHv9T1vck93uu70A
AAAAUB9c9IeWmYfLmn6sjAGaZ9pNyEcNU2pruGy7aZatjDyc7bip5OHM1it5
uPrn4UTde7a8yyDvL02Pe3mX6HsdmKgb/zcMw6/Y7h9VvrevyX5KHg6gxUQ1
yMOZfMNSl/phkgM3rZ/qQqnfVkW2qK3L1USrvPZn1RvOY53rwiXNqicvOdG8
0876bqUq25SHE9W+dbNk3UwycePj4z989NFHr7ecx3nKY0YcMDsI32T63lUc
DVa9y8V8AQAAAODFjAbhaRZ5uP2/f84VTr+RAAAAAIDm4qI/tOw8nG6svKR5
+u117yoWLFhwp/ShL1y48JayzZtJkX56yYnIO0jTWlBpSm0Hk/ml/X7ePFzW
dhCTYxuWNV5qXba3q/dnuvxQldpmPV3tN03Jw+nOn3mWwXTsKJu6kHUxbVnk
fbyLny/Lmuyn5OEAWkxUgzycSRa7bjXEpD1y/5fV7rzK/bmPXFFbl6tJ6tZ/
Gdd+ebYwyaRmWaTuug+zvqsq8hxi2gdRtiWMMe01Dyfeddddt5uOmzo5OfnM
nj17bPuUPjR4ncxDtzc1y+K964FTgi+e4GK+AAAAAPBiOheteiPfKQAAAABA
Hlz0h5adhxNNsj3JzJSpupxCE+sdSH2AxYsX35S3Dtq6deuu0U2/rDycaDpu
qu7dRJE8XF22t6vsjLwfkvUhOUdfyn5YZv2xmuSMCqnb722XQY59k+O8LvV5
XG7vwTFfdfURJTNYl3aThwMAF0Q1yMPJf+tqnpp8d+FLuVeJvy9Ja7+pkjeX
++k63Ie0dbmaoHz/krYuy1yHklPM8xwo9yplfsNSpmnnHVkPRaZbl/pw8kzn
eJ29TflTOfxp5auVr1X+vPKXlb+t7CivtG2HOjfda5qJW7NmzRPqfDZhOY//
0+T6qaPTCz9jkYe7rej8AAAAACAddb/1OOPYAwAAAIAtUUPycGLWeCii/IzN
NHXf7ledmShDycfJ+xjd+8mkWXWTyszDmY6bKu/28rahCdu7JtmZRljlupL9
Tt4Tupxu1ns2m3lJbUOTYzwr81pndeOBDY6HpRsvruoxYmtyTJOHA2gxUU3y
cG1RrjdyXyj5cbmeSJZP7jFj5X5Z/k5yZnKfLdfWutW+m07LhUcr96wynrxs
S9mu8iyY3NaSFZNtXJfvgbBSf66Ea9ArlT3bttx44407TDNx8rOW01+i/I9F
lqvTCzeYvnNVP/s5V+sTAAAAAI6m2wvXGN+bBf2rfLcXAAAAAOpB1KA8nGgy
JqhNv/7ExMTatOlIdqoG/dXOlLyZSb0AXT6jzDycaDJuapE2NGF71yQ70wjL
WldSa0zeE8vxIvtU8rzjcpxRyXemtV/eW5pOxzQL14axzdKuN8n1pcvMynvh
tuynlpKHA2gxEXk4REQ003ke7sh16Hjl39q0Zf/+/StWr179pGkm7pZbbrG9
j1+Ud3lnzhw7rtsL95nn4abOcL1OAQAAAOBHdHr9T1rUh7vHd3sBAAAAoB5E
DcvDmdQQsxk3VTc9F/mupJJ7KJJ9kIyH1HUYHBfQ1qzsjC4zU3YeTszKPOrG
fMpqQxO2d02yM42wrHWlG585z7jMaerGNzWtdanLeCbb3NQxsGyWV86P8jNS
+ybtZ0oYc8rbfmopeTiAFhORh0NERDNLycMduRYdG1lej/bs2dOfnJx8xjQT
d9ddd91uubyfyrMspwerft30fat4+rxVb3O9PgEAAADgR4zODz9gkYc7NOO8
yZf7bjMAAAAA+CdqWB5O1I15GSvjAJlMS1dHaCQjG2ajrId4mpJNkXFr4rGI
0sbplL+XHIXUqEqOd2o7JuwwZf5pyyxZoLTfqyIPZ5J5zNuGOm/v2JpkZxph
WetKsmO6/aRoJjVWN46xjHGV9fu63FfymKh6fNAy1Z2D5PiSn0mrg+kyy1iH
/dRS8nAALSYiD4eIiGaWloc7cj06TnmhTZseffTR68fHx39omIl7/oEHHlhv
OO1/Vv5veZaj0wv/3OJ96z6pJ+d6XQIAAADAj5gZhK+1+V6hE6x6n+82AwAA
AIB/ogbm4cS0+SWNawVlqcuGSa7CRXt185B/G/x5n+OS+s7DZbVPp0kb6ri9
TZedPFx160pXpzDOXRVRxnXW7ctZ9dxMcqNZ+1pTlTFrdcd/mdutbvupheTh
AFpMRB4OERHNLDUPd+SadILyn2zadf/992+QrJtJJm5iYuLArl27tN+YKRco
c9cE6fbCz5uPlRquc7j6AAAAACAFdd/1kPE3C0H4Cd/tBQAAAAD/RA3NwyXr
b6Vpms/KqrFUdHy9rNzLunXrrrFdr4888sh4kTbp8hm+x0uNzRo3NW8b6rq9
TbYNebjq1lVa5iq2aM01XW04mXfW72cdC66ynXVUd4zpxqB1VdevTvupheTh
AFpMRB4OERHNLD0Pd+S69CrlQpu23XnnnXeYjps6OTn59N69e6dSpvXXyuOL
tL/b699hXh+u/2lX6w0AAAAA0un2wnHzbxb6E77bCwAAAAD+iRqahxNl/Mm0
+Y4kshEm09JNo+gYe1m5rrRcjS5DMWvWrJ1ltUmXz6gyDye5vKztm7cNddze
JtudPFx16yorN1lk3GIZz1k37axxe7PGjG5rXbikuuNs2L8VPWfWdT+1kDwc
QIuJyMMhIqKZleThjlyb3qC8yqZ9Gzdu/K5pJm7NmjWPq2frwTEBTiva7lOC
L57Q7YU/NM7DfTKc6WJ9AQAAAICeTtA/32JM++2+2wsAAAAA/okanIfTZbOS
Zo07KC5atOhm3TSklpPJdAbNyuxJTiLtd7PGQzTN+g2qy2bIcuZd567zcFlt
LdKGOm7vWF3WSepilXU8NdGyc0ZZ+9vExMRa22lmZeGycltSGzJr3/W9XapQ
xj61OTdk1WVs8n5qKHk4gBYTkYdDREQzK8vDHbk+vV251LR9hw4dWv6Vr3zl
YdNM3Nq1a7935HcXK/+TizZ3gvC3Td+zirMvCn/BxXwBAAAAQM/s+eF7be7T
OsHEa3y3GQAAAAD8EjU4Dydm1XAaMciXxGZNR9y0adNqk2lJlkrGK8yaXlYW
Qjem4ohhvippVhYnDMOv6H6/6jycaDNuqk0b6ri9Tfbp7du3D34DP20tO2ck
GaqsbSr5RZNpSXtM9pGssZCzxnGVf5d9SI7lMqxLjUIZ+9T0vCAWHd+2zvup
oeThAFpMRB4OERHNrDQPd+Qa9Yc2bdy/f/8K9dzxA9NMnHpml+exX3bV3m7Q
/xuLuiO7XM0XAAAAAPTM/PjYK9T91/PGebj5U6f6bjMAAAAA+CVqeB5OlLxb
2vxjJR+SNR3JPmVNR5T5pdXpkiyLaU0zkzbJ+jOZltSKS6tnJn8vdaxMcmVZ
7fGRh7MZN9WmDXXc3qbtkpykjIkZ5yWllmDZx1kdrSJnZJJhEyUrNixzJcdf
Vj3C2Kx6c7YZsDI0zYhWoRwDJm0uMrZtU/ZTA8nDAbSYiDwcIiKaWXke7sh1
6iM27fzBD34Qrly58lnTTNzSpUv/wlVbO73w38zzcP3Q1XwBAAAAIJtOr3+3
eX24cIHv9gIAAACAX6IW5OFMMyIm9YGy6qcNKnkMyctIZsqmjplpTSkxawzO
pJKPkrZIm8Ss+nJJTcbi9JGHE00zZ7ZtqOP2zpN5Ms3atc0qckZy3rDZFrIP
So022U9058ZBZV90dRyUaRXndFNN6oOKkqlt+35qIHk4gBYTkYdDREQzfeXh
jlVeYNPWhx9++Cvj4+MHTfJwy5Yt++HSpUt/10Vbu73wu8Z5uCD8OxfzBAAA
AAAz1L3alyy+XbjGd3sBAAAAwC9RC/Jwokn9JcmVuZpWESUrY7t8Nrm2PGaN
kxrrKw8nmuTP8rShjtvbJmsn2o6b2xaryhlJHcAy9xHT7Vf2ecDEOuXhTLKK
ss58t5M8HACUTUQeDhERzfSShztyrTpB+Wmb9t53330bx8bGnjesE/eDJUuW
/EqRNs7+RPgqmzG4Zs+f+gNX6wcAAAAAsukE/Y9ajG2/23d7AQAAAMAvUUvy
cKJJVsS0PevWrbsma1p5zJtbktyHTa0pG21qi/nMw5mMm5q3DXXb3qbj5MZK
vbqqjrM6WWXOSKZXxjEoeUzT+Zexj9papzycKGOhuli/bdlPNZKHA2gxEXk4
REQ001se7sj16qciyz6oO+64407DGnGPLVmy5LeLtG80mPo90/er4geDqZ92
tW4AAAAAIJsPBv2Tbe7XZgfhm3y3GQAAAAD8YdsXOUxdDm3Tpk2rq+rbNclL
HV5ks+nJuJUy5qHJNLOUHI2LMfsWL158k4v2xG3avn37hM38n3rqqdSxPKuo
w5Q1vmmRNtRte9vUratDDSwfyji0aeukrJyRq3qCss1s9hHdsVelVZ7TTdy6
deukrr2y3ny30cd+OkTycAAtJiIPh4iIZnrNwx25Zr1JebVNu2+++eZtGVm4
76g/31K0bZ0gnGdRb+R+F+sDAAAAAMw5JfjiCeo+7ID5PdvULN9tBgAAAAB/
RA7ycDNmzNg1kvKuf8uWLauq7N/V1eGJNR0bNFYyK1k1iNKUfJXrdSC14iQX
ZzumZqyMG5u3TbrxCWU/qGIb62p0uaiTVqftLdOSZTKZd4W5mtq4cOHCW3ys
D5m2ZDPzHIOyj+SpsVaX+nCSP/O93QdNy2TLuvbdNp/76YDk4QBaTEQeDhER
zfSehxNUO05WLjVt96FDh/7XxMTExpQ83DrlT7poV7cXrjJ9t9oJwqUu5gkA
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
uyQbJuNnSB+o9E+OZPSzSV+o9HNK3798G1yjfrdpsVxNUPbVRYsW3bx48eKb
Yqucf/ydumz/iYmJtXEbZDwjOb7YttNnX0hIHg4AoEV0euG1FmOmfsl3e9tG
RB4O8QVd5uHk+VWeVQaV5xrfy4nDfeSRR8bTtr9YxbOP5NB0bZC+L93vZ2Wu
bOvc6Y4J0Wd/W5PUjcXs4nxTouThAEBLRB4OAACmETt27DjxyiuvPOmyyy77
3djLL7/83UuWLHmr/Jvv9rlAlkNdl9+wcOHCdyaXU5a73++/Xl2Lj/fdxkHI
wwE0F3VOeXs05N3Egw8+eNPExMQBm0zcihUrnlPnsBtz9n98QfmuCpY3dx4u
a7wBX31Hkhupol3SZyrz0r1jslHyZtJf57vOWluXq2kOW5dlfxsv/b/yvsF0
28u2lawc27Z9+0KK5OEAAFpEJwgXGNeH6/Xv9t3ethGRh0N8QcY4Rd23d3IO
K3v+8gxcZP5z5879TtrvS7+Z63Ui3yv63mZ1V7dNGnC+IQ8HAFoi8nAAANBy
1LXnpfPmzTsvzlxlef7551+6YcOGSuoMuUAt37GSd/vYxz7WN13GM88880lZ
TsnN+W6/QB4OoJmo888blFel3fvv3r372lWrVu2zycSNj48fvOeee24t0A/y
CeXPl7jMufNwWbkzX+9XTj755H1pbZK+9qLTl29x58yZs0237EV10U6Wq7mm
vRMqs382a5yaLBcuXHiL7/XWRn3sCxrJwwEAtIjO/KlTLerDHZpx3uTLfbe5
TUTk4RBfkDwcSk3ytH1AlBpyZc5f14ck3/Zl/b6u7XnPs1KTTjddvkkbrtSD
1K03nTU635CHAwAtEXk4AABoKeqac8wFF1zQM82IDXr22Wd/c+vWrbXuvyyy
fMlsnNTH87kc5OEAmoc6x/6kcmHW/f++fftWXXPNNY/ZZOLE22677VsF+0P+
Xnm68j8rT1K+WfmzytcpX6v8mZz+Xd42ZY0pIdmqqvuNssapKNKPKn1jZefF
BpW+vLLXWVuXq6nq+m/L6J+VfvasWo9s2+mxLxhIHg4AoEWMXjjxOtM8nDh7
fvhe321uExF5OMQXJA+Hku1K2wdE+XarrHkXzZ3JWLxpv1u0tp3u/M2x8WKl
fzJPTbiarlPycACgJSIPBwAALUTGBS2aE4uV2mu+l2cQqevmavlizz333MW+
loc8HECzUPf0L1X+o2nfxMGDB8e/+tWvbrfNxN10000Pyu/WoG8l6b8U+f0z
zjjjoZEa9SctWLDgzrS2yHgTeae7adOm1brlLFMZj7Ks9dXW5WqqWRlT18eT
vANl29bTqvcFQ8nDAQC0jG4v3G48ZmrQP993e9tERB4O8QXJw6Go68vJO+ao
ibr9T/JVWb8vddLTfl/GYS1rnUgOz/c2q4NyjtBtQxtrdL4hDwcAWiLycAAA
0DKk1pnrrNjFF198mu/lipG2uF6+ZK04da0+tuplIg8H0CzUeeKcPH0Umzdv
vts2EyfPIc8880yd+q0K5eGy8jQy7kWVy1NGW7LGha1CaYPrddXW5Wqq8t15
Vp02l/2zZWchi/b9T2er3hcsJA8HANAyOr3+hMWYqct9t7dNRNMkDyf1uWU+
69atuyZW/r/s8Q+HKd8bSIZE7oPjtsgzovy/1IiqcvxBuZeT2uZp66YOYyE+
/vjjy5PtS64rl/OR2l9p+6jvdZBmvF/LOhHjdST1nX3s21ntrMPxl2VWrf+y
8l9F5ynfXab9ftFjRZfzkmPR9zargxdeeOG3ddtwcJ3p8ovk4QCgKUTk4QAA
oEVs2LDhVWVlxa688sqTfC+f1Kora/mSKo6pcrnIwwE0C3WO+HnlZ/P0U9x9
992bly9ffsgmEzc1NbV39+7d19agj0UslIcTRzT9TbNmzdpZ1bJk5XvyvFPQ
9c2nKd8Qh2H4Fek7lXcI0qcm85Y/5f+lj1xyYLJubKbrMl/U1uVqqrIOTcYs
ddU/K+8/TLePfJMu21beH4ryu7If6N6txsr7Ft/rtmlWvS9YSh4OAKBldIPw
E8b14XrhQ77b2yaihuXh5L5OshnyHBEr94nDcjVy72g6bt2cOXO2lZnLk4yN
tPvkk0/eZ9IeqX9eVs5EsjGy3kzuo+O2yH23i2yc6faT+335N5P70bzbLtkG
yabo5iVZl+TPi7IcaetEtt3gcsb/X3QdynOwzXiM8fZzcd/e1OPPVt1xKvuC
6/npvu+UtphMQ/ZF2Q5x1krWabwcRY9dXR6u7O0mfTyyjw07/mS/djkvqS8/
uH/HFllHsXKOibOJupp75OEAoClE5OEAAKBFmGS9giCYs379+lera9LxymN2
7NhxomnNNcVLfS2btNOkjWefffY3L7/88nfLz8vyHfF4GUP2ggsu6JlM42Mf
+1i/ymUjDwfQPNR55ZXKS/L0VWzfvv2rK1as2G+TiRsfH//hvffeu6kG/SyF
83BZ2SrpU69iWXRjt0qfl+30bOqnSX9znu+VZd1IHszkfYPo4pvoti5XU836
Dj6pq/5Z3TfssdKPnzU/qYWQNZ2qjv826GNfsJQ8HABAy+gEq95nmocTZ14w
9mrfbW4LUcPycGkZgmR2TO7pTXNnw3T5LYUsm2nubJjyHOMqFyf3eCb33zqL
5rlMtp+ubpJO2eam+5I8GxRZD7Fpzxi6rEve5xJZtiL7tSjtKnL/3rTjL6+S
i9K10fX85Jk3bV5Fv9tzkWPVfWtY9nN21rOpq/nIeioyn6w83OC5syHjM5OH
AwAtEXk4AABoCeeff/6luoyX/Lvu99U16phzzz13sW4aZ5111gNVLc8gknPL
yrGp6/EbsqajlvPYuXPnfj5rWjLubAWL9QLk4QCaiTqfvEQ5N09/xWOPPXaN
1H2zHT9148aN3z148KDPsSoK5+Gyak1VUf8rq1/ddpwK+aZaN71Y6Z+U72Zd
LIPJd62m3yhPt+VqqvJdtcn2iHXRP2syTqrNMSv7iW5aklP1vZ6boI99IYfk
4QAAWsbMj4+9otsLnzfNw43ODz/gu81tIWpYHi7tnj7O49h8c6NT5lNkeeUe
ybZetU6ZVpH7LpNnIRslo+KyHfE+4GKdyX1/VgZI1qWL9ZC2TVxmXeTndd/c
5TFvxrIpx19Rs/YPl7Ubs+blOxtVh/bprh+utoXuGzuT71rTjg05dofVTyQP
BwBtICIPBwAALSCrdprUhDOd1rx5886r27ipkk1zXc9t4cKF79RN88wzz3yy
jGUZBnk4gOYSHa5B2cnTZ/HMM89MZj1nDDMMwx88/PDDTscbsLBwHk7Ufe8u
fWhlL4fkd1zOP21aSaXP2fVymNTbKtLv2NblaqI2Y+3EuuifzaoZkGfsk6y+
+rzv7aaLvvaFHJKHAwBoId1eeI/5mKn9T/pub1uIWpKHk5pUrrI4sXlrock3
UC7bkTRPLaaiNeHSlGcr27bo8nAu84NSV0+XiWtKHk43jqaP/bsJx58rdTXb
5N9czUdXi87lfPKqq3VY1Tdnum+2XK0j3fnH5LvWwWNDrnnyHajpz+c9R5Qs
eTgA0BKRhwMAgBagq3cmNd9sp6erNeejRpxk09Lac84559yUd7oyrmrRenMu
IA8H0HzUff77lUts+y2k1tu6desess3EKZ/ftGnTvZKpq7ifxUkeLivvNOy7
TJfqMj62+R6Tb/jLHEska13Ke5U8023rcjVN0xp9wyzaPyvvS3TTL1IPQLdc
1Iir376QU/JwAAAtpBP0rzLNw3V74Rrf7W0LUUvycK7rZ8XafitTZhZOlJyX
aVskD1Z0fM0sy3jG1S27aPrzuue6ssdLdZF1MfmWq6gXXnjht11sv7ocfy7N
ekZy9RykOzfq8lRVKP0yunVgc+4uYtk16nTnA9MxBORYkp+XXJ3JdiMPBwBt
ICIPBwAADUddW47VZbryTlc3PunWrVtf7nIZdGTVvlO8tMj0JU+Xd4xZV5CH
A2gH6nx0knJRnv6Lr3/969/OkYmLVqxYsf+222771r59+6rqf3OSh5M+/xFN
P1mZ3xhnvfvIGrMladbYj2KZmbHYrPcVtvnCti5Xk5S+3jx1wJIW7Z/VfWN+
+JRXbBl133a7Gn+3DdZhX8gpeTgAgBbS7YXnWOThdvlub1uIWpKHE9OyUpJn
kN+T7JYoz4SmNdNMsxBi1rNoUmmPZCbk3lSUOsZSa9wk72WaYTLNwsn0ZBvI
M1DcHvl/0/tEm8ySbR5O1odss+Q9p/y3PDOaLN/ChQtvSdtWUlcqqW468nwx
+PO6cVmLZl1kfzBdR7I/y74k20+U35WaY7pjbnBfbMPxV4a64zFPPfNBZXvp
1qfPZc+q91f1d4S681HRbaEb50H+zWQactyZ1JGLJQ8HAG0gIg8HAAAN55JL
Ljk1Lc+1YMGCD+ed7vr161+dNl0ZU9XhImjRjWvqIq+my9tVNWYqeTiA9qDu
939W+a95+jDuueeeW8fHxw/mycUtX7780I033rjjW9/61m27du267tChQ2Vl
SZzk4URd1qbMPkVdf5b03dlMK+vdQ5H6Wbbq2pH2fmG6LVcTlD7VIvUYkhbt
n9W9u3IxTq5uXCHT/uw2W6d9Iafk4QAAWshosOpdpnm4F8ZMvWjVG323uQ1E
LcrDDSoZJskopE1LsihZOSjRNONgkh8zed7RjZ8YK/WWi64neW7O+mZLsnEm
2SXTb79stp+0L2t68tyWNR3T72F0bbP5ti1rWib3zya5SJNnVtPxVrP2pyYc
f2Wo279c5MEkG1hk+7pW9k05/5jsf3nGbi6irl5f0W2h658o63mXPBwAtIGI
PBwAADQcGb+0rNppunFKXbU/C8nepbVBsmwu5pGxDo91MQ8d5OEA2oU6b/yE
8h/y9GPs3LnzhsnJyWfyZOIG83FTU1N75TlGcnIyJuuGDRvuv/nmm7dt3Ljx
vrw+8MADW3bv3n1f7FNPPfW1vH02Wd9Sm/b12upqniY11KrsA9N9F2zzvXZb
l6spxuN3mCg1HnR9/0X6Z7PGOnHVr542fcZMrc++UEDycAAALeSU4IsndHvh
D03zcKNBeJrvNreBqKV5OBlr0nSaukyKaJJLMRkn1Wbsw6xnWskapf2uyXOX
7TiHWevI9Lsm0+0nmRzTtmWNK2p6/69rm+0zSpGsi0nGT5czG6aufrZo+vxb
1+OvLLOOpaK1x8ucdpZyPpLtJMo6ztpHkvrKKOpyennXl+7cXWbfAXk4AGgD
EXk4AABoMJFmrFTJeBWd/gUXXNDzPWaqbtxWxTFNmYcO8nAA7UOdO35M+Td5
+jL27t07dd111+0qmokrw7vuukv61P7d3bt331+k30b3fafp+DI26r67ts1W
ZfV/VzGeaFJX+aW2LldTNHl3If3Lcd+2rs5ikf5Z3Xfd8p7U1fKm9eeXWSNS
+uBlvck7naTx+EAu5yXvCGW6g/MyGRO6LvtCAcnDAQC0lG4vvN18zNT+p323
tw1ELczD5clq6Npnco+aVecqT5uycl5pzytZ3z5IXa482zBr/EST+0KT7Zen
nnPWujLJj7nMp+SdVtYzqm67Z5lVv9Bk3Nu6Hn9lqsuJFak9rnsu1uVdXWk6
nrKYzKHlPX+4UNenlLfOvG6fts0Nu5oveTgAaAoReTgAAGgw/X7/9WWOaaqu
b29Im/7FF19cyTe+Zeb9YnS5v4g8HAAUQJ1DTs/TnyHjnW7evPlu9azxvO8M
XJl5uKwxZlz3E+nef9j2ker6JX3VLZPvYpPtkP5Qec9ik2Fr63I1xax3F4M5
qrL6Z+U9S9p0TcZEcrG8ZWUds+p4uJqPjNdUZD512RcKSB4OAKCldIP+Qos8
3E2+29sGopbl4fLWkpJ63mnTzHpWkXtLXZtMckZp6rI4w55ZstpiU7drmLrn
XpM8Stb2k8xWGW0zmW4d8nBZ66doFqlo7qyOx1/Z6p5fi7RNt78WOWe42BeS
xlm4Mr8rM1VXry/vttAte5nLUsNn7GGShwMALRF5OAAAaDALFiz4cFqOS7Js
RacfaerPnXPOOZX0aV5yySWnBkEwZ+7cuZ+XecZjuLrMw2WMl0oeDgAKoc4j
71EuztOv8f3vf3+tjHvqOwdXVh4u67tql/2LWfOy6cuS/m3dtFzXmDJV1teM
GTN2Sc4wTx98W5erSab1t0omcNiyl9U/q6ulaDrOkom6mmZlvl/QvVdwNV9d
/QuTTGFd9oUCkocDAGgpnV745+Z5uHDvSBAc67vNZaKueccrf075TuV/UZ6m
/IhyjvJc5XnKTygvUF6Y01bl4Yrcm+jG4tN9TyHPMmm/V7S2la6GlORpBn9e
V8NNnnuKbkfdc51JXiZr+xX5biXrmbNI26rKw+n2QRffDulyZ2JWbbc6Hn9V
WGSdDTOrD6ns5TGpQ5imzVjGZajLCNtuC9351WXfxDBr+Iw9TPJwAKAlIg8H
AAANRjJimhzX8S7mkZYVk1yai+nnJXKYU4szdinrsfR+W/JwAO1HnUt+VXll
nr6NAwcOTNx66633LF++/FDb8nCi7nvbYe8O8qqrRWc7H6kllzatkXr1i1nZ
1uVqkoP9rfJuTvp/TX/e1fbS5eFcjkei6yd3WYduUN37UFfnnaLvAOqyLxSQ
PBwAQEuZPW/lSaZ5OPH0eave5rvNLlHXuJcr3608U3lpVE1WbVkV1+8q8nBF
aouJkhdLm7bunkf33Oniu5/BaUpuSO4HB2v6Zq1nyUK52JZF7kV128/FvbJu
G2Ytv+88nK72lSj/7mL76dZRVn23Oh5/Vahb7mHHYZa6Z8Y807O1SB5OlG3l
a5tIXcy0dtlm2HRjCOfJObrap3zv7wnJwwGAlog8HAAANBhdXTNX85CabD5r
p5XNjh07TkxbvqoyauThAKYH6pz5OuU/5+3j2L1797U33HDDzrbl4XTfeo44
7GPSvXPQZUyGqXu3IP9Wg/6wXLZ1uZqkjAMbr2+T/dJHHs52bOG87S/zW2+X
9SKHqRsDy3SMmLrsCwUkDwcA0FJmzhw7rtsLnzbNw3WC8MO+21wUdV07Qfle
ZRBVVKttwNbk4YaNH2pjGTW9XNwrSW1gWTbJZ+imp7sPdTnWoS7LkzUeq24d
u/g2Rte2rPFcfefhdM9JLp+ZdbWms+ZTx+OvCovWRRxUl/2rom794L4m52ep
Fa5rl6+2DnrgwAEn5znddIrW9TSxzvt7QvJwAKAlIg8HAAANJdKMZXr22Wd/
09V8ZKxSTR7upa7m44tzzz13cdrySf29KtpAHg5g+qDOmy9TfrJIX8fOnTtv
WLt27ffVc8jzbcjDibp3Ey6+1XfZL5qVo8nqv6+rbV2uprlt27YVNt84l9U/
K2OGpk23qvFSyx77RPededHzjq7WommesC77QgHJwwEAtJhOL9xgPGZqEH7W
d3vzoq5nr1R2lIs8XEuTtiYPJ/c4RdqY555H5pn2Oy7GJ7VR9z2YyzyVbszN
rDrMunUs+ZSibdPVWMvaHr7zcFIXLO13XPRdxBbJTdbt+KtSV7UXdX1IVZ4z
JL+YVnNQzsmm2ThXdQttjL/vGqbpN6m6XKjL4y3Nuu/vRyQPBwBaIvJwAADQ
UNQ15Zi0HJfUdHM1n3nz5p2XNh91/XuDq/n4IKs23JVXXnlSFe0gDwcwvVDn
7+OVf1W0z2Pv3r1Td9xxx51HnlUqycaVlYeT8T5GSuxr1PVZZ401MmjW+Ciu
xrep2rYuV9v1UR/O5Xs6qZWWNp+y83C6d5FFzzu65Sqr37yGffXk4QAAWkyn
F37GuD5cL/y67/baEh2uB3e68sserqHDbE0eruh9SZ5p6771yMqGuVb33YTk
R+RnJHNWVN3zXVZdpbR17KoeU5GaT77zcLqMT9Gs2aB5nynqdvxVqa72YHx8
majroypaY8+1urFJY01rlLtUl0M23Ra6MQyq2N/qvr8fkTwcAGiJyMMBAEBD
iTT14aSmm6v5SCYsbT79fv/1rubjA91YsFWOB0seDmB6os4xv69c7KL/Y//+
/SsefPDBmyQft379+geuu+66XVNTU3tXrFix32VWrqw8XFYWq+i3rC6nrXuX
MlKvPjEr27pcbbes/tmseoEu6kLoxhQdMXgX5kJdbcq85x2p6ZY2TRnfpmn7
QgHJwwEAtJhO0D/duD5cL9w/Mxh7ie82m6KuYe9Ufs7DtVNna/Jwcg9Y9T2P
7luPKmoMJdXVR67KvJkzl9+r6PY13bOG7zxcld+9zJkzZ1vavHRjYNbt+KtS
Xdby8OndbDq650TfyzjMrD41MWuc5DLUHS9ZfQq6ZZJjo4r2131/PyJ5OADQ
EpGHAwCAhiK12arIw0nmLW0+S5Yseaur+VTNJZdccqouC7dgwYIPV9UW8nAA
0xf1fPDWqIJ3LQcOHJh49tlnVz7zzDOT+/btW5XX55577gsHDx5cFXvo0CFn
3z/rvvs0HV9wmK7Ho9G9S/Hxza0r27pcbbfM/lld3/XExMTaom2XMXjTpi9W
kYfTffefd4xg3TaxeY9cp30hp+ThAABazKyLVrzZNA8nfjDon+y7zVlEh2vC
zfFwzTSxNXm4ot9V5Lnn0Y25V+b9mW37qzJvHs62tnrefU2X2fKdh0trdxnP
zLr2yfdsTTn+qlZXw0+33mKLjDXsU90YrybHfRnq6mFmbQtdf4HpeKtFbcL+
HpGHA4AM1Hnix5SvynJ8fPzWjFoJu0ymozzB9zIDAEA70OXUqsrDyViqruZT
JZLj02Xhqs6mkYcDmN6oZ4SXKf/fGvShmPgvZU1bV5+sSN+y7ptqk75Qm3b6
6F+sYv03ebnabpn9s7r3CIdPXcXarpt2Vfud7pvzvOedMteZr30hp+ThAABa
TrcXPm4+ZurU2b7bq0Ndt16vvNzD9dLUVuThXNzf5bnn0dVkm455ON260rXR
5brSbZOqxgJ1WR+ujGeXvN/Z1O34q1pdns2kXvfcuXO/k/b7Ugvc9/Lp1H3v
Jcq6qbI9uprwWdsi7ViT2n1Vtb8J+3tEHg4AHLFs2bKNujyc+vdHfbcRAACm
F1Xl1KrK3VXFhg0bXpWVhVPPju+ssk3k4QBAiKLoPcpFNehL0VlaHk4c0fTb
5el3zBrz0XV/WJNzY21drrZbZv+srraiKHm5vNM2GSeqqv1OV5vS9ryjW2cu
x5eqel/IKXk4AICW0+mF1xrn4YJwke/2pqGuWW9XfsnDtdJG8nAF7nl81e8d
pmRA0tpSpXlqsK1bt+4aV+sh772r7zzcjBkzdqX9jut9hTxcfvOOa6sbb7UJ
/SJZ48VWPT60qDvnpW0LeQ5P+50rrrhic1Vtb8j+Th4OAJxAHg4AAOpGVeOY
tikPt2PHjhOzsnDnnHPOTVW3izwcAMREUfSTUb1rxZWah9P1NeXp85K+PpfT
y2qjq/5RaZtMT757TVP6d3X/nlSmlTU2bFuXq+2W3T+re48g5sl4ZX2z7nq/
y1Le67laPp+1BGrYV08eDgCg5XR7/b83rw/Xv9t3e4ehrlfvVy51fR08dOjQ
cnX9Xblnz57+k08+ufqxxx67Rty9e/e1eXzuueeuUV4be/DgwZVlXL/Jw5Vv
k/Nweeqrp6mrRV3nPFyTx0udTnk43TidukyYbmxlH1myPOq+PfMx3qtuLIK0
darbz2Rc2Kra3pD9nTwcADiBPBwAANQNXU5t5cqVb6hiPk3Kw6lng5dmZeFE
xTFVt833eK0AUD/Uueg3lJfVoF9l0FLzcNKvNZLS15RnTATdt9t5+9CqyI2V
MYZOVv98W5er7ZbdP6vLisVKJlH3Pi1WvlXXjV9c1n5n0i4X5x3ftQRq2FdP
Hg4AoOV05k+dapqH6/bCQzPOm3y57zYnUdeqGUWvdwcPHhx/8MEHb7r99tvv
Wrt27fdWr1795IoVK54bGxt7Xvc+ydbt27e/yD179txSxvW7rXm4poyXKu1c
tGjRzfL9SNnKvattG12uK913N3myerrt73JaacdI1eOl6sa9rNvx50PdOJ3S
T5T2e7o+JN0xUyd1WcCya5anabst8my7MmzI/k4eDgCcoJ45Zi1btuzcNJcu
XXqm7zYCAMD0Yv369a+mPpwZkWEWbuvWrV76ZsnDAcAw1LnrWOX7lP9ag/6V
2FLzcKLuHYyuz3dQXbauSB+a7l1KnXNjWW1r63K13Sr6Z3XHZFKp//f4448f
9e5K3kXo+uTTrDLrqKtPIWOgmkzDdy2BGvbVk4cDAGg5oxdOvM40DyeOBv33
+G5zjLpO/Wnea5zUftu2bdvNa9eu/f74+PhBl7k38nDl3PNMTEysdbFcZd+z
md53+mqjy3EK0/a1rO9R6pqHE13npVzX0JtOeThRV4tx2HOr/F3az0sdcN/L
Y6qc09KWQ9aJjzbp9pvBbaFrvzxz16XdNdrfycMBAAAAQCuRGnBpuS7JsLma
T9PzcCZjpIobNmx4la82kocDAB3R4Vzc7yj/oQb9LKXn4XRjnEp/sOl0dGMy
Ss2rvO3TZV6anBtr63K13Sr6Z3XZ0mHKOyzJnErduKzxVnVW+e33tm3bVhQ9
78jylr0tfO8LlpKHAwCYBnR74feMx0wN+uf7bq8QFagLd/fdd2+empraW0UG
jjycu3seXb6i6npJuu+Qqs562K5jV2MtFqmr7DsPp3u+GZaxKqJuXuThstUd
91KHcfDn5e/Sft7m20wTZV2pc/mEtFG+HXM5BqhuuX3V15dlNd0WupryVdfo
a8j+Th4OAAAAAFqJLqd22WWX/W4V85k3b955ruZTBpJxM8nCSa09n+0kAwcA
pkRR9LPK0yN/Y6mWnofT9Y0fXgVm05FMTtFpDFPXtzjiqH/OR26sjcsl7yOk
b1X6l30ptSjKPF6q6p/N2j/yKjm0tDFpqn43qXvflLX/62oJSH9+Fe2vYV89
eTgAgGlAtxeusBgzdbnv9kaH629bX9ceffTR69esWfN41Tk48nBu7nmk7lra
77iq+yR5D6m9JJkxeQ7YtGnTavm7wTbpatW5ypuVtY5dfYuku3fO+ibGdx5O
9pe035Ft7mobZPWL5BlTdrrl4cS0fqFhuTCbn82jZN5kWsPmI99zulpm2Q/r
eI5Ju74k169uv/dRo68h+zt5OAAAAABoJVXl1HTzufjii09zNR/X6Orn1aUu
XAx5OADIQxRFr1G+V/lXyk8p/62CfpbS83CiblwQkz5m+XY37feL9v9l5YJc
9Inplj+vRfNwTVwuXT9wlereVRS1yv5ZXQ21PMbvVNNyaFXn4XRjumadd3S1
BKoa96qGffXk4QAApgHdIPyEeR5u9YM+26quTe9ULrW9pt1xxx13Ll++/JCv
LBx5uOL3PPL3ab+TNT6nqbo658l7Sd2zquva17Lcee4DdevYxXdSunU1rG5X
0e3vclpV5Rl1Gc6sfFbdjj+fyhi/ae2VvGr8c7pnXXlOLHubuqyNrqtB6TMP
pzt24m2hG7fAdY0+Exuyv5OHAwAAAIBWost7uRzHVJeHczkuq0suueSSU5uS
hRPIwwGAC6LD46pKRu5Xle9W/qHyNOWHlH8RHc7NzVF+tICfqqI/R/eOQL65
z/p93TfbyT7PPEq2KW3aovSjFl1+6SfNU4tMN0ZsVt93G5errJpmtpbZT1p1
/6xMUzcuqInyzjF5HNYlD6c7BrLOO2nL4Or9ah33BQPJwwEATANG50+93zQP
J868YMxLfX51XXqT8mqba9mBAwcm1q5d+z2fOTjycO7ueXS1gF086+ieQZPj
aGbV/XLRFjH5LCT3pJK3kTbKs1XWuKy6deyiBlpafWiT5fedh8v6RsjFtsva
n7IyTXU8/nypq0UoWbn453QZMlfLpcvliq6+o9ONlVB2/fq8yx/Xx5Pn7mH/
XuVzddKG7O/k4QAAAACglcgYn+Thjmbu3LmfN8nC7dix40TfbY0hDwcATSGK
oouq6tPRva/Q9Tvp3i+4+t5e179YdYbH5bK3bbnIw5U3X9132zoH+991feI+
vl1P63/XrU/J9qX9TvIdS9nWsK+ePBwAwDTgj4OVr+z2wudN83Cj88MPVN1G
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
9sL9M4Oxl+Sdl7rO/LzySzbXpk2bNt1rmoVbs2bNEwcOHLCtaXWp8mdcrtPE
8pKHw8okD4eI2BjJwwGAE2bPW3lSt9e/SfP89rT6942dILy0E/RP7wSr3jIS
BMf6bjcAAEwfJBOWlWX72Mc+1t+xY8eJg7+r7puPP//88y/N+n3Jh9m26+yz
z/5m3lpz0q6sNpXtypUr32C7zLaQhwOAphB5zsPJuCcjhnkpGTfCRxulPpRp
fqZsJcfEcrXbqjJQkms02Tbyjkyyj7aZR6kT6HtdpiljLTVhGcjDAQCAb2Zd
tOLNpnk4cXT+1G/mmU90uN7aZ22uS3fdddftplm4ycnJp/fu3Ttled37pPKo
/jZXROThsELJwyEiNkbycABQiJkfH3tFNwgv7/bCgzbPckcycvuUNyr/aTQI
T5sdhG9Skyy9xgwAAExfpN6aScZLxhiVumqiLq82WIctT5uK5OHk333n4fr9
/uvzbQ1zyMMBQFOIPOfhJNMxYpiv8d0nZVoTqwxnzZq1s6zaaW1drqZaVQZK
1ntZ23XLli2rfK9HnZIFzVoGyf75bid5OAAAqAPdXvi4+ZipU2fnmYe6xnzU
5pr0/7N3JnByFHX/3gCCCh544/36x/sWxfuNiiIqBq8xyU43igcqGhUjkmPH
6uD1iooGL/AiBk3MJJvsThcgAQNIOOUSOZUARkxCuCHhyDX/+m0yuG5mqrtn
aqZ6Zp/n83k+u5vsdldV3zXfrrrpppv+XC6Xt6XJwi1ZsmTzrbfeujzjNe8Y
4x6u23JMncnDYcckD4eI2DWShwOAZpkQRvHHzPPbuqw5uISM3L1BpM8Iovg7
Qany4f7Z+jm+KwoAAL3FkUceucB1Jkzyc82Wp5U8nKyXPBwAQH6oes7DiTLf
Zl9CNiUv44fJPKMyVlZSeV0p47d1IlvUq/XqRjuZgVq9evWg623re0y1tMpc
qLZ6SE7UdxnJwwEAQB4II3166jyc0vOaWYe5xjzKOCvN9Wj9+vWnDw4Obko5
Nty2G2+88dyM17vvVds4LtyoOpOHw45JHg4RsWskDwcAmQkHhl4tc5+6zMEl
ZOTuDiL9x0DF3yyW4g9Onr3sWb7bAAAAuhsZy81VHmzatGnntFKWZvNw5l5+
gu8sHHk4AID/ppqDPJzkovoSMjZ5G0NMynPMMcf8NanczSoZQR+5ol6tVzdp
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
cp111lmr02bhzjjjjLVbt25dnGK5fzAe1O76wg6U2iVU+p2B0vPCSN/jKRe3
OYh0HEaVyQeryqN9NwkAAHQPoYrfK2OPNrrGNJWHu+rfW2/4153XbtmydTAH
94CIiIjY5fq+X4L2Qx4OAAAAAMBOlTwcIiIi1reteTiz/BcZT85Sposuuuja
tFk4rfXdDz300NKMdX5pO+sMOzNRnfRIyaRtz6bpTZ6ycfeNZPOUfmehUN7V
d5sAAEA+CWYP/4+5ZgwnXVey5uH+tuq2tffd/9CpObj3Q0RExB7R930TtB/y
cAAAAAAAdqrk4RAREbG+bcvDmWW/zDg/S3muueaai9Nm4ZYtW/bA3XffrTPW
91Ptqi+kI5yx9Ikyl6nMaepxPtU1Mqdrv9Kv8t0eAACQD0ay2yqOzDXigTTX
krR5uEuvu3XD2ts3nJeDez5ERETsMX3fP0H7IQ8HAAAAAGCn2sE83OrVqwev
vfbaoXpu2rTJ+zMioivvuOOOxfX281WrVmUdpwg7oO3c5HObPfDAA+Urr7xy
uB3lkn30/PPPP2XBggXnzJs3b6V8FZcvX366LF/W7Xu79JJyjZP9TNpca31G
rb1rbX7ppZfGsk18l7OObcnDmeW+3bggS1lM+521ePHirWmycEuWLNmyZs2a
MzPWdZZxl3bUF5qjX+nnhUp/PYz0db6ycUEUX2Oc2T9bP8d3ewAAgB+KKp5k
rkU3Zrl+JOXhLr56zZYb/33X1cyNioiIiO3S9z0UtB/ycAAAAAAAdqodzMM9
//nP3ySrrKdkBHw/IyK6ctasWVc32tfJGeVP27lp+2nST7kkp+ayXLLvyTL3
33//Dbbl1jzggAPukrwW+2xz3nPPPYul/SZPnrwmTXuLsi9Onz79+hxdE48w
7tWkjzE+zvgk4zONLzEeYJydtRy33377aUuXLn0o5dhw2/7+97+fn3Ed3zc+
qi03WuCEqSreP1Dx8WGk13kaM25bGMXnGD/dP0Pv7bs9AACg/QRqeF9z/j+1
meuGLQ931arb1my8f1Ne7vUQERGxR/V9LwXthzwcAAAAAICdagfzcJKt6GuQ
AZCxcXw/IyLWc+7cuRf3ZcyxHXvssZc22tfJFuXPpNyZr/OTLbcm+1iWZZ1w
wgkX2OqYpGQ8Jd/le1t1gzIWnC0Tm1bJxp199tmnea7PD32354YNG4Yrlcp9
aedJveyyy67MuI5fGJ/k7MYK2kqhUN61v1R5TxDp34eR3uApG/eQcWmo9IcO
mjZ3D99tAgAAbjlYVR5tzvPfMj7Y7LWiXh7usuvX3bf+zg3n+r63QkRExPGh
73sqaD/k4QAAAAAA7FTJwyHWVcZnGr2PkofrXSXn1Wh7iUccccSqTpdJ5kO1
lWndunVL0i4nafy7LOYgn5Vrx543XHjYYYf902OdvObhNm3aNHjaaafdnjYL
d+65596YcR2/M+7b4q0UeCKYPn/PMNKh8XTjFk/ZuLsCpX/Rr/T/miJN8N0m
AADQGkGp8uEg0v9s9fowOg+3Y27Uq7Zs3Zrq/h0RERHRhb7vq6D9kIcDAAAA
ALBTJQ+H+F/ecccdi+vNb0gerreVzFGjbeZjux1zzDF/bVSWSZMmrU+zDMmu
2erUrFrrM3xvrzza6hh8NiXT6Gl8Pm95uK1bty4+88wz16TNwi1fvvxW+ZsM
61hkfH3zd1CQJ6bMHH5qqOIvh5G+xEcubkc2bnUQxd8JVPwy3+0BAADZmKoq
LwoifYara0ItD3f1jbfdsvGBTdr3fSoiIiKOP33fX0H7qeXhyMUBAAAAANSn
Sh4O8WEl59NoHyUP19vKOajRNhOXL19+eifL02pZrr322iHbMlpVxkHzvc3y
5IIFC85pZ3t7PH94ycNJrm3FihX/SpuFi+P4HtM2yzKu55Dsd03QDRQHhl4Y
qPibYaRX+cvGxZcbpxdmxc/w3R4AANCYgirvZa4X3zVucnkd+PHiS2+57a6N
5/i+R0VERMTxq+/7LGg/5OEAAAAAAOxUycMhPqxtTC7ycL1vo20mypiBnSpH
0pybmzZtsv69/L/t72vKmHiyLhl3TPZLUXJ0tuNgtDKWou9tlgdXr149mKa9
5Bo4ODi4Qn6/1t7ShnL9mzVr1tVpltHJ/XCHHc/DbdmyZcmKFStuSZuFW7p0
6YN33XVX1nzmZ1u7e4Juob80/OYg0j8/NNK3exozbqvxzEDpjxfVyY/13R4A
APAfAhVPMefoWxyf9zcEUTxz44ObP+j7HhURERHHt77vtaD9kIcDAAAAALBT
JQ+H+LCucmy2bAt5uPw6d+7cixttN7FT81Xa5m6VrFrS3ydlq2TuzVWrVi21
LUPqWm/e4NGmnbe117Vd22qmGU9P2vyII45YlbQsmQe3g/XraB7u/vvvHzr9
9NPXp83CLVmyZMu///3vP2Vcz9eNuzq5iYKuYb/DT3xEWNKHhJFebHzAUzbu
gUDpPwSlyvulPL7bBABgvCLzWptz8lnOz/NzdLmoBp8p6zD3Gu/3fY+KiIiI
41vf91zQfsjBAQAAAADYqZKHQ3xYV3k4GfPpyiuvHB6rjL3lu47Y2HXr1i1p
tP1FmROz3WWQTJStDDK2mO3vJedm+/us44vZjgkxKVfX60o2Lam9k8bzG6tt
3ua+HXnGDtaxY3m4NWvWnDk8PLwhbRbOuO3666+/oIn6PNrlfRR0HzJOW6ji
T4RRvELGb/ORjZPx6oIo/mlYqrzRd3sAAIwXdpz/jzPn/s0uz+nmfH5NsVQ5
YPS6quThEBER0bO+7rmgc5CHAwAAAACwUyUPh/iwzHOKMuZZo31AzmHtXr9k
7lpZ//Tp069v9PfN5qhsbSJj0fneZj6VNm3UNq2MnyfzqjZabl/K8eYc2fY8
nIwJd8EFF1wv+bYMWbjq5ZdfnjhW4hh/ZXyK8xsp6GoKs+JnBCr+Whjpv3rJ
xW0fN25VEMVzigNDL/TdHgAAvYo514ZhFK91fP6+N1D6q/XG/KySh0NERETP
+rjngs5CHg4AAAAAwE6VPBziw5KHw+XLl5/eaB8QZQy5dq5///3339Bo3TJu
WNLf28re7HlWxqSzLTfr+Ge9YlK7tLqv2HKIknvsUD3bkocz59NlN95447mG
G5csWbI5Sw5OvPDCC6/LuM7fG1/g9g4Keo0d8+d917jaYzbu4kDpL06ZOfxU
3+0BANALBAPxK825daXr83UQ6d8XZw3u02i9VfJwiIiI6NlO3nOBH8jDAQAA
AADYqZKHQ3xY8nAo2a5G+4A4d+7ci9u17lZzZzIfb6O/bXVsO9v5e7weG7Z5
TV3k1Wz7Q7vmTL3nnnsuvuOOO66peeONN1508cUXX9OMF1100bWSWzv//PP/
vnLlylVnnXXW6tNPP339jjlRM40FN9rzzjvvhoz1WmR8k+v7J+hpJvSX9NuD
SP86jPTdnnJxW4ynBlFcDKbP39N3gwAAdBuHqGWPN+fRH8v51PH5+cp+pf83
af1V8nCIiIjo2U7cc4FfyMMBAAAAANipkodDfFjycCgec8wxf220H7QrhyTa
9r80+aoTTjjhgkZ/L/OwtqtNJIfne5vlbT+RLJuLddjGC7znnnsWu67T2rVr
15myV2tecsklTWXW2qVk65qo14fd3z3BeOGgaXP3KKr4I0EUD4WRfshTNm5D
GMUnh6X43YVCeVffbQIAkHMmhCr+hDl3rnd8Lr67GMVfSnserpKHQ0RERM+2
+6YL/EMeDgAAAADATnWc5OFk3jpZx9lnn31aTfm53XMfNlJyDJIhOf/880+p
lUfmaZSfJUfRyfkHJee1atWqpY3ax/dciHfcccfi0WUb3U6u1yVjfzXaR322
gc3avi3tItba6corrxz2tX83KmNejr8k5XhotB/0tTH/1eo6bfNrtnq82LJ6
cjz63mY+7MSYeZ0ely/PeThTlquaqNPnXd83wfilf4beO1SVzwaRPjeM9DZP
2bh1odI/CtXQa323BwBA3ugv6f3CKL7Q8Xl3W6D0vKzzWFfJwyEiIqJn23XP
BfmBPBwAAAAAgJ1ql+XhJEcjuQzJLdWUMXrq5WokDyRjKjVa52iPOOKIVe3O
5EnGRspuG+9ntIcddtg/25UzkWyMtJ1tm4wti8wN2Go2Lu32k7yg/J+MxdXO
bTe6HDK2lm19s2bNunr074tSl3ptItttbD1rP7vYfpKNSrtvj95+reZnuvn4
y6rtOJV9wfX6pP6N1idlSbMM2RdlW8j+J/uztGutHq0eu7Y8XLu3nWRiZT+r
d/zJfu1yXYODgyvG7uM1x/5uq9srjbKvNVrPeMnDLVmyZMt11113YRP1iYy7
Jd4IATRB/2z9nDDSs4MovsZHLm5HRuO6QOmBfqWf57s9AAB8Es5Y+sRQxSeY
8+JWl+fZINKXmfNsU3OuV8nDISIiomdd33NB/iAPBwAAAABgp9plebhG89ON
zo1JViht5qyekvlxWW+pW9rcWT0lo+UqFyeZPNsYUmlsJdOVZvvZ5ny0Kds8
Sy5HMnettEPNenMW2uZRbGWOQ6lfK/u2KGVrNkfTjcdfs0ouylZO1+uT7Fqj
dbU616mLMR4nT568ph37dBqTxutztR5pp7Trkd+dN2/eSsnOybaT82otT+sy
D2c7lsZDHi6O43tvvfXW5U3U5Tjjnn0AHWBkPCIVHxdGeo3HbNzKIIo/J5kQ
3+0BANAxlNqlGOnPHBrp2x2fU+8MlT5Clt9s0ark4RAREdGzLm+7IJ+QhwMA
AAAAsFPtsjxcozGKankcySc0WkcWZT2t1leyCrYMSVZlWa3kH2zjOzWjZFRc
laG2/V20l4yFlib/I23poh3qbRNbWzezDeVvpF4ut18zGctuOv5cHL+u26/Z
dbUj99Rt5bNdP1xtC5lvuNE6JAuaZhly7nHZHrYxK9uRQ8xRHm7bBRdccL1p
z2bm+f25kUwQdJxCobxrUVUODFQ8P4z0fZ5ycZuMw+EcXZioTnqk7zYBAGgX
QUm/3pzvLnF8Dt1m/OVUVXlSq+WrkodDREREz7q454J8Qx4OAAAAAMBOtUfy
cDImlassTs1WxkGT+UhdlmW0zWQgWh0TrpGSH8lSDlsezmV2UDIkSZm4bsnD
2ebR7PQ+3i3HnyttY7bJ/7laj20sOpfraVbbeIeS0+xEGWRe1Ha3ke0cJOf0
Trd70nWkHevMQR5u24oVK/61fv36TNeWUf7S+PQ+AM8crCqPDlWlP4j0KWGk
N3vKxt0TKv2bQA2/o5UxjgAA8kRhZvnJ5tz6a8muOT5nXjxVxfu7KmeVPBwi
IiJ61tV9DeQX8nAAAAAAAHaqPZKHcz12Vs1mxh1qZxZOlKxX2rJIJqzV+TWT
lJxK2vK0Mkad1Ns2VtJYJQNoK0s750t1lYezjVflylmzZl3d6vbL0/Hn0iuv
vHLYVj5X44DZzo1SBp9tIPPX2togyxzFrdjuMeps5wOX859m0XZctSsn6SsP
Nzw8vOGiiy669vbbb29lvuRfGZ/dB5AzJLsRRnqa8SIfubgdOY9bAhUfO0UN
v8J3ewAANIOMwWnOY18w57O7HJ8fbwuj+NOuc8NV8nCIiIjoWZf3NpBPyMMB
AAAAANip9kgeTmyUlZIsg/yd5LZEGXcq7XhpWXMQkj9Ls1xRyiRZlzvuuGOx
KPOPLliw4Jw0ma+0Gaa0WThZnmyDdevWLamVR36ePn369Wn+Pm1uKWseTtpC
ttnorIt8LxmdNHU74YQTLrBtK8mUjNa2LBk7auzvN5qb1UUeTvaHtO0k+7Ts
S7L9RPlbGXPMdsyN3Rd74fhrh7bjMUsWtJGyvWxt6rPuSWP+JWVOXWs7H7W6
LeTc22jZ8n+dbvukXHXWsTnT2u483JIlS7ZI9s2U/9bzzjvvhquvvvovLWbg
av7C+Mw+gJwTqOF9QxVHYaT/4TEb97cg0kdPnr3sWb7bAwAgDaGqvMWcu65w
fC7cas6FPy+o8hPaUeYqeThERET0bDvucSBfkIcDAAAAALBT7aE83FglvyS5
oEbLkhxKUgZKzDJPXpr8WJrskW3+xJoyR2WrbSXzICbNKyrZuDT5paTlZN1+
Urak5UneLWk5Uv60289WvjT1S7OctHm4NLlIW96vZtr5VpP2p244/tqhbR9z
kQeTfGAr29e1sn/K+SfN/tfM3M2taBuvr9VtYcvXuhoHMItJ59x2lcmc5+IH
H3zwtJr33nvvPMmrNeOdd9556l133XXK3XffrTds2DBslt2uY/l441P6ALqM
ohp+Q6j0T8JIr/eUi9tmPCuI9CcPUcse77s9AADGUlD6aYGK57s+/5nz3vlF
VXlNO8teJQ+HiIgZlX7H2jvK0t8iz/1Z+iIRx9rOex3IB+ThAAAAAADsVHs0
D5dl7BxbHqUvQyYlzTypWeY+TBofTPJGjf5W+k6SypJ1nsOkdkqT80u7/SSP
k7ZcSXOKyhhuaZdlK1+W7E+rebg0OT9b1qyesr/YlpdmLLY8H3/tMulYypK3
rGc7l52knI9kW4nSzkn7yGh95RRtOb1m28t27s5y/nBl0rh8csx0sDw/9LGd
M3iM8bF9AF3MRKV2K5b0+8JILzRu9JSNe9C4JFCVDxRUeXffbQIA4xs5LwaR
PtKcl+5xfK67NVD642YVE9pdh6qHPJzc08o7TvUkT4HjwbwfA/JOYL2y+X4H
ENMp/Q31tl/Wvrl6y5X+GFufufSDyDtzad4bxs4q5xY5hmXeFJm3QOYXqCl9
bdL33u6+PZvtvt8B/5CHAwAAAACwU+3BPFwzfUm2ssn/pVlG0lhXzZQrKevV
KKMl85/a/k764ZrZhkk5jaSsV5rt18zchEntlLZ/ysW4bq0uR/4/qY2aHZcr
afzCpHlv83z8tVNbTqyVuTRt453Z8q6uTDufcl/ff8+H2+z5w4W2rKicn5pZ
pm2/zpobblWZCzppW3T4s5w85+E+ZdytD6CHKKjyXmEUfyyI9BlhpLd4ysbd
Gar4BJmfsK8DmREAgNEUVfw2cx66yvF5bUug4uMLR5cf16l6VD3k4WzvjSQ9
5yH2gnk/BhqVT/7dd9kwWVs/azPjt8tzfZo5RthX8qf0yUpfYJZ3SmXbyfbu
9LmoPXc5kCfIwwEAAAAA2Kn2WB6u2bGk5J2+RstMM26WPAvbytXK867t+Vqy
E1nLkmXsrnracn9JeZSk7Sd9A+0oV9rl5iEPl9RGrWaRWsme5fX4a7dy/Laj
fLZ9thN9ZLZ9YbS1fvs89L3axutrdlvY6t7JutmOg5ryvnGH2zyPebiTjG/q
A+hxirMG9wlV5StBpC/zkYvbniE55eYw0t8KB/SLfbcHAPQ2hVnxM2SczDZk
fP88RQ2/otP1qXrIw7nob0HsZvN+DDQqXx7eARxv1uYp6FQ/Xz1t+c1G+hi/
Hv+jZBiT3j9Po2z7ev357dDt3Q3kEfJwAAAAAAB2qj2Wh2umD6KmrS8iaTwu
ySg0+ttW+7ZsY0hJnmbs79vGcJPx9VvdjpLHarT8pLxM0vZrdtyzpHL1pcy1
5CEPZ9sPXcyNkJS5sY3vltfjrxM222aNTBoHsN31STMOYSOzzGfcDm0Z4azb
wnZ+TTMHtCvTzLft4vzdhHnLw33N+IQ+gHGG5NFCpb8t+TR/2Th9qcxfKDk9
3+0BAL3Dfoef+AhzfjnKeJ/jc9aaotKBr3pVycMhdty8HwPk4fw79l1HX3m4
rOPC1exkHwXa9x0XdiLf6Oi2BnIMeTgAAAAAADvVHsrDtTK2mChZg0bLTurb
sI3z5GI8n7HLlOyQZELkncYs7SxZKBfbstk8im371cv2udyGaeruOw9nG/tK
lP93sf1s7WQb4y2vx18ntNW93nGYpC1D28zystpKHk6U7eVru9jmFM3aP2zr
h24m59iMSVlez8dBXvJwxxlf0wcAE4ql+K1hpE+UeU095eK2GJcHKj5U5nf1
3SAA0L2ESr/TnE+udXyO2hxE+geTjhp6jM+6VcnDIXbcvB8D5OH8KX1p9fox
feThVq1atbTRcpLMw7y/41HpJ212myUp/fvtfAfYwS0N5BzycAAAAAAAdqo9
lIdrdazxdo3p5SLDIHOcSv0kn2Fbni3j4nKuQ1uWxzYfq62NXfRP2sqVNJdr
q/uAi+VIGzT6O+m7c7X9ZBs1s568Hn+dsJVxEetpy/+1OiduGsfua3J+lndT
beXyVdaxyhwVLraFbTmd+kwibRZO+sx97PdV/3m4Y41vMe7SBwD/RUGVdy+W
4g8GUTwYRvpBT9m4jaGKFxjfO1Gp3Xy3CQB0B6GqPNucP5a04Zz0p6Iaeonv
+glV8nCIHTfvxwB5OD/a+gl95OFs71Mn2al39vA/Lliw4Jxmt1cW29Xv2drd
DHQD5OEAAAAAAOxUeygP12peoNm+Ddu7fZ2e384295/LPJVtzk3bnJ62NpZs
Sqvlso2vlmZb+M7Dybhgjf7OxTiDNZvNTebx+OukrsZetGWgOnnOkAxjozEH
5ZycNhvnatzCLM6aNevqRuWR82CaZdhyoS6Pt0ammSM1677VBn3k4X5tPNz4
gj4ASMUhatnji6ryqSDSZ4eR3uYpG7fe+OOgpF/vuz0AIJ8cNG3uHkUVz5Is
rePzz7/CqDLZd/1GUyUPh9hx834MkIfzo/RRNtovfOThbO9T9+3oU629dyj9
pDJ2mPzM2HCdN22fjRzDg4ODK2rvsIvSTybnHVvf1Whd9tmP1uW9DeQT8nAA
AAAAAHaqPZSHazUz0+yypU+i0d/ZsmHt0PbemjyDy+9If0qr2nJntr68Rm3s
qv+v1fGefOfhbP0krseH2n///TdkLWMej79OanuvuHZ8pdE210Kr4+y51jY3
aU3ZlzpdLlsOOe22sM373O59zpYpHm3abF8b7UQe7jfGAeNHjS+qMhYcQEtM
nr3sWaHSM8JI/81HLm5HNuUfQaRVoIb39d0eAJAP+kuV98i5wfG55iFzvvu/
YPr8PX3XbyxV8nCIHTfvxwB5OD+66muy9delXY5k2xotIy/7Kf5H2zmlZpqc
omz3NOMCtqM/0O3dDeQR8nAAAAAAAHaqPZSHk+fLVsrXjjkuOzHG0Ght7z12
ymbycPLvndjPksag852Hayaj1qy2vphGc2Dm8fjrpLa85fbTabrl2N4H9l3H
etryrzVt8yS3S9vxknSs2+okx0Y7y23LUI/W87hwNb9hnNGkXzMeZfyKcVp1
+5hvgXGScaLxJcYn9AFA2wgG4leGUfy9MNK3+MvGxRcGKv5CYWb5yb7bAwA6
TzB7+H+CKB5qQ+729OLA0At9168RVfJwiB0378cAeTg/uuprkj4EeV9trFme
221zNXR6fhG0m/RuqLxfmXWeE9s7tqJtvo5mbdNtDuQI8nAAAAAAAHaqPZSH
a3W+zWb7SGxz7nW6z81Wh07ZTB5OxsvqxH6WlNnynYdrVPZ2jL9lK2Oj9xvz
ePx1Wts7wWneC212rmHf2uZ4TTru26VtPMykbTFv3ryVjf62nWOy2dY72pxk
4cTP9gFA96PULsVS5YAwik8KI32PpzHjNpv162Kkpx6sKo/23SQA0F4mqpMe
KeNEmmP/AbfnklNuDpX+kO/6JVElD4fYcfN+DJCH82Oe+pps48O5fE8YW9f2
Hmsr2UWZV7XRcvtS9itmsV33OZAfyMMBAAAAANip9kgezkX/UbN9JLYx2cZj
Hs7WXo3K57KdbNsjqa/Ldx6u0XhX7egftZWx0fbI4/HXaW15tsMOO+yfSX8/
ffr06xv9/erVqwd918+mbZ5XsdMZLltfctK2aHSsteN93Jpp5sfI4X5AHg6g
x5CMSlHpj4aRrhg3ecrG3Wf8bVAaflehUN7Vd5sAgFuKKp5kjvEbHZ83Hgyj
+BuFI8uP8l2/NFTJwyF23LwfA+Th/Jinvibb/CKuc1DYvNIn02g7iY3m1Eir
5OkaLVv6DF3WpV33OZAfyMMBAAAAANipkodLXHZfQh9JM7midikZkEZl6aSN
xmFr1FYyDr2rNmilr8t3Hs7WJ+J6XyEP17zNzmtrm2+1G/rAk+aL7fT80KLt
nNdoW9j6NufOnXux6zLKvCq2d4tHK7/rezuPkTwcQA8Tzlj6xFDpI8IoPs9H
Lm5HxmVNEOkfFFXlNb7bAwBaI1DD+5rj+RT354lYT5699P/5rl8WquThEDtu
3o8B8nB+zFNfky0Pl4d9FLdrm9fURV7N1ifl+h3Ntt3oQG4gDwcAAAAAYKdK
Hi5x2X0JfSTk4XY2ax7O5XuQtvks856H69b5UsdbHs42T6ctE2abW9lHlqwZ
beMv+pjvVfbVrG1q29dafc93rDL3appzphxDrc453CbJwwGME/qVfl4YxaUw
0tf5ysYFUXxNUcWzJqtlz/XdHgCQHpkDOVDxN2UMN8d52VVBqfJ+3/Vrhip5
OMSOm/djgDycH/PU10Qerju09Xu5Gs/f9p5toz71ZmzbjQ7kBvJwAAAAAAB2
quThEpfdl9BH0i3zpUo5582bt1LmPGy3jXIdnZgvtZU+hbzm4To9X2qjeS/z
ePz50DZPp4zx1+jvbOP/5TQLtZO2LKBsQx9lyrotmtl2zWjLP45W5lH1vV0t
kocDGIcUS5XXhVE8N4z0Ok9jxm0z/rkY6c/0z9B7+24PAGhMUKp8OIj0Px2f
A+4Plf66zO/su37NUh1HeTh5jlm1atVSeU9Fxn2Xe2D5Ks+UrTzHyXsqUm5Z
Vk1ZpsucQBplfVK/sWWR+sq7L5KN6HSZRBlXWtY/ukxSRldZjVaU7V6vzeRn
2a7tevbt5DHQqP1t4313sr/H1zbIYr1jvFY+l+uRMeAb7RedrrPtfTn5P9/b
BLdrO5e46p/sxDrEtt3oQG4gDwcAAAAAYKdKHi5x2X0Jz6KDg4MrWq2XK211
yEPfSqPyuZyjsNF+lmbM+bzm4frakJdqZhy9PB5/vrSNxVivD1z+rdHvu5hv
oVPa3meWNvFRJtu+M3Zb2Movn925KpMtN9iuc1+bJA8HMI4pFMq7BkofFCr9
uzDSGzxl4x4yLpPMTVENPlPmeJWxqEzxJvhuH4DxzFRVeZE5Npe3cnyfev6q
nVz511v+fud99//C3IN8v8s9ptP3bS76WySPIvfWco9aU96rq/d8I3mwyZMn
r2m0zpryO7LcNOuXHIztfcOa8g6clNOWPWpWWabcy2cde1/6G+QZu519QJJ1
k/aRdSWVR965qdcHJO9Ijt3GLtpSyibLsu2Ho5X2lfG8XfZztDsPl7b95f+l
LcbmJNudh/O1DRqdN+rl2mSflP6PNOWTfbiZ7Ta6HPK+rm17yTE7+vdrx0O9
NpFzXr1jp9Ezfb3ft50zZXuMLcvotqz3f7bytrqf1yuH63OuLK/euqROrudQ
kL77sduj5tjftV17XJWnlblNsljvHg56C/JwAAAAAAB2quThEpfdl/AsastX
dHq8JFvfscush+s2djXPovQBNap/mn3Edx7ONrad634n27rIwyVrO+7lM4ax
vy//1uj3G43H16zSXtKHKWWUz3Jcvl9tq3c75vVNo9Q17baQPvVGv+uqD9m2
rUeb9nNBz5KHA4ARgunz9ywqHYRRfFoY6S0+snEN8nJ3GdfIvIrGvweR/ouM
LWc8PYjiIfN1Yaj0b8z3Pw2U/r4p/zdkTlbze0eGqvJZ8/PHTL0+KnMymt97
Z39p+M1FVXlNOKBfLPO2Tpk5/NSiOvmx+x1+4iN8bwOAPFBQ5b3McfVd46ZW
j9+Lrl7zsJddv+7eW+/a+Occ3Pu48gedXqeL/pZG/QmS66j9jnyfJo81Vvmb
RuWQ+/C0GZmx1nv2akYpW9ocURole+Fq28rzXNZ8Xk2p0+gx4xptu9HbOIsy
BpltHPQ0unpHqF15uFbaf3Td2pWH870N0pw3pM/D1geVZNpnZ9tY/lmsN+aj
rb816+9nVdoy6f9dnW9s52LZ11ytp7bv2urlaj22vuKx65HfreWGpf9Ijq3a
edNln1czfbLN2Ac9D3k4AAAAAAA7VfJwicvuS3gWtY1372rcJ+m/lP436U+R
fIv0dci/jS2Xbaw6V5mzdrSxq/dhbWNwpZkL0Xceztbv5LJ/K6kvqNF8L3k8
/nza6LOEen1kWX63GaWPXpZVbz3yTrSrOtv6YX2eYxpdX0a3r22/d3WuTpuF
c92P3EbJwwHAToxkxKL4S5I9852H8zRe3XqZH9J8vS6M4svN9+eb7/9kvtfm
6+JAxfPN1xNDpX8URPF3ZN5H8/NR5t+/YH73k6Gq9BdL8QdHxt4rVSZOVfH+
/QPLXh6o4X0Ls+JnFFT5CYUjy4/yvZ0BxmL24SlmX77F1fEkObiLr1mz+aY1
d1+5ZetWp/Pj5cCuzMM1eiar/b2LfMfYXIvt3Za0tnIvL88IzWadknQxfrbt
OTmLtbGWGmUwmsmLuSpbzVafkdqRh0v7fGez1l/SjjxcHrZBozLU+rBctKGY
5n1j6Ttysa56fVBZ+6xcbhvZf23LczVWf6vvGLs+bl31g8r74Y3WkbYfS9rG
Zd+kLVfucg7uPuh5yMMBAAAAANipkodLXHZfg76Nmrb+ljRzdKZR+i4brWPs
O5eNfs9134XUO2tfgK2NXYzNZGunNO+N+87DdSrPaMtw2vJZeTz+fCrvUDcq
8+h38G3vvEq+td3bNE0WNK22z8B85uFsx05tW9j6QF2M0Wcrw+hrgsu+zQ5I
Hg4ArBQHhl4YKH2MjM/mO6vWi8pYfMY7jf823mD8m/HiMIrPCSL9R5lLNlTx
AvP9r0Olf2L+/XuyPYIonmn+/cvFSH8mUPGh4RxdCNXwwcVS5QDz/28KB4Ze
LfNd9s/WzwnU4FMmHTX0mIlK7eZ7f4J8MmVg+KVmXzvL9f59zY23/ev+Bza1
bW5Jz/ZUHk7ulV2OdVS7H3aRhavZzPhWtvfpXNnKs7JtbOtmlOeVRvM1Zs2L
tToeWSNbmdfAdR7ONp9hM/tBo/xLs/tIXraB7bzhKgtXM+k47+U8XNL50kW/
ma3PxPX8pTVt/bhyDnSxDts8taP77jpl0rZ0ua4+6HnIwwEAAAAA2KmSh0tc
dl+KfgXbOOcuxgGyjRs2eh7NpHG/XI1JNHrOROnTk344KaOMQ2XrO7O1sYv3
/mz9gWnq7jsP16m5Amz7ky3TlNfjz5e2z09G99PaPjtyVbekfl9XGSzbO6wu
5wRyWf/a+HiNxn1wkVu29RuPPk5czcnaQcnDAUBqRnJWSv/s0Ejf7jtHhs0b
Rvpe461hdMrN5uu1QaQvC6P4PPP9meb7OJyjy+b734YqPsH8/EOzzb9t/r9k
tv9Xg6jyefPvnyhGemqgKh8IS/G7+5X+32Kp8rpAxS+bPHvp/5uihp7eP0Pv
PVGd9Ejf+yzYkbmCzfY8zmzvzS73sSCKr5H5iXNwn9NOeyoP18o8h/WUjENS
30Uzju4bSdLVvIppTDOu1Vhd5g/HWu+ZLu0+ItvN9f4w1mZzNy7zcK7HXbO1
fdb+lLxtg0Zt1a5xF219h+2cLzVrn5Xr+VKT9nEXeTVbbqxd/XJJfVmtrte2
T7ic/zSLtmPDVQawZh/0POThAAAAAADsVMnDJS67L8Xzt+29URdjJjVadr0c
hy0T5moMfds6bGNR2dpY+l1aKZPMF9lo2dt39fbuA66WY6tDK+9K10zqa7L1
Leb1+PNpo2NhdL9ao3q57uey9YmnGR8xSdsYdKIcgz63RaPxE2r7Z6Nytzqf
rG1czjTnxZxLHg4AMrPf4Sc+oqjiSWEULwoj/YDvfBfm2x1z0N4h83Aa/2G8
0nhREOmzzT50mvl+qfn+96GKf2W+/3Gg4mODKJ4TKj1jZN5epQ83/x6afe4j
xZJ+X6CG3xGWKm/sV/pVMn5hqCrPLswsP7mgynsVCuVdfR8f3YK0qWn/tY63
9X2Sm5RzhLnHmJCD+5x22lN5uL6++jmevh3P8XI/LVkMeeZwkYGRZcqyZJny
zo3tfa7RZul7sbXX6DpLm8gzsoznI3k7Ub6XeV+zjN+W5b2Y0e8f2pS2lnJI
eeRZrDYel+0dplb3kbQ5LOkjk2VKuWrtJj+n3ZbNvC/pKg+X5l0nUba/lFPq
WGt/ORayHkNZ+1Pytg2aOW9IHeTv5BgX5X3CtOPd2TJMcpzJdhmtbVlyrhn7
+3Jc1Ttes/ZZSb3GLt92bMp+MLYsoiyj9n6vbSy1VvscbLkx131XY7Xtk63m
/GROhkbLdjVfQxaTxoZz0e872j7oecjDAQAAAADYqZKHS1x2X4O+jdEm5SFa
GRPI1t8hfQZjfz+p767VeQGTMjHSH9tMG4utjFNv6z+RfsB27wOulmN7h9TF
OFZJ28BWvrwefz6V/b1RuaXf2TbmnxxLLsuSNJ9Lq2OT2frdfb1XO1rbucnW
B5plHIl62tpcdJVD9iR5OABoCRlfKogqh4WR/pNxq+/sFeKOOWjvMa4z3jQy
VlmkLzWuDCJ9hvlakSxnoPQ88/PPd4yP9i3z84D59+mh0kfIPh2oeEpY0ocU
VeXAYil+a6iGXivzivYr/bzirMF9DlHLHn/QtLl7+D4GsxIMxK809T7Xebur
eIGMDVhbT5U8nHPbnYcbq/xuozGo5fmtmVyc/E2jd2zkWUYyM0nLSFPPpLyZ
PHfb+jXG1jXNOFBplycmLUuevZL6TiRHmKXt0+wjafYPaYuk5055/kqTfcr6
/OriGEgzbqGsJ+ldsDT76ujlpa1jHrdBlvPG6GxXPaVd0+RMs/Qd2sqXZR9z
0Wdl67NI0z+U9H5rK30btrltm5lvOIu2dmk152frx/LR15h03LkuUx/0POTh
AAAAAADsVMnDJS67L+XzqO0Zu15uLcOza8Pn5Ebva9r+ptVMVdK7xrb+pKR+
sma3o7SDbblp+8rykIdLelewlfEGk7KMSe985vn482mjcstnEI3eD3eRbRxr
0uc6rew7tvfcRR/v1dbTdn6q93+tjkuZ9NlXF48LV5M8HAA4ozArfoaMDRVG
+grfmSjETmn2923GjTKPsPn6L+PfjX8No/hC8/Us46lBFA+GSv/OfP/LQMXH
m6/fDVUcBZE+2hwzXzS/++mi0kFQqnzY/Pt7+0v67UU1/AbJroVq6Qsmz172
rKmq8qRg+vw9mx0DT/J7Mv6e5AUd1/9vYakycez6quThnNvJPFzacaHTjvfU
t+PZKc0ybZkN0Za1qWnL6jX7nk/SO5JpnzuSnruy9C0ljaGfZR+RnE2ryxhr
UmYs6zyzLo6BpDJlaf+04/yl7U/J6zZIe97IMu5VUrmyjPFuK1+jTG/W5aTt
s7L1XaYdj8+WF2xlXgBbn3azy8yirS+n2ZyfrX/Vx3uLSdcv2e9dr7MPeh7y
cAAAAAAAdqrk4RKX3Zeyb8M2jpvYTBYl6Z3qZp+xpZ8jS79PzaR5FZL6ytL0
k2XNpyT1MWYZ19+Wbckyller+1LSdm9mX0rKDIpJn2vk+fjzaaP9Rj7/aXTe
a3WOzkYmzfvTzNwLSZ/J2M5FnTZNWUebZZyGsSZ9vpSHMfMcSB4OANpCoOKX
hUr/Xxjp1b7zSoi95o45aO+W+U7N1xuNVxsvkXHfzNflxuFA6T+Y/z/JHIc/
M1/nmn9b77gMd8t8thOV2q3eOaBKHs65ncrDpcmb1Ux616uvyXtyW12TlpU0
vlKW+o3V1g+T5tkgqWxpx70fu8w086cm7SNJY5GnzUhmabO+jH0BrR4DSWPD
NfOea9I7iWLa/pS8boM0541m5oKwbU9XY+p16r3Xmrb+y7Tnads+1WwfhG1e
g6y51Ga19eU0m/OzbbN2j3k3VtvcEjVbndOhnn3Q85CHAwAAAACwUyUPl+o5
OW3fRlI/o2S90ixLsmpJ71In9fPa/rZm2vcPpTxp5jtx0U9W255p8nq2ORBr
Zsn9Jc0126lx5tJ8biD7R9q6pckIpcln5f3482Xaz3ma3S+zaOvHrJn2nVNp
9zRzlaQ9j3TCNO/Mj7aV/saktpH/l3OKZKXbYYeOC/JwANBuJsjYUTIulvEu
3zkiRGzNHePh/XbKzOGnjj7Qy+Xy0xYuXHhgzcWLFx948803n9Orrl27dsmG
DRvOqblx48ZUY5+1YifycM28l5X0vk4zY/TYntuTymjLJLQ6drQtT5XmmbnV
PF0j04wTZ9tH5NnV9rfNvHM1WlfjXbV6DNjecW1lfPekuWvT7Bt53gZJ541m
3wW0jbmY5XjotTycaOt7bibTa3s3uNmcZVZtfTnNnv9s+2Un6pRmX64p5592
rLsPeh7ycAAAAAAAdqrk4RKX3eeob2O0kuOqt0zp40qTXUrTT5tmPLDashqN
fSb9Hi7nPki7rJrS71avnaS8aeZeSTvnSpY2k34YWXdtLgHp12jHvpS2rWR/
qTd3gPTFS1+/bc6DrMdP3o8/nyZ9zjPads/LkDSHpyj9p3LM1suDpT0Pia3M
Bd0u087L1Mz4CjWz5u7aYYdyiOThAKBjHDRt7h4j80FGepmMb+U714OI2Qyj
+PJA6TfVO74XLVo0tVwuV8eLK1eulHepHvaWW27Z6PN5xFUerpnnsqRl1nue
TtL2PlLSWEa2MbZc3F832g5pnpltz+6tjmWUNLaYbfm2nJ48e7XaZra8XpYc
WqvHgPSNNfr7VrMqtvxSq1lJ39ugHeeNNO2W9h3DXszD2eaTbWY8t1b2TZfa
jsGsYwzaxtHr1Jh3Ytr3ndu1/j7oecjDAQAAAADYqZKHS1x2X8Y+kizz9Um5
JRsjz/xpcktZy2PrI6mnPIPXypNmTo2aad8Tz5qHq9dOacvVTOaomYxLvRyg
q30pzZh8NWX/kd8X0+aBspapG44/Xya98z3aTuSYspxP/n979wIr2X3fBXxC
JSQkKmh4iPIULS/xaEuB5SGggMW7uFBYrb13piK8orq8l9J07WUmK55GBbZF
YKAI08ImbHyd3TsTTNbIXIvgFJMiYiWsDCyBhYZtwW0cBYLM43B+MWOtbub8
z/ucmZPPR/rq3r1777nnOTtz9jv/f5wv8X7wOHfq9PqGvjdaNWXjPG7TZi6k
po9lXWag+T304YBRXHzX5kvmy80fmK82p4vV5vvy/M+xuz4isjv59fmD89XJ
N50/f+OLiq5pfbjD78PF64Um65XqfzQd8yc1r2hZzyF6P/F6Ie7bxHt7Htxv
XRyHotfiZZ2i1L2INmOTPbjdRcsvO0dS51aTPuOudNGDaXMNlM2V2nYew1Sf
rcrr6n0+BqnHjbbvn0vd2+rivaaH2ocru57r7OPUOtV9j3HbpMbvrNthi3Ov
7WNK21QZm7PueVg3MyZPHw4AANIyfbjSZc8avDat04mrm7odjtR9ty5S5774
rn1cp3dXNW3mEqm7PrvuyXR5LlWZr7JN6sx9cCjX3xhJ/Z/M2QyxPnG/vk4n
rm7aziXU97b3+RgR6XPfVo0+HPAFabn8YYt3PftjjpbHP/nRJ9Y/85Hlra+Y
X9n80qPl+tdcvHLymxfLzdfPV+ujo+XJ71usNn9ovlz/yflqs8y//ucXq/W1
+XLzN/OP353/3TP51z+Qf/5C/vmH8/yr/M+v5h/v5fmveT6T5/+M3TMS2ed8
bm7U5fo7H12e/NiyS1cf7vD7cE3Hx0p1LZqO0dOmD5d6DdHFcUi9JzE1nlWq
B9J0vsmzSXWLis6R1L7uoqe3TWqu0qpzgba5BlLzGTbtgj6YVN+x7H7Kvh+D
1ONGnNdt1qnvuRcOtQ8XaXI970rqnuPQ9+JS93LqnOtt567uIlW7cG3ep1kl
MyZPHw4AANIyfbjSZc8a3gNI3Utqkuhf1OkuPZjUvdU2qXuvuWgfR7em6phO
ZWnb06k6523q93V9LtUd56/q+bRrntWpXH9jJPX+023iWO7bOvV93Y+RsvmA
oifcdNl1uo99Rh8OYBjnv+XGjzq/3PyE+eO3fvrR8ubPvXhl84sWy5NfOb9y
69cfLdcPL1YnF+bLze+er9bfmH/9jy9Wm8fny/Wfnq8237ZYbv7aYrX+O/nf
vzf/+q08t/Ov/9P840fyfDzPv8///r/kHz9ljlg5pOTn8b94dLk+V/U60oc7
/D5czD3XZL1Sr6+rjjN/NtErK1rmmK9V4n5Naoz31Ova1Ou2rsb/Sr1vs+gc
Sc052OV7pFJ9tKrnSZtrILVvqvbxylL0nqqy+yn7fgxSjxttuz76cMVJ3UOt
Oi5f6t5GFz3QJkndy6n671Bq37Sd+7hKqsyR2uVjeyozJk8fDgAA0rIB+3Cp
8XSqzh/YZx8n7u8UrV/TPk7cD60z/2BRuujQRPepzvybqcQ2NbmvVXT8tmM1
1e2inU3b955uU2dMvV3jTKXuk6XeE55K3CfpYkyqeE9l0/s/h3b9DZ3Ufept
mnZa2yQeX7u47uPcafr/YEMndS+/zXUYSf3/25AZYt7dTB8OYHDnlzd+eIy3
deHx9/+UxfLZnzV/Yv2VR8tbv+zilc2vXSzXv2V+5eR3Hi0388Vq/fvny80f
nq8235J/fbVYbf7CfLn+9vzj31osN39vvlof55//wzz/JP/e78k/fjTPv8nz
n75htflv+cf/HuN7jd2rkgNLfu7EXMYxVmOd81of7vD7cE1fk6Ve47fpGRW9
Nh6qDxfjD0XnIV5bR/ekyjjzqX2Yeq3f1evhJl2c69evv1j0M9Fb2e6Ltmkz
floX10Dq3O+qs1J0z6Ns+/b9GPT53kZ9uPRjUOrxpsqYl6n3cQ/0/rvPS9xr
Ljvfy5Ka+7fv+4tl96K2Gere2ozJ04cDAIC0bMA+XGos96qvA/vs46TeD9r2
9XLcR2jSRYv7ZW16G7sS9xbKxk4qSmxDm9fsVY5f3LOpMx5a3Dfu4/19sZ2p
eyip8yN1n6ztPCzRgWlyLsW29DVXxb5ff0Mm9f8YY88xenx8/EKT+Ynjsbur
ruk+HIu4ftosd1/GhxvivcSZPhzA5J0/f+OLvm75/h99dPn4Sy8uN1/2yBO3
ft5iefMXH11Z/6qj5clvWFzZfN18uX5kvjp5x2K5eWyxWl+aLzdPLFabP7NY
rv/SfLX56/mfn86//g/yr53kf34+//ihPN87X63/df7xE3nu53k9zxuj97mk
UWL+4DjW55c33t7kPNOH04drs151trfLPlxsc7yfKdYz7jnEfYoYM6npex5T
+7Bombvef9c0qff1FB2L1PvWhsoQfbjUz3Z1P6LofZdl27fvx6CP94NWWfYX
eh8ukhpXsso9nNR9+i7O+aZJ3Vcru6ea6nX2PeZd1feiDnQv53OZMXn6cAAA
kJYN2IeTN++nxj2O6P7E6/Dox8T9h23iz3GPJV5Dt+1NVUl046IjE/fXoiOy
XY+41xUf42uxPnEfpYt7gHX6VLH9sR/iZx5ct9hHcc8n3iMb78fuex/F/bvo
xsU+iH0Vifexx3GM3z/EcSo7l2J/nD2X4vyK+/Wx3l13KuWwE9d9nDdxXcW1
F/cat4k/x9fj3Inrz7nzBR99OAC69rbzyxs/8vy33vhxi+XJTz164ubPvrjc
fNXiyskvny9v/bqjK5vferRc/67FarOIcciOVus/slhu3jVfrd89X66fzL/+
HYvl+jvnq83fzz9/drFaP5d/fpp//s/zvJLn3+b5z3ley/M/xu6RTSH5fvzw
0fLkq9scdH24w+/DNX1dcEh9uOgobF8nNXkfUVmajA/XxXvPtkm9r6foWKTO
iaEyRB8u1b/p6jVx0bVQtn37fgz6fD+oPlz5Y1bR8srej5nqjY0573QkNSZi
2Tj5qfk++hyTreo8I0N24SIzJk8fDgAA0jJ9OBkwfY4vJiIinUcfDoCDF3PQ
XnzX5kseWd78iRcef/bL58v1zz+6cvJLLi43v3pxZf0b58uT33602jy6WK5/
z3x18k3z5eZPLFbrK4vl5s/OV5u/nH/9qcVq83cX797cyP+8zj//x/nf/7P8
83+Zf35nsfrAf8g/fn+eT+f5X2P31zrswX1/jAuY78K3tT0G+nCH34dr2ms5
hD5cdC/66L+dTVFnJtVTi/Xq6hw51D5cat91dQ0MMT7fIffhUsegz/t8+nDl
ST12pbqcqTkahnjvcSqpsSzLxvsv6rZ2+Vh6NvF+5CrX0Bj7dcbk6cMBAEBa
pg8nA0YfTkTkoKIPBwA1xRy0D3/zzS+eL49//MXHNz/t0eXJz1k8cfMXzpeb
X3F05eShxfLW1y7evTk/X66/4Wi1eediuf6j89X6W/O/v7pYrf/iYrn5q/PV
5m/nX7++WG3en3/+j/Kvv5h//vL/HwPv3+X5vjw/mOezef5vxz24/52v27fH
PLpd7ZP3vOc9X/7e9773ndvcuHHjnR/72Mc+MtV84hOfuP2pT33qI9t8+tOf
/p6+n7f12Ydr83p9n/twVee26ypN+nCzWXfzFjbpw0X3ZMh9VJQqY7T10Yfr
skPTtA+378dAH27cPlxqXLLo+hb9XFGPbl/uz6bO+6L9HX2zop+JORC6XscY
Y69qlzq+d4z9OGPy9OEAACAt04eTAaMPJyJyUNGHA4D997bzf+zGjzi/vPH2
85fXP2m+vPUzLj7x/l/w6HJ9bnHl5Gvmy81vOrqy/h2L5cnF+Wrze+fL9R9c
rDbfvFhu/tR8tf5z+ce/kv/5b+Rf/64YB++R5a2v6HuF8+cYb9uD5zl95tuG
/p36cG+mah8uuhFF69UkMT5QbM+lS5deLfqeog5HaiyksedL3fcuVlfXQNHP
drn/9eHqRx+uPKl5T4uOQWqe1ePj4xe6OufbJNVX3mw2z9c9Rvfv33+my/WL
uVerXDdxDNrOG9wmMyZPHw4AANIyfTgZMPpwIiIHFX04AKBzmT5c59GHezNV
+nDR9yhapyp5+OGHf+Dq1asfjU7G2fnvmnZmhhirqev5UmMfxNhUMe9i36nS
J+mjD1d23Lq4FtrMl7oPx0Afbtw+XOTChQufLFrurh7Y5cuXP973+d5FUo/B
XXx/09y+ffuDVf6tiJ70HuxDJk4fDgAA0jJ9OBkw+nAiIgcVfTgAoHOZPlzn
0Yer1oeLbkjR+uza7ugbRffh7t27z7YdoyzVMxmij5WaS7BJHy7GRxr6PO/r
Gjh37txn+t7/ffTh9uEY6MON34c7PT19rmi5u+YJLfrefehvVd3nZ+cfTe3b
eAzvap1iDtoq/370MT9rk8yYPH04AABIy/ThZMDow4mIHFT04QCAzmX6cJ1H
H65aHy7GCSpan21i/Lgq3be6xyHVmUmt19neR9Ok5h8sOhbRByz6mS47JmNf
A6ntPDsGYNMUjUtYdn3t+zHQhxu/Dxdj9xUtN8aefPB7mzwOjJVUhzfGRXzw
e6PLV/S9Xc1XGr+z7N+PSPQTx95328yYPH04AABIy/ThZMDow4mIHFT04QCA
zmX6cJ1HH668D1c2Nlz0RtqOBda0D5fq2nTVrUj9jqJjkZpbNnpaQ5/nfV0D
qc5ZV/u/6HeUXV/7fgz04cbvw0VSc6DG+Jbb70v1xsY+l3al6LqOMR2335Pq
A166dOnVLtajahfuwX29D5kxefpwAACQlunDyYDRhxMROajowwEAncv04TqP
Plx5H66sz9B0TLhtUp2MWUlnJjVmU1dzGKbmBC06Fnfu3LlZ9DNd38eJ/dOm
j9jmGkjNN9lVn6Zo/5ftx30/Bvpw+9GHix5W0bK3j4upx6iysTXHSqoPuh27
McZJLPqeuH76XIdtok/d9t+QPjJj8vThAAAgLdOHkwGjDyciclDRhwMAOpfp
w3UefbjyTkeqz9JFFyTVR5mVdGaiR9H0Z6sk1alKHYuyjl9XYyE9eJ5EryTm
j40e2lNPPfXhqnOCtrkGYv+mtrPt9sWct0XLLru+9v0Y6MPtRx8uUtS53M6Z
mvr9Xc0L3HVS12acm/E973jHO/5jarvbJNW1e/Bc72pO1q4zY/K2fTi9OAAA
2C3Th5MBow8nInJQ0YcDADqX6cN1Hn248l5b9Hv6WJdtUnNuzip0Zoo6HZEY
267NuqWWXbb9qf0Wy+3i/E39jvi7Ia6B1DpU7eQV5dq1ay8XLbvK9bXPx0Af
bn/6cNevX3+xaPnRuW06Z+/YKZrjdbveRdu87cs1TVmPuM7j01iZMXn6cAAA
kJbpw8mA0YcTETmo6MMBAL3In2d814Tz5NDP2/ThyvtwTeYLrZoYW6lo2duU
dWZS+2o2az6fa9lyy7a/bHyktvMRvvLKK7dSy4+5TIe4BlJdojbjTJWN71bl
+trnY6APtz99uNQ4k3F+F10jMR9o29/dZ1LnZ+q6jXEZ2/zessfNrrqofWbG
5OnBAQBAWqYPJwOm6L2IcV967HUTEZHPiz4cAEBN+XOo3zb08zZ9uDeT6sPF
3I9F6xLjd7XZ/6mu3TZVOjPRuyr6+fi7uvOmVhnfqMqxSP1s2zkJU9scqToP
YdtroGzO1KZz6l6+fPnjqeVWvb729Rjow+1PHy5SNhZk2/0wVsoeG89+7cKF
C59s8/vKxvvc93HhtpkxefpwAACQlunDyYCJ9+3FPYO4L7FN/DnuS4+9biIi
8nnRhwMAqCnTh3sr+9SHS/VZZjV6V2dTtX9SpXNSNg5Y5O7du89WWa/NZvN8
lfWqcixivtbUz0cfsMn4damOYtnx7OMaiPkVU+tTd/7FsnOuzvW1r8dg3/tw
qV5TjDs25LoM0Yd76aWXPlD1uo8cwhhnkbJr82yqjiu5K/fv33+m7Fobe39U
zYzJ04cDAIC0TB9OREREdkcfDgCgpkwf7q3sUx+urCdSdzyh6EzE+/tSy3ww
VXtsVZYZHZ+i7lPM3Vp3jKgqx6LKcmIfV9nGWPcq61hn3KouroEq21n1/ZyP
PfbY3Sr7rM71tY/HYN/7cGUd07hehlqXIfpwVc+TuufL2Im5T+tsV9N+c6Ts
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
AGCf/D89VLt4
    "], {{0, 1607}, {2500, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> 500, Interleaving -> True],
   
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{450.2484375, Automatic},
  ImageSizeRaw->{2500, 1607},
  PlotRange->{{0, 2500}, {0, 1607}}]], "Output",
 CellChangeTimes->{{3.740257057112879*^9, 3.7402570811306067`*^9}, 
   3.7402571754772387`*^9, 3.7402573553999367`*^9},
 CellLabel->
  "Out[237]=",ExpressionUUID->"c4682b5e-961d-42dd-86e5-76b4a775f568"]
}, Open  ]]
},
WindowSize->{922, 836},
WindowMargins->{{245, Automatic}, {Automatic, 34}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 450, 12, 30, "Input",ExpressionUUID->"d61fa311-a546-41e1-9c66-493bb638f306"],
Cell[CellGroupData[{
Cell[875, 29, 350, 7, 30, "Input",ExpressionUUID->"95ed2ac0-da1a-415a-b5f2-b8926aab8475"],
Cell[1228, 38, 2632, 60, 99, "Output",ExpressionUUID->"87742545-3551-4a53-bd0e-331a10193eee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3897, 103, 382, 8, 30, "Input",ExpressionUUID->"a103cd38-3ad2-45c5-9c5d-f0771e294b15"],
Cell[4282, 113, 24428, 482, 427, "Output",ExpressionUUID->"4037f470-5289-405e-9d2c-dc57b0749c05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28747, 600, 441, 9, 30, "Input",ExpressionUUID->"52d3fcc0-3413-49f6-970c-f34ac1fe3d61"],
Cell[29191, 611, 580781, 10278, 75, "Output",ExpressionUUID->"630cdb22-1a3c-4bd4-b789-14bf9ad7ef6e"]
}, Open  ]],
Cell[609987, 10892, 534, 11, 30, "Input",ExpressionUUID->"9cb1ce23-b10f-497e-b8d2-1a1e813b35ef"],
Cell[CellGroupData[{
Cell[610546, 10907, 361, 8, 30, "Input",ExpressionUUID->"2d2547b2-94bc-4a52-9ba7-d5c0355ada66"],
Cell[610910, 10917, 24360, 482, 427, "Output",ExpressionUUID->"67257d34-94a3-485f-884f-8e8364285267"]
}, Open  ]],
Cell[CellGroupData[{
Cell[635307, 11404, 436, 9, 30, "Input",ExpressionUUID->"01856d76-62f6-4078-bade-b7efb1f53fb8"],
Cell[635746, 11415, 396850, 6645, 75, "Output",ExpressionUUID->"2c963987-90ea-418c-b3d6-94b32f9ef3fb"]
}, Open  ]],
Cell[1032611, 18063, 405, 9, 30, "Input",ExpressionUUID->"631b63c6-547b-41f4-9f67-e95dfa7288f0"],
Cell[CellGroupData[{
Cell[1033041, 18076, 310, 7, 30, "Input",ExpressionUUID->"b4c707e8-2df0-4f60-a1a8-92041cb41ef1"],
Cell[1033354, 18085, 24572, 488, 427, "Output",ExpressionUUID->"7db6a001-f8ae-48c6-9d1b-ca3d8440b53a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1057963, 18578, 382, 8, 30, "Input",ExpressionUUID->"82b718da-e6b7-4731-9305-e9c5f369048a"],
Cell[1058348, 18588, 198335, 3464, 75, "Output",ExpressionUUID->"f107a903-0ffa-47c1-8f02-c31ae20c702c"]
}, Open  ]],
Cell[1256698, 22055, 402, 9, 30, "Input",ExpressionUUID->"468a21bb-a663-4a2b-b64a-7421cc17bb80"],
Cell[CellGroupData[{
Cell[1257125, 22068, 313, 7, 30, "Input",ExpressionUUID->"b9167683-3362-405c-8882-8b9f42a5c19a"],
Cell[1257441, 22077, 24318, 482, 427, "Output",ExpressionUUID->"a2d83277-440e-435d-b6a0-319e414333a0"]
}, Open  ]],
Cell[1281774, 22562, 402, 9, 30, "Input",ExpressionUUID->"19a6536d-3d88-42fe-827e-6cdb11d373b6"],
Cell[1282179, 22573, 404, 9, 30, "Input",ExpressionUUID->"7da9fbbe-9e8a-425d-8868-f7643960c87d"],
Cell[CellGroupData[{
Cell[1282608, 22586, 314, 7, 30, "Input",ExpressionUUID->"8df486e8-f1fa-4cff-b30f-53f37861c7e3"],
Cell[1282925, 22595, 23801, 474, 427, "Output",ExpressionUUID->"e4fd866f-0974-4c5b-bb32-705d8a76af05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1306763, 23074, 411, 9, 30, "Input",ExpressionUUID->"8feaa760-3f78-4a8b-a495-b38f050750e6"],
Cell[1307177, 23085, 69309, 1314, 75, "Output",ExpressionUUID->"bbac3f4e-8c15-4e8e-b89c-e917f0b3deba"]
}, Open  ]],
Cell[1376501, 24402, 415, 10, 30, "Input",ExpressionUUID->"beff436a-4888-4f47-b894-a7755cacf193"],
Cell[CellGroupData[{
Cell[1376941, 24416, 311, 7, 30, "Input",ExpressionUUID->"3b90c8a1-1d14-4439-b4f3-2ee7c603c249"],
Cell[1377255, 24425, 24705, 485, 427, "Output",ExpressionUUID->"1039dfad-7224-4606-9cd1-8168687b6be9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1401997, 24915, 388, 8, 30, "Input",ExpressionUUID->"00e2cc41-fe65-4ec0-879c-478feeaded4b"],
Cell[1402388, 24925, 298257, 5146, 75, "Output",ExpressionUUID->"ba992e99-c4fb-403b-8503-dcb9a2310517"]
}, Open  ]],
Cell[1700660, 30074, 402, 9, 30, "Input",ExpressionUUID->"96b3fc80-a203-46e4-8984-c277e9692d80"],
Cell[CellGroupData[{
Cell[1701087, 30087, 312, 7, 30, "Input",ExpressionUUID->"4e1f82da-f41e-4018-b774-e928bdfa650c"],
Cell[1701402, 30096, 24362, 483, 427, "Output",ExpressionUUID->"65a5c442-a74f-4790-b605-23dae0391368"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1725801, 30584, 380, 8, 30, "Input",ExpressionUUID->"4b9bb93d-cd2c-4934-bbba-029919a78c38"],
Cell[1726184, 30594, 198334, 3464, 75, "Output",ExpressionUUID->"65080d7b-771b-4d6a-8a79-95401a974b8d"]
}, Open  ]],
Cell[1924533, 34061, 403, 9, 30, "Input",ExpressionUUID->"92c83ef8-8be4-42a7-9bb2-5df167ee15cc"],
Cell[CellGroupData[{
Cell[1924961, 34074, 312, 7, 30, "Input",ExpressionUUID->"e4520a52-f29c-4f75-9316-f2b784d5175b"],
Cell[1925276, 34083, 24711, 486, 427, "Output",ExpressionUUID->"97271454-7993-4782-a08e-6b5fd222565f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1950024, 34574, 377, 8, 30, "Input",ExpressionUUID->"ae51c06d-1152-41da-ad27-88037799d185"],
Cell[1950404, 34584, 633951, 10806, 75, "Output",ExpressionUUID->"e488ef83-2dcb-486c-bd87-c579de77859c"]
}, Open  ]],
Cell[2584370, 45393, 411, 9, 30, "Input",ExpressionUUID->"e8107915-e916-413e-879c-622acde3cf11"],
Cell[CellGroupData[{
Cell[2584806, 45406, 314, 7, 30, "Input",ExpressionUUID->"38de8768-4194-4beb-8511-9fc77ce7d4f5"],
Cell[2585123, 45415, 24445, 484, 427, "Output",ExpressionUUID->"980f7234-2fcd-40d4-ab50-0101cfd42ae7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2609605, 45904, 385, 8, 30, "Input",ExpressionUUID->"64382aad-b9b7-41f1-8838-009707833196"],
Cell[2609993, 45914, 396828, 6645, 75, "Output",ExpressionUUID->"ad6cf63d-8e82-4bd3-8605-ff77ff397a13"]
}, Open  ]],
Cell[3006836, 52562, 408, 9, 30, "Input",ExpressionUUID->"2b2d9949-6d49-4f2f-b6d3-8e756612df7f"],
Cell[CellGroupData[{
Cell[3007269, 52575, 315, 7, 30, "Input",ExpressionUUID->"05ac1127-b43e-4bd2-9bef-3137e0c98cfd"],
Cell[3007587, 52584, 24308, 486, 427, "Output",ExpressionUUID->"1fdd2803-40c0-4d80-8956-bc4e8f3bb346"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3031932, 53075, 380, 8, 30, "Input",ExpressionUUID->"d929678f-9c9a-430d-acbe-a299997b26c7"],
Cell[3032315, 53085, 69309, 1314, 75, "Output",ExpressionUUID->"713116c2-f945-4d34-a248-00340a66ad0d"]
}, Open  ]],
Cell[3101639, 54402, 801, 14, 30, "Input",ExpressionUUID->"025f5246-e073-4e20-a102-9015df5939f4"],
Cell[3102443, 54418, 421, 9, 30, "Input",ExpressionUUID->"0f1f24ec-7fc6-4191-9a69-c29a61d98d89"],
Cell[3102867, 54429, 421, 9, 30, "Input",ExpressionUUID->"a51796d3-dd11-4400-9683-69ea800bad93"],
Cell[3103291, 54440, 420, 9, 30, "Input",ExpressionUUID->"17aeb919-1ffb-4b10-bcf1-50ca111caa07"],
Cell[3103714, 54451, 420, 9, 30, "Input",ExpressionUUID->"f702e22e-6014-4088-8add-ae74b927103b"],
Cell[3104137, 54462, 418, 9, 30, "Input",ExpressionUUID->"88b76144-e4c9-4cb6-bc83-62e1ad6c7b37"],
Cell[3104558, 54473, 423, 9, 30, "Input",ExpressionUUID->"5120e60a-60f9-44bf-86ae-edd3ea7dd450"],
Cell[3104984, 54484, 418, 9, 30, "Input",ExpressionUUID->"6c5d4ca8-3dba-4ed9-88e5-dc92eecbdf6d"],
Cell[3105405, 54495, 422, 9, 30, "Input",ExpressionUUID->"235f0c31-5cd3-4326-843d-0659e3ce7815"],
Cell[3105830, 54506, 424, 9, 30, "Input",ExpressionUUID->"eec5dc20-dc69-4e14-b577-bf34e0241e90"],
Cell[3106257, 54517, 739, 17, 94, "Input",ExpressionUUID->"8a3ff557-3838-472d-a386-3b2d6d3f9bd2"],
Cell[CellGroupData[{
Cell[3107021, 54538, 3948, 80, 388, "Input",ExpressionUUID->"12e3a80d-a5e0-4e05-8670-0ee9fb4568e8"],
Cell[3110972, 54620, 6336, 130, 261, "Output",ExpressionUUID->"c75cbdc3-237b-4943-ad56-031b86d99871"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3117345, 54755, 529, 12, 34, InheritFromParent,ExpressionUUID->"dde6ee62-10b6-491e-94c5-0c203e70178c"],
Cell[3117877, 54769, 187, 3, 34, "Output",ExpressionUUID->"3c95ce91-ce57-4c08-a573-a47971d3af28"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3118101, 54777, 2086, 51, 94, "Input",ExpressionUUID->"c094b5fe-0b1c-4c13-b58c-058d93c280f9"],
Cell[3120190, 54830, 176481, 2900, 337, 151819, 2495, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"db838cb7-d91c-413a-9fc3-f77b1289e93a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3296708, 57735, 2795, 53, 136, "Input",ExpressionUUID->"3ef63a13-3910-4cc4-90b1-7bd626933fb5"],
Cell[3299506, 57790, 196384, 3226, 306, "Output",ExpressionUUID->"c4682b5e-961d-42dd-86e5-76b4a775f568"]
}, Open  ]]
}
]
*)

